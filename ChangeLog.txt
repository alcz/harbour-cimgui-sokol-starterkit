/* Encoding: UTF-8 (No BOM)  Notation (in 5th position):
     * Change, ! Fix, % Optimization, + Addition, - Removal, ; Comment
   Entries may not always be in chronological/commit order.
   See license at the end of file. */

2025-06-02 11:50 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * examples/edit1.prg
    ! inputInt, inputDouble have no min/max value defined,
      width of the control does not prevent this (Data width
      error possible)

  * cimgui-common/hbcombow.prg
    + extended hb_igComboText() editable combo box input widget
      variant with optional hint message

2025-06-02 12:07 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  + examples/edit1.prg
    + .dbf table/grid editing example with Dear Imgui widgets

  * cimgui-common/hbctcalw.prg
    ! hb_igDatePicker() fix: with empty date in supplied variable
      start picking today, not on year 0

    ! hb_igDatePicker( <cLabel> ) fix for non printable labels
      starting with "##", causing "+" igButton's contained in this
      widget to stop working

  * examples/runner.prg
    * on startup don't try to load a file with drag-and-drop mode enable
    ; work-in-progress: they are not really loaded at all

  * sokol/hbsokol.c
    + SAPP_IS_FULLSCREEN() -> <lFull>, SAPP_TOGGLE_FULLSCREEN()

  * ChangeLog.txt
    - removed a TODO (done)

2025-02-25 17:50 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui-docking/hbimgui.cpp
  * cimgui-docking/hbimstru.ch
    + ImGuiWindowClassStruct struct, available here with
      ImGui 1.85+, seems useful with advanced docking window
      setups

  * cimgui/hbimstru.ch
  * cimgui-docking/hbimstru.ch
    ! correct ImGuiIO_ConfigWindowsMoveFromTitleBarOnly identifier,
      last character was missing

2025-02-22 22:24 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbimgui.cpp
  * cimgui-docking/hbimgui.cpp
    * regenerated using updated version of the generator.prg

    * igDockBuilderSplitNode() out parameters of type ImGuiID passed
      as reference are now supported

    * commented-out/templematized some functions that do not make
      sense to call from .prg now

2025-02-18 12:14 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * sokol/sokol.hbp
  + sokol/hbemfile.c
    + additional handling of async file loading on WebAssembly platform
      from within PROCEDURE ImDrop( <aFiles>, <nX>, <nY> )
      you can call
      hb_sokol_wasm_droppedFileLoad( <nFileIndex> [, <nBuffer> ][, <xCargoOrFunc> ] )
      hb_sokol_wasm_droppedFileSize( <nFileIndex> ) -> <nSize>

      <nFileIndex> - specifies file from <aFiles> list

      <nBuffer>    - optional, <nSize> is assumed as file size or can be larger

      <xCargoFunc> - if it is codeblock or function symbol, then result of the
                     operation will be redirected to this routine:
                     { |cBuffer/nErrorCode,nFileIndex| ... } -- checking type
                     of the first parameter there is neccesary

                     if <xCargoFunc> is any other value then following
                     callbacks are assumed as defined in your code:
                     ImAsyncFile( <cBuffer>, <nFileIndex> [, <xCargo> ] )
                     in case of error:
                     ImAsyncError( <nErrorCode>, <nFile> [, <xCargo>] )

                     Error codes are not defined in .prg code
                     SAPP_HTML5_FETCH_ERROR_NO_ERROR          0
                     SAPP_HTML5_FETCH_ERROR_BUFFER_TOO_SMALL  1
                     SAPP_HTML5_FETCH_ERROR_OTHER             2

    ; this functionality needs emscripten SDK release 2.0.32 or newer

  * examples/runner.prg
    + test async load

  * examples/wmake_runner.sh
    * emscripten SDK additions and notes regarding exports needed

2025-02-12 16:55 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbimgui.cpp
  * cimgui/hbimstru.ch
  * cimgui-docking/hbimgui.cpp
  * cimgui-docking/hbimstru.ch
    + following ImGuiIO struct possibly useful properties should
      be now settable:

      :ConfigFlags NOTE: this already had hb_igConfigFlagsAdd()/Del() helper
      :BackendFlags
      :DeltaTime
      :IniSavingRate
      :MouseDoubleClickTime
      :MouseDoubleClickMaxDist
      :MouseDragThreshold
      :KeyMap
      :KeyRepeatDelay
      :KeyRepeatRate
      :FontGlobalScale
      :FontAllowUserScaling
      :FontDefault
      :DisplayFramebufferScale
      :ConfigDockingNoSplit
      :ConfigDockingAlwaysTabBar
      :ConfigDockingTransparentPayload
      :ConfigViewportsNoAutoMerge
      :ConfigViewportsNoTaskBarIcon
      :ConfigViewportsNoDecoration
      :ConfigViewportsNoDefaultParent
      :MouseDrawCursor
      :ConfigMacOSXBehaviors
      :ConfigInputTextCursorBlink
      :ConfigDragClickToInputText
      :ConfigWindowsResizeFromEdges
      :ConfigWindowsMoveFromTitleBarOnly
      :ConfigMemoryCompactTimer

  * examples/loadfont.prg
    * example of use:
      ImGuiIO( igGetIO() ):ConfigInputTextCursorBlink := .T.

2025-02-12 15:09 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbimgui.cpp
  * cimgui-docking/hbimgui.cpp
    * respect default float parameters for functions (values other than 0)

  * cimgui-common/hbfunc.prg
    * default to "EN" codepage in font adding routines
      if no parameter is passed

2025-02-12 14:07 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbimgui.cpp
  * cimgui-docking/hbimgui.cpp
    * respect default integer parameters for functions (values other than 0)

2025-02-09 17:06 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * sokol/sokol_app.h
    ! fixhack io.DeltaTime == 0.00 assertion spotted on Edge browser,
      stopping the app, bug or machine too fast(?)

2025-02-09 14:55 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui-common/hbfunc.prg
    + now also can use hash to specify unicode ranges and
      specific characters together, description updated in
      previous commit message

  * cimgui-common/hbfunc_.c
    + added entrypoint for setting font oversampling to use
      by HiDPI renderers (currently used by sokol):
      __IMFONTHIDPI()
      __IMFONTHIDPITEST() is for debugging, to check if
      renderer has really set something

    ; this was last missing bit for HiDPI being decently
      handled - detecting a HiDPI screen is another story
      to do

  * cimgui-docking/hbimgui.cpp
  * cimgui/hbimgui.cpp
    * igPopStyleColor( <n> ), igPopStyleVar( <n> )
      make <n> default to 1, as 0 does not make sense

  * examples/loadfont.prg
    + added -hidpi parameters for testing the difference

  * sokol/hbsokol.c
    + call __IMFONTHIDPI()

2025-02-09 03:07 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbfunc.prg
    * hb_igAddFontFromFileTTF( <cFile>, <nSizePx>, <xConfig>,
                               <xCdpList>, <lDefaultRange>, <lMerge> )
                              -> <pFont>
      hb_igAddFontFromMemoryTTF( <cBuffer>, <nSizePx>, <xConfig>,
                                <xCdpList>, <lDefaultRange>, <lMerge> )
                              -> <pFont>
      <lMerge>   - this parameter now works, if you want to supplement
                   additional icons/glyphs to your main font
      <xCdpList> - apart from Harbour CDP names like "PL852", this parameter
                   can now receive custom a list or range of additional UNICODE
                   characters:
                   { 0xaabb =>, 0xbbcc => } - individual characters as hash
                   { 0xaabb => 0xaff, 0xbbcc => } - both range and i. as hash
                   { 0xaabb, 0xbbcc }       - individual characters as array
                   { 0xaa00, 0xaaff, 0 }    - range of characters as array
                                              (needs trailing 0)
                   { 0xaa00, 0xaaff, 0xbb00, 0xbbff, 0 } - more ranges too

  * examples/loadfont.prg
    * updated to load and show awesome icons font

  * meta-rebuild.hbp
  * meta-rebuild-docking.hbp
    * specify -hbcontainer as the project only list subprojects

  + examples/fonts/IconsFontAwesome6.ch
  + examples/fonts/IconsFontAwesome6.h
  + examples/fonts/IconsMaterialDesign.ch
  + examples/fonts/IconsMaterialDesign.h
  + examples/fonts/MaterialIcons-Regular.ttf
  + examples/fonts/fa-regular-400.ttf
  + examples/fonts/fa-solid-900.ttf
    + glyph fonts borrowed from ImRAD project
      (https://github.com/tpecholt/imrad)
      supplemented by me with .ch files based on .h

2025-02-08 23:42 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui-docking/hbimgui.cpp
  * cimgui-docking/hbimstru.ch
    + generation of ImGuiViewport struct, available in 1.85+,
      example:
      ImGuiViewPort( igGetMainViewport() ):Size -> { x, y }

  + examples/UbuntuMono.ttf
    + added the file used in the samples

2025-02-03 23:08 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * examples/runner.prg
  * sokol/hbsokol.c
    + enabled facilities to handle drag-and-drop events (opening by dragging)

      Default/demo application start routine updated parameters
      specification are:
      sapp_default_run( <cWindowCaption>, [ <nWidth> ], [ <nHeight> ],
                      [ <lClipboardAccess> := .T. ], [ <lHiDPI> := .F. ],
                      [ <nDropFilesMax> := 0 ], [ <nMaxPathLen> := 2048 ] )

      <nDropFilesMax> == 0 disables drag-and-drop, -1 could enable other
      drag-drop events, but not files (don't know if it's possible now)

      To handle dropped files, add PROCEDURE ImDrop( aFiles, nMouseX, nMouseY )
      to your application source. <aFiles> elements should contain full paths to
      the files.

2025-02-02 23:10 UTC+0100 Aleksander Czajczynski (hb fki.pl)
   + examples/emcc_uncool.ch
   * examples/runner.prg
     * extended emscripten linking hack to make sure all Harbour core
       functions are going in

2025-01-21 16:19 UTC+0100 Aleksander Czajczynski (hb fki.pl)
   * demo.c
   * hbdemo.prg
   * sokol/hbsokol.c
   * sokol/sokol_app.h
   * sokol/sokol_gfx.h
   * sokol/sokol_imgui.h
   * sokol/sokol_time.h
     updated sokol to 1776998de341bc68b2e25aae6374f5fa3648f4ec
     '2022 as some incremental update step
     sokol_imgui.h is from ae1c4b50545bee6efc44415502db8429ca66d883
     next step will be to update both to the newest, or possibly
     we may step up to Dear ImGui 1.87 first, which has new
     keycode handlings - if it ever needs some debugging by 
     bisecting.

   * ChangeLog.txt
     * fix indent

2025-01-21 15:16 UTC+0100 Aleksander Czajczynski (hb fki.pl)
   * sokol/hbsokol.c
     + pass sapp_dpi_scale() to ImGui frame init, HiDPI displays
       are common now

     + added .prg function sapp_dpi_scale() -> <nScale>, for
       possible diagnostics

2025-01-21 12:56 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * examples/runner.prg
    + added -hidpi mode

  * sokol/hbsokol.c
    * exposed clipboard access and high DPI mode in the default/demo
      app starting routine

      Updated parameters specification are:
      sapp_default_run( <cWindowCaption>, [ <nWidth> ], [ <nHeight> ],
                      [ <lClipboardAccess> := .T. ], [ <lHiDPI> := .F. ] )

2025-01-15 13:47 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui-docking/cimgui.hbp
  * cimgui/cimgui.hbp
  * cimplot/cimplot.hbp
    ! don't regenerate .hbx when using emscripten wasm compiler,
      it results in a empty listing

  * examples/runner.prg
    + apply emscripten linking hack for all cimgui/ImGui functions,
      REQUEST is not enough, emscripten + LLVM combo still optimizes
      out functions that are not really called

    ; HELP WANTED with the above
    ; I've at least studied all the compiler options like -O0, etc.
    ; some say that compiling as SIDE_MODULE helps, then maybe we
    ; will need small loader as MAIN_MODULE and app itself in
    ; SIDE_MODULE. 

  * examples/wmake_runner.sh
    ! with all the ImGui functions compiled in the runner
      -sALLOW_MEMORY_GROWTH=1
      emscripten build flag is now needed

  * sokol/sokol.hbp
    % space

2025-01-14 19:36 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * examples/runner.prg
    * some effort to make runner usable under emscripten WASM

    + more validation of arguments and STDIN input

    ! fix error message on .hrb loading to include details again

    ! added emscripten WASM linking hack as seen in other samples,
      i'd be happy to get rid of it.

    + added deurlize routine, this is the format introduced by
      Viktor Szakats in HB3.4.
      To manually convert .hrb file to an url which this runner can
      understand from web browser address, you could use Harbour
      3.4 hbmk2. Make sure that output is prefixed with '*'

      in a batch script:
      echo -n * > file.hrb.z (on Unix)
      echo | set /p dummy="*" > file.hrb.z (on Windows)
      hbmk2 -urlize < file.hrb >> file.hrb.z

      Then address bar of a browser could be filled with url such as:
      https://example.com/runner.html#<file.hrb.z contents here>
      which effectively would be something like:
      https://example.com/runner.html#*eJx1VM9z20QUfpLtuHGdpiR...

2025-01-12 23:46 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * examples/runner.prg
    + added simple feature to read .hrb file from STDIN.
      note on Windows: "type file.hrb | runner -"  runs,
      but "runner - < file.hrb", does not work. Probably due
      to some some TEXT/BINARY switch being different in C RTL
      STDIO routines.

    * experiment with UbuntuMono font

2025-01-12 21:35 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * wmake.sh
    + call meta-rebuild*.hbp for emscripten, respect IMGUI_DOCKING
      envvar to build for a branch

    ; it's very important to keep all the libraries built for the
      same branch, as the structs and headers files may be different
      between branches, making the final WebAssembly app crash

2025-01-12 23:46 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * examples/runner.prg
    + added simple feature to read .hrb file from STDIN.
      note on Windows: "type file.hrb | runner -"  runs,
      but "runner - < file.hrb", does not work. Probably due
      to some some TEXT/BINARY switch being different in C RTL
      STDIO routines.

    * experiment with UbuntuMono font

2025-01-12 20:17 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * examples/browse1.prg
  * examples/images/hello.prg
  * examples/implot/line.prg
  * examples/loadfont.prg
  * examples/plotfloat.prg
  * examples/procdbf.prg
  * examples/runner.prg
  * examples/treetable.prg
  * hbdemo.prg
  * hexeterminal/tdemo.prg
    * #ifdef's __PLATFORM__WEB changed to __PLATFORM__WASM

  * examples/wmake.sh
  * examples/implot/wmake.sh
  * cimgui-docking/wmake.sh
  * cimgui/wmake.sh
  * cimplot/wmake.sh
  * examples/wmake.sh

  * sokol/wmake.sh
  * wmake.sh
    * HB_PLATFORM=wasm (changed from =abstr)
    * HB_COMPILER=emcc (changed from =wasm)
    * permissions of some .sh scripts reset to 644

  ; this makes project not compatible anymore with experimental
    WebAssembly in forked Harbour 3.4

2024-11-01 21:59 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  + examples/ig_winlist.prg
    + microframework routines for managing multiple widgets
      of the same type, considering widget is a function call

      parameters called to a create function end up stored
      in an array, of which every individual element is passed by
      reference - like @array[ 1 ], etc. STATIC variables can't be
      used in such scenario when single widget is used multiple instances

      IG_MultiWin_Init() - initialize before first use
      IG_MultiWin()      - should be called in main loop (inside ImFrame())
      IG_WinCreate( <symFunc>[, <cKey> ][, <aData> ][, <nElements> ]
                   [, <lCloneData> ] ) -> <nWnd>
      IG_WinCreate( <symFunc>[, <cKey> ], NIL, <xParam1>, <xParam2>, ... )
                    -> <nWnd>

      possibilities:
      IG_WinCreate( @WIG_*(), "document:1234", { oDok, "test" } )  -> nWnd
      IG_WinCreate( @WIG_*(), "document:1234", NIL, oDok, "test" ) -> nWnd
      IG_WinCreate( @WIG_SQLWait(),, { 0 /* nState */ } )          -> nWnd
      IG_WinCreate( @GetNotifyLoop(), "SysNotifies" )              -> nWnd
      IG_WinDestroy( nWnd ) or IG_WinDestroy("document:1234")
      or IG_WinDestroy() without a parameter when called from
      of the widget inside ()WIG_*

  + examples/runner.hbp
  + examples/runner.prg
    + created simple script runner of Dear ImGui apps,
      a program compiled to .hrb should contain a procedure
      named ImFrame() that will be called repeatedly
      and optionally ImInit() procedure that will be called
      once. If ImFrame() is not found the runner will try
      to call main/first function in the .hrb file in hope
      that it contains widget rendering.

    ; most likely examples/*.prg will run when compiled
      to .hrb, but their main function is skipped,
      maybe an option should be added to use .hrb main
      and skip some more of runner's initialization

  * LICENSE
    * years have passed

  * cimgui-common/hbarrays.cpp
    ! cursor parameter support was missing in hb_igIntsPush()

  * cimgui-docking/cimgui.cpp
  * cimgui-docking/cimgui.hbp
  * cimgui-docking/hbimgui.cpp
  * cimgui/cimgui.cpp
  * cimgui/cimgui.hbp
  * cimgui/hbimgui.cpp
    * added IMGUI_NO_DEMO envvar and define, that disables
      ImGui demo code from building

2024-10-24 12:04 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * cimgui-docking/hbimgui.cpp
  * cimgui/hbimgui.cpp
    * regenerated using updated version of generator.prg

    ! removed non-sense static variable, fix C array setter
      ImGuiStyle( <p> ):Colors[ <n> ] := <value>
      <n> slipped off-by-one in previous commit

2024-10-24 10:27 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * cimgui-docking/hbimgui.cpp
  * cimgui-docking/hbimstru.ch
  * cimgui/hbimgui.cpp
  * cimgui/hbimstru.ch
    * regenerated using updated version of generator.prg

    + setting values that are held in allocated structs is
      now implemented

      example of setting a global window border rounding radius
      ImGuiStyle( igGetStyle() ):popupRounding := 7.00

      Setters are translated using preprocessor rules =>
      ImGuiStyle_Set( igGetStyle(), 11 /* ImGuiStyle_PopupRounding */, 7.00 )

      There should be enough implemented so they will work in exprssions like
      nVar := ImGuiStyle( pStyle ):popupRounding := nVar2 := 7.00

2024-10-22 21:24 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * cimgui-docking/hbimgui.cpp
  * cimgui-docking/hbimstru.ch
  * cimgui/hbimgui.cpp
  * cimgui/hbimstru.ch
    * regenerated using updated version of generator.prg

    ! fixed getter for ImGuiStyle( <p> ):Colors[ n ]
      Colors is C array... 

2024-10-04 09:49 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * cimgui-docking/hbimgui.cpp
  * cimgui-docking/hbimstru.ch
  * cimgui/hbimgui.cpp
  * cimgui/hbimstru.ch
    * regenerated using updated version of generator.prg

    + added getters for ImGuiStyle

  * hbdemo.hbp
    * adapt C references via *.hbc, so hopefully the demo
      can be now built against another imgui branch,
      docking for example

  * sokol/sokol_app.h
    ! win32 DispatchMessage() call changed to DispatchMessageW(),
      it fixes entering national characters to text boxes.
      But not completly, Alt+combinations still rather don't work

2023-04-18 17:44 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * cimgui-docking/hbimenum.ch
  * cimgui-docking/hbimgui.cpp
  * cimgui-docking/hbimstru.ch
  * cimgui/hbimenum.ch
  * cimgui/hbimgui.cpp
  * cimgui/hbimstru.ch
    * regenerated using updated version of generator.prg

    + after changes some functions like:
      igGetStyleColorVec4( <nStyleCol> ) ->  {,,,,}
      now returns array, instead pointer

      though for this one there is also a manual wrapper
      that works on already allocated array
      hb_igGetStyleColorVec4( <aRet>, <nStyleCol> )

    + added getters for ImGuiIO, with support for accessing elements
      in C arrays, for example:
      ImGuiIO( igGetIO() ):KeyAlt -> <lAltPressed>
      ImGuiIO( igGetIO() ):MouseClickedPos[ 1 ] -> <aLeftClickPos>
      ImGuiIO( igGetIO() ):MouseClickedPos[ 2 ] -> <aRightClickPos>

  * examples/loadfont.prg
    * added some trivial usage of ImGuiIO getters

2023-04-17 12:14 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * cimgui-common/hbimca.ch
  * cimgui-common/hbimca.prg
    * changed implementation to use wrapper to C hb_arrayGet()
      function, seems better when treating NIL like uncached

    ! fixed LC_( 1...n, expr ) variant if there are more
      expressions one line

2023-04-14 11:41 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * cimgui-common/hbimca.ch
    ! LC_( expr ) macro should treat NIL like uncached value
      too, if there are branches in the code, checking
      array size is not enough... of course.

  * cimgui/cimgui.hbp
  * cimgui-docking/cimgui.hbp
   * missing from prev commit

2023-04-12 12:37 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * cimgui-common/exstyles.cpp
    ! fix non-docking build after previous commit

  * cimgui/cimgui.hbp
  * cimgui-docking/cimgui.hbp
  + cimgui-common/hbimca.ch
  + cimgui-common/hbimca.prg
    + LC_( expr ) macro added for easy caching time-consuming
      expressions in ImGui loop

  + cimgui-common/hbcombow.prg
    + added hb_igComboText() editable combo box input widget,
      that can be also trivial example of "completion", where
      not all elements are shown

2023-01-24 12:31 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui-common/exstyles.cpp
    + hb_igThemeVSC() - VSCode like theme

    * minor bracket fmt

2023-01-05 00:20 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui-common/hbhlp.c
    % remove redundant checks: _paf() vs hb_arrayGetND()

  * cimgui-common/exstyles.cpp
    + hb_igButtonRounded( <cText> [, <aSize> ] [, <fRadius> ] )
      as the name says, <fRadius> specifies how big the rounded
      corners of a button will be.

  * ChangeLog.txt
    ! fix indentation

  * cimgui-docking/hbimgui.cpp
  * cimgui/hbimgui.cpp
    * always redirect igText() -> igTextUnformatted()
      randomly passing text with %'s is unsafe, could crash application,
      when there is not enough arguments. We can't practically use C varargs.

    ; many other functions like igButton(), etc. have the same problem,
      that we should eventually sanitize/escape %'s because *Unformatted()
      flavour is not there (TODO)

  * cimplot/cimplot.hbp
    + -I../cimgui-common/

  * examples/loadfont.prg
    + just added a rounded button

2022-11-13 12:05 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui-docking/cimgui.hbc
  * cimgui/cimgui.hbc
    + add ../cimgui-common to include paths

  * cimgui/hbimgui.h
  * cimgui/hbfunc.c
    * make the __igAddFont() functionality callable from C++ too, added
      last optional parameter:
      ImFont * hb_igFontAdd( HB_BOOL bMem, const char * szFont, float fSizePx,
                             PHB_ITEM pChars, HB_BOOL bDefRange,
                             HB_BOOL bMergeMode, ImFontConfig * pCfg )

2022-11-13 03:03 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/* -> cimgui-common/exstyles.cpp
                cimgui-common/exstyles.h
                cimgui-common/hbarrays.cpp
                cimgui-common/hbctcalw.prg
                cimgui-common/hbfunc.prg
                cimgui-common/hbfunc_.c
                cimgui-common/hbhlp.c
                cimgui-common/hbhlpinl.c
                cimgui-common/hbimgui.h
                cimgui-common/plots.cpp

  * cimgui-docking/cimgui.hbp
  * cimgui-docking/hbimgui.cpp
  * cimgui/cimgui.hbp
    * relocated files that are not specific to any branch,
       but should work with any to cimgui-common/

2022-11-13 02:17 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * examples/implot/hbmk.hbm
    * check for IMGUI_DOCKING envvar

  * examples/implot/line.prg
    * windows is not closable in igBegin(), pass NIL as 2-nd param

  * cimgui/hbfunc.prg
    * static __cdpRange() changed to hb_igCdpRange()

  * cimgui/hbimgui.h
  * cimgui/hbfunc.c
    * make the __igAddFont() functionality callable from C like this:
      ImFont * hb_igFontAdd( HB_BOOL bMem, const char * szFont, float fSizePx,
                             PHB_ITEM pChars, HB_BOOL bDefRange,
                             HB_BOOL bMergeMode )

  * cimgui/plots.cpp
    * cimgui overloaded names differs between versions, added #if

2022-11-09 03:26 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbimgui.cpp
  * cimgui-docking/hbimgui.cpp
    * function returing strings are now handled in generator

  * examples/images/hbmk.hbm
    * check for IMGUI_DOCKING envvar

2022-10-02 01:28 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbimgui.cpp
    * make p_open parameter NIL-able. Now when functions like
      igBegin( "New window", NIL ) are called, instead of
      igBegin( "New window", @lOpened ), this will make the [x]
      closing button disappear. Previously it was always visible.

  * cimgui-docking/hbimgui.cpp
    * newer cimgui releases changed overloaded function names
      by adding an underscore. For example igComboStr() would be now
      igCombo_Str(). I don't like that. Generator will now prevent
      that on .prg level, so igComboStr() is back.

2022-10-01 10:54 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  + cimgui-docking/hbimgui.h
    + added file that just includes ../cimgui/hbimgui.h,
      most of the time it's not needed, but ImPlot seem
      to look for it right now.

      Maybe our cimgui supplements should go into separate, let's
      say "../cimgui-common" so this folder would be common for
      base imgui and -docking, -custom, -tui flavour builds.

   * cimgui-docking/cimgui.hbp
   * cimgui-docking/hbimgui.cpp
   * cimgui/cimgui.hbp
   * cimplot/cimplot.hbp
   * examples/hbmk.hbm
   * hexeterminal/hexeterminal.hbp
   * hexeterminal/tdemo.hbp
   * meta-rebuild-docking.hbp
   * sokol/sokol.hbp
   * sokol/sokolimg.hbp
     + added possibility to rebuild checked out directory tree
       with subprojects for specific Dear ImGui flavour. This is now
       based on envvars, one of IMGUI_DOCKING, IMGUI_CUSTOM, IMGUI_TUI
       can be declared. If any of it is not declared, the default build
       based on cimgui/* will be done.

2022-06-17 20:46 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * sokol/sokol.hbc
    ! fix Linux builds, typoed libm: lm -> m

    ! on Linux explicitly add pthread to lib list, lack of it
      specified led to very odd runtime behaviour - in my case
      a deadlock - application window was never shown.

      strace -k ./testapp output was something along querying
      libGL X extensions:
      > /usr/lib/x86_64-linux-gnu/libGLX.so.0.0.0(glXQueryExtensionsString+0x12) [0x]
      > testapp(_sapp_linux_run+0x8c0) [0xda510]
      > testapp(HB_FUN_SAPP_RUN_DEFAULT+0xa7) [0xd3747]
      [...]
      > testapp(_start+0x2a) [0x1509a]
      futex(0x557645087e10, FUTEX_WAIT_PRIVATE, 2, NULL

2022-06-14 14:12 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  + cimgui/hbctcalw.prg
    + added initial version of date picker: hb_igDatePicker()

  * examples/loadfont.prg
    + added example use of hb_igDatePicker() here

  * cimgui/cimgui.hbp
  * cimgui-docking/cimgui.hbp
  * examples/hbmk.hbm
    * project files updated, reference hbct.hbc for calendar routines

  * cimgui/hbhlp.c
  + cimgui/hbhlpinl.c
    + moved static inline helper functions to separate file

  * cimgui/hbfunc_.c
    + added hb_igGetStyleColorVec4( <aRet>, <nStyleCol> )
      helper which returns into passed array instead
      of pointer to a struct like
      igGetStyleColorVec4( <nStyleCol> ) -> <p>

2021-12-17 22:15 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui-docking/hbimstru.ch
  * cimgui/hbimstru.ch
  * examples/browse1.prg
    * settle on executing Dear imgui struct "methods"
      using similar syntax that was commited for field
      access

2021-12-16 11:22 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  + sokol/hbimg.c
  + sokol/hbimgwrap.cpp
  + sokol/sokolimg.hbc
  + sokol/sokolimg.hbp
  + sokol/stb/stb_image.c
  + sokol/stb/stb_image.h
  * meta-rebuild-docking.hbp
  * meta-rebuild.hbp
    + added image/texture functionality based on
      sokol and stb_image structures. If you would like
      to use this self-contained functionality, reference
      sokolimg.hbc in your project.

      Texture creation goes like this:
      nHandle := hb_sokol_img2TextureRGBA32( <cImageBuf>,
                                             @<nWidth>,
                                             @<nHeight> )

      Added ig* function variants:
      hb_sokol_igImage( <nHandle>, ... )
      hb_sokol_igImageButton( <nHandle>, ... )
      hb_sokol_igImageButtonEx( <nId>, <nHandle> )

      Destroy a texture you're not using anymore:
      hb_sokol_imgDestroy( <nHandle> )

      Currently these are not garbage-collected.
      GC related thoughts are commented in sokol/hbimg.c

  + examples/images/hello.prg
  + examples/images/hbmk.hbm
  + examples/images/harbour-2016-64x64.png
  + examples/images/harbour-button.png
    + example showing some Harbour logos

2021-12-13 15:51 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * examples/browse1.prg
  * examples/plotfloat.prg
    ! modified or fixed for emscripten/WASM builds

2021-12-13 11:55 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  + cimgui/hbimstru.ch
  * cimgui/hbimgui.cpp
  + cimgui-docking/hbimstru.ch
  * cimgui-docking/hbimgui.cpp
    * generator.prg now knows how to make field getter for a struct,
      evaluating this concept on ImGuiListClipper struct

  * examples/hbmk.hbm
    + some examples will likely use hbmemio.hbc

  * examples/browse1.prg
    + .dbf browsing example, simple but already uses ImGuiListClipper,
      so it strives to FieldGet() only what's visible on the screen

2021-12-08 13:37 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbimgui.cpp
  * cimgui/hbimgui-docking.cpp
    * implement decent igInputText() behaviour for non resizable
      input boxes, so they feel nice by default, even without
      emulating Clipper GET system

  * examples/procdbf.prg
    * don't RTrim() fields coming from the database, they
      now play nicely with default igInputText() widget

  * cimgui/hbhlp.c
    + added a note and compatibility define for Overwrite
      igInputText flag (somewhat misleading in older versions
      of Dear imgui)

2021-12-08 01:10 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbimgui.cpp
  * cimgui/hbimgui-docking.cpp
    ! fix MT race condition with referring to the item length
      returned by hb_parclen() after copying it. It's obvious
      if you actually think about it: hb_parclen() unreferences
      for reading so it should be okay to do it before
      hb_itemGetC() instead. Also fixed in the generator.prg 

2021-12-07 08:57 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbarrays.cpp
  * ChangeLog.txt
    ! correct hb_igIntsPush() c&p typos

  * sokol/hbsokol.c
    + expose sapp_quit(), sapp_request_quit(), sapp_cancel_quit()
      to .prg code

    * handle SAPP_EVENTTYPE_QUIT_REQUESTED event, add ImQuit()
      procedure to your .prg code to get notified about it
      On desktop platform you can call sapp_cancel_quit() from
      the ImQuit() to prevent exiting. For example if
      [x] close button was clicked and you want to display
      some confirmation popup. This can be also used to hide
      ImGui window instead of closing if your application is
      multithreaded, where another window can be Harbour GT too.

   + examples/procdbf.prg
   + examples/test.dbf
     + added multi-threading example of DO WHILE ! EoF() ; DBSkip()
       file processing using codeblock and statics to interact
       with the display

2021-12-06 12:58 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  + meta-rebuild.hbp
  + meta-rebuild-docking.hbp
  * cimgui-docking/cimgui.hbp
  * cimgui/cimgui.hbp
  * cimplot/cimplot.hbp
  * sokol/sokol.hbp
    + updated project files, to be able to build or switch
      to docking/other branch, just by doing either:
      hbmk2 meta-rebuild.hbp
      or
      hbmk2 meta-rebuild-docking.hbp

  * cimplot/hbimplot.cpp
    * handle ImPlotTime struct using non-garbage-collected
      pointer (unsafe!) 

  + examples/implot/wmake.sh
    + emscripten helper build script

2021-12-05 19:03 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimplot/implot.ch
    + added translation rule for ImPlot:: namespace

  + cimplot/implots.cpp
    + added ImPlot graphing wrappers: their variants expecting float
      arrays. Sorry for excessively long lines, enjoy plotting.

      hb_imPlotBarsFloat  ( <cLabelID>, <pFloats>[, <nCount>, <nWidth>, <nShift>, <nOffset> ] )
      hb_imPlotBarsFloat2 ( <cLabelID>, <pXs>, <pYs>[, <nCount>, <nWidth>, <nOffset> ] )
      hb_imPlotBarsHFloat ( <cLabelID>, <pFloats>[, <nCount>, <nWidth>, <nShift>, <nOffset> ] )
      hb_imPlotBarsHFloat2( <cLabelID>, <pXs>, <pYs>[, <nCount>, <nWidth>, <nOffset> ] )

      hb_imPlotDigitalFloat( <cLabelID>, <pXs>, <pYs>[, <nCount>, <nOffset> ] )

      hb_imPlotErrorBarsFloat3( <cLabelID>, <pXs>, <pYs>, <pErrs>[, <nCount>, <nWidth>, <nOffset> ] )
      hb_imPlotErrorBarsFloat4( <cLabelID>, <pXs>, <pYs>, <pNeg>, <pPos>[, <nCount>, <nWidth>, <nOffset> ] )

      hb_imPlotErrorBarsHFloat3( <cLabelID>, <pXs>, <pYs>, <pErrs>[, <nCount>, <nWidth>, <nOffset> ] )
      hb_imPlotErrorBarsHFloat4( <cLabelID>, <pXs>, <pYs>, <pNeg>, <pPos>[, <nCount>, <nWidth>, <nOffset> ] )

      hb_imPlotHLinesFloat( <cLabelID>, <pYs>[, <nCount>, <nOffset> ] )

      hb_imPlotHeatMapFloat( <cLabelID>, <pFloats>[, <nRows>, <nCols>, <nScaleMin>, <nScaleMax>, <cLabelFmt>, <aBoundsMin>, <aBoundsMax> ] )

      hb_imPlotHistogramFloat  ( <cLabelID>, <pFloats>[, <nCount>, <nBins>, <lCumulative>, <lDensity>, <aRange>, <lOutliers>, <nBarScale> ] )
      hb_imPlotHistogram2DFloat( <cLabelID>, <pXs>, <pYs>[, <nCount>, <nXbins>, <nYbins>, <lDensity>, <aRange>, <lOutliers> ] )

      hb_imPlotLineFloat ( <cLabelID>, <pFloats>[, <nCount>, <nXscale>, <nX0>, <nOffset> ] )
      hb_imPlotLineFloat2( <cLabelID>, <pXs>, <pYs>[, <nCount>, <nOffset> ] )

      hb_imPlotPieChartFloat( <cLabelIDs>, <pFloats>[, <nCount>, <nX>, <nY>, <nRadius>, <lNormalize>, <cLabelFmt>, <nAngle0> ] )

      hb_imPlotScatterFloat ( <cLabelID>, <pFloats>[, <nCount>, <nXscale>, <nX0>, <nOffset> ] )
      hb_imPlotScatterFloat2( <cLabelID>, <pXs>, <pYs>[, <nCount>, <nOffset> ] )

      hb_imPlotShadedFloat ( <cLabelID>, <pFloats>[, <nCount>, <nYref>, <nXScale>, <nX0>, <nOffset> ] )
      hb_imPlotShadedFloat2( <clabelID>, <pXs>, <pYs>[, <nCount>, <nYref>, <nOffset> ] )
      hb_imPlotShadedFloat3( <cLabelID>, <pXs>, <pYs1>, <pYs2>[, <nCount>, <nOffset> ] )

      hb_imPlotStairsFloat ( <cLabelID>, <pFloats>[, <nCount>, <nXScale>, <nX0>, <nOffset> ] )
      hb_imPlotStairsFloat2( <cLabelID>, <pXs>, <pYs>[, <nCount>, <nOffset> ] )

      hb_imPlotStemsFloat ( <cLabelID>, <pFloats>[, <nCount>, <nYref>, <nXscale>, <nX0>, <nOffset> ] )
      hb_imPlotStemsFloat2( <cLabelID>, <pXs>, <pYs>[, <nCount>, <nYref>, <nOffset> ] )

      hb_imPlotVLinesFloat( <cLabelID>, <pXs>[, <nCount>, <nOffset> ] )

      hb_imPlotCalculateBinsFloat( <pFloats>[, <nCount>, <nMeth>, <aRange>, <nBinsOut>, <nWidthOut> ] )
      hb_imPlotImMaxArrayFloat( <pFloats>[, nCount>] )
      hb_imPlotImMeanFloat( <pFloats>[, <nCount>] )
      hb_imPlotImMinArrayFloat( <pFloats>[, <nCount>] )
      hb_imPlotImMinMaxArrayFloat( <pFloats>[, <nCount>] )
      hb_imPlotImStdDevFloat( <pFloats>[, <nCount>] )
      hb_imPlotImSumFloat( <pFloats>[, <nCount>] )

  + examples/implot/line.prg
  + examples/implot/hbmk.hbm
    + first line plotted with Harbour + Dear ImGui + ImPlot

2021-12-04 17:57 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/cimgui.hbp
  + cimgui/hbimgui.h
  + cimgui/hbarrays.cpp
    + added garbage collected sets (C arrays) of floats and int
      They are initialized using following functions:
      - hb_igFloats( <aFloats> [, <nTotalSize> ] ) -> <pFloats>
      - hb_igInts( <aInts> [, <nTotalSize> ] ) -> <pInts>

      <nTotalSize> is optional, but may be specified as larger
      than the initializing array - preparing the structure for
      plotting graphs with specific resolution.

    + added functions push new value to the set and remove the
      oldest
      - hb_igFloatsPush( <pFloats>, <nFloat>, <lUseCursor> )
      - hb_igIntsPush( <pInts>, <nInt>, <lUseCursor> )
      If the set is not fully populated <lUseCursor> = .T.
      may be used to start from the beginning of empty space.

  + cimgui/plots.cpp
    + hb_igPlotLinesFloat( <cLabel>, <pFloats>, [<nCount>], [<nOffset>],
                           [<cOverlay>], [<nScaleMin>], [<nScaleMax>],
                           [<aGraphSize>] )
    + hb_igPlotHistogramFloat( <cLabel>, <pFloats>, [<nCount>], [<nOffset>],
                               [<cOverlay>], [<nScaleMin>], [<nScaleMax>],
                               [<aGraphSize>] )

  * cimgui/hbhlp.c
    * return processed item in ImRect, ImVec2, ImVec4
      conversion helpers

  * cimgui/hbimenum.ch
  * cimgui-docking/hbimenum.ch
    + added translation rule for ImGui:: namespace
      so that ImGui::Text() will end up calling igText()
      if someone would like to use C++ like names

  * cimgui-docking/hbimgui.cpp
  * cimgui/hbimgui.cpp
    * regenerated, passing float and int C arrays is now
      supported

  + examples/plotfloat.prg
    + added examples of bulitin Dear ImGui's plotting features

2021-12-03 10:21 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbimgui.cpp
    * regenerated using updated version of generator.prg

    ! always set text_end variable to NULL, text_end argument
      will be skipped from Harbour wrapper function.
      Also fixes igCalcTextSize( @a, "text" ) and maybe others
      too.

  + examples/treetable.prg
    + ported Dear ImGui's demo Tables & Columns -> Tree view sample
      from C to Harbour

2021-12-01 15:12 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui-docking/hbimgui.cpp
    ! fix path to included hbhlp.c that is common
      between branches

  * cimgui-docking/hbimgui.cpp
  * cimgui/hbimgui.cpp
    * regenerated using updated version of generator.prg,
      now values of ImRect, ImVec2, ImVec4 types are
      returned into an array. Or to be precise, it goes
      into first parameter passed as reference, so actually
      the same Harbour item can be reused between rendering
      frames.

      Example usage:
      igGetWindowPos( @a, c )
      igText( "window pos " + HB_ValToExp( a ) ) // -> { 10.00, 10.00 }

    ; depending on POV, all this may be suboptimal, but right
      now just sailing with simplicity in mind.
      Alternatives could be: keep structs in garbage collected
      pointers (and use dedicated funcs to manipulate them),
      extend Harbour type system (preferably even strict).

  * cimgui/hbhlp.c
    + added ImRect, ImVec2, ImVec4 struct to array conversion helpers

2021-11-30 16:22 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbfunc_.c
    + added functions:
      hb_igConfigFlagsAdd( <nFlags> ) -> <nOldFlags>
      - sets additional bits in ImGui's io->ConfigFlags
      hb_igConfigFlagsDel( <nFlags> ) -> <nOldFlags>
      - unsets bits passed in integer parameter
      These may not be in final form.

  * examples/loadfont.prg
    * detect if the sample was linked with dear ImGui docking branch,
      and enable most trivial docking configuration using
      hb_igConfigFlagsAdd( ImGuiConfigFlags_DockingEnable )

  + cimgui-docking/*
    cimgui-docking/imgui/*
    + added Dear ImGui 1.85 docking branch together with cimgui
      and generated Harbour wrappers

  ; cimgui/* is still at 1.80 level

  + cimplot/*
    cimplot/implot
    + added ImPlot 0.12 together with cimplot and wrappers
      (library builds, but not tested yet)

2021-06-14 20:49 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * hexeterminal/src/TerminalEmulator.cpp
    ! fix out-of-bounds GPF during text selection

2021-06-14 11:52 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * hexeterminal/src/Hexe/System/Pipe.h
  * hexeterminal/src/Hexe/System/Process.h
  * hexeterminal/src/Hexe/Terminal/ImGuiTerminal.h
  * hexeterminal/src/Hexe/Terminal/TerminalEmulator.h
  * hexeterminal/src/ImGuiTerminal.cpp
  * hexeterminal/src/TerminalEmulator.cpp
    * completed decoupling of the TerminalEmulator class from
      pty abstractions. New class TerminalEmulatorPty is
      created for this old main purpose which is now
      additional.

      Now the base version can be filled programatically with
      this method:
      ->Feed( const char * buf, size_t buf_len )

      For more complete history of changes see this
      (unbuildable) fork:
      https://github.com/alcz/HexeTerminal

2021-06-14 11:26 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  + hexeterminal/LICENSE
  + hexeterminal/README.md
  + hexeterminal/hexeterminal.hbc
  + hexeterminal/hexeterminal.hbp
  + hexeterminal/src/*
  + hexeterminal/src/Hexe/*
  + hexeterminal/src/Hexe/System/*
  + hexeterminal/src/Hexe/Terminal/*
  + hexeterminal/platform/*
    ; imported https://github.com/FredrikAleksander/HexeTerminal
      which is a "full-blown" ANSI terminal with Dear ImGui display
      Restructured the sources moving platform dependent sources
      into separate folder - not compiling them right now. May
      introduce hexeplatform.hbp with those in the future.

  + hexeterminal/tdemo.hbp
  + hexeterminal/tdemo.prg
  + hexeterminal/tdemo_.cpp
    + basic build-testing demo, that totally dives into C++ space
      to display the terminal

2021-06-13 12:57 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbfunc.prg
    % unused var and declaration

  * examples/loadfont.prg
    * use UTF8EX as Harbour codepage, either this or plain US-ASCII
      should be used. Due to nature of Dear ImGui I don't plan
      to add codepage translations, as they would be executed on
      every repaint. Instead do open your databases/connections
      with translations.

  * cimgui/hbfunc_.c
    * updated function list in the header

  * README.md
    * updated project name

2021-06-09 12:56 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbfunc.prg
    ! fix c&p typo cFile -> cBuffer

  * cimgui/hbfunc_.c
    ! fix incorrect usage of hb_strdupn(), changed to hb_xmemdup(),
      of course font body contains multiple \0's

2021-06-09 12:11 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  + sokol/sokol.hbp
  + sokol/hbsokol.c
    + added default minimally configurable application template, for use
      by examples.
      Parameters specification are:
      sapp_default_run( <cWindowCaption>, [ <nWidth> ], [ <nHeight> ] )

    + hb_sokol_imguiNoDefaultFont( <lSet> ) which should be called with .T.
      parameter before sapp_*_run(), to prevent generating textures for
      Dear ImGui default font.

  +  examples/OpenSans-Regular.ttf
  +  examples/loadfont.prg
  +  examples/hbmk.hbm
  +  examples/wmake.sh
     + added example of loading custom font, which is important functionality,
       as OS font rendering is not used by Dear ImGui.
       Build by calling "hbmk2 loadfont.prg". For emscripten/WebAssembly
       try with helper script "wmake.sh loadfont.prg"

2021-06-08 22:31 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * cdemo.hbp
  * hbdemo.hbp
    * allow building to WebAssembly using abstract wasm platform
      on Harbour 3.4 or Harbour 3.2-alcz: https://github.com/alcz/harbour

  * hbdemo.prg
    + add webassembly workaround "REQUEST" of ImFrame function

    * display OS we are running

  + sigalt.c
    + workaround exporting sigaltstack() - haven't investigated the
      cause, why linking stage need this

  + wmake.sh
  + cimgui/wmake.sh
  + sokol/wmake.sh
    * examples of build scripts for compiling with emscripten SDK

2021-06-08 20:42 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * LICENSE
    * note about harbour additions, many thanks Andre Weissflog for making
      cimgui-sokol-starterkit self contained project and sokol project too

  * demo.c
    * diminish the role of sokol_main() and rename to hb_sokol_main(),
      we will use Harbour startup functions

  * sokol/sokol_app.h
    * note that debug routine will not work on default Win10 installation,
      though it probably does work on average D3D Windows programmer workstation.
      It is OK on default Win7 too

  + ChangeLog.txt
    + added Harbour style change log

  + cimgui/cimgui.hbc
  + cimgui/cimgui.hbp
  + sokol/sokol.hbc
  + sokol/sokol.hbp
  + hbdemo.hbp
  + cdemo.hbp
    + created Harbour style build/project files while looking at CMakeLists.txt

  + cdemo.prg
    + basic demo that builds using hbmk2 and goes through MAIN procedure, but still
      paints widgets from .c code

  + hbdemo.prg
    + test build displaying few widgets from .prg code, picking up some data
      using static variables passed as reference and updating them
  
  + cimgui/exstyles.cpp
  + cimgui/exstyles.h
    + added styling examples

  + cimgui/hbfunc.prg
    + hb_igAddFontFromFileTTF( <cFile>, <nSizePx>, <xConfig>, <xCdpList>, <lDefaultRange>, <lMerge> )
      hb_igAddFontFromMemoryTTF( <cBuffer>, <nSizePx>, <xConfig>, <xCdpList>, <lDefaultRange>, <lMerge> )

  + cimgui/hbfunc_.c
    + hb_igFps( @<nMs>[, @<nFps> ] ) -> frames/s
                                        (or ms/frame when 1 is passed in <nMs>)

    + internally called
      __igAddFont( <lBuf>, <cBufOrFile>, <nSizePx>, <xConfig>, <xCdpList>, <lDefaultRange>, <lMerge> )

  + cimgui/hbhlp.c
    + handling callbacks from Dear imgui code here

  + cimgui/hbimenum.ch
    + enums translated to #define's - output of generator/generator.prg

  + cimgui/hbimgui.cpp
    + wrappers to cimgui exported functions - output of generator/generator.prg
      We may eventually switch to calling .cpp exported methods directly, if there
      are no objections. While still using definitions from cimgui project I guess

  + generator/placeholder.txt
    + Harbour functions generator based on cimgui definitions will be here later
