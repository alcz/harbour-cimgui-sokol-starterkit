/* Encoding: UTF-8 (No BOM)  Notation (in 5th position):
     * Change, ! Fix, % Optimization, + Addition, - Removal, ; Comment
   Entries may not always be in chronological/commit order.
   See license at the end of file. */

2021-12-13 15:51 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * examples/browse1.prg
  * examples/plotfloat.prg
    ! modified or fixed for emscripten/WASM builds

2021-12-13 11:55 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  + cimgui/hbimstru.ch
  * cimgui/hbimgui.cpp
  + cimgui-docking/hbimstru.ch
  * cimgui-docking/hbimgui.cpp
    * generator.prg now knows how to make field getter for a struct,
      evaluating this concept on ImGuiListClipper struct

  * examples/hbmk.hbm
    + some examples will likely use hbmemio.hbc

  * examples/browse1.prg
    + .dbf browsing example, simple but already uses ImGuiListClipper,
      so it strives to FieldGet() only what's visible on the screen

2021-12-08 13:37 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbimgui.cpp
  * cimgui/hbimgui-docking.cpp
    * implement decent igInputText() behaviour for non resizable
      input boxes, so they feel nice by default, even without
      emulating Clipper GET system

  * examples/procdbf.prg
    * don't RTrim() fields coming from the database, they
      now play nicely with default igInputText() widget

  * cimgui/hbhlp.c
    + added a note and compatibility define for Overwrite
      igInputText flag (somewhat misleading in older versions
      of Dear imgui)

2021-12-08 01:10 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbimgui.cpp
  * cimgui/hbimgui-docking.cpp
    ! fix MT race condition with referring to the item length
      returned by hb_parclen() after copying it. It's obvious
      if you actually think about it: hb_parclen() unreferences
      for reading so it should be okay to do it before
      hb_itemGetC() instead. Also fixed in the generator.prg 

2021-12-07 08:57 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbarrays.cpp
  * ChangeLog.txt
    ! correct hb_igIntsPush() c&p typos

  * sokol/hbsokol.c
    + expose sapp_quit(), sapp_request_quit(), sapp_cancel_quit()
      to .prg code

    * handle SAPP_EVENTTYPE_QUIT_REQUESTED event, add ImQuit()
      procedure to your .prg code to get notified about it
      On desktop platform you can call sapp_cancel_quit() from
      the ImQuit() to prevent exiting. For example if
      [x] close button was clicked and you want to display
      some confirmation popup. This can be also used to hide
      ImGui window instead of closing if your application is
      multithreaded, where another window can be Harbour GT too.

   + examples/procdbf.prg
   + examples/test.dbf
     + added multi-threading example of DO WHILE ! EoF() ; DBSkip()
       file processing using codeblock and statics to interact
       with the display

2021-12-06 12:58 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  + meta-rebuild.hbp
  + meta-rebuild-docking.hbp
  * cimgui-docking/cimgui.hbp
  * cimgui/cimgui.hbp
  * cimplot/cimplot.hbp
  * sokol/sokol.hbp
    + updated project files, to be able to build or switch
      to docking/other branch, just by doing either:
      hbmk2 meta-rebuild.hbp
      or
      hbmk2 meta-rebuild-docking.hbp

  * cimplot/hbimplot.cpp
    * handle ImPlotTime struct using non-garbage-collected
      pointer (unsafe!) 

  + examples/implot/wmake.sh
    + emscripten helper build script

2021-12-05 19:03 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimplot/implot.ch
    + added translation rule for ImPlot:: namespace

  + cimplot/implots.cpp
    + added ImPlot graphing wrappers: their variants expecting float
      arrays. Sorry for excessively long lines, enjoy plotting.

      hb_imPlotBarsFloat  ( <cLabelID>, <pFloats>[, <nCount>, <nWidth>, <nShift>, <nOffset> ] )
      hb_imPlotBarsFloat2 ( <cLabelID>, <pXs>, <pYs>[, <nCount>, <nWidth>, <nOffset> ] )
      hb_imPlotBarsHFloat ( <cLabelID>, <pFloats>[, <nCount>, <nWidth>, <nShift>, <nOffset> ] )
      hb_imPlotBarsHFloat2( <cLabelID>, <pXs>, <pYs>[, <nCount>, <nWidth>, <nOffset> ] )

      hb_imPlotDigitalFloat( <cLabelID>, <pXs>, <pYs>[, <nCount>, <nOffset> ] )

      hb_imPlotErrorBarsFloat3( <cLabelID>, <pXs>, <pYs>, <pErrs>[, <nCount>, <nWidth>, <nOffset> ] )
      hb_imPlotErrorBarsFloat4( <cLabelID>, <pXs>, <pYs>, <pNeg>, <pPos>[, <nCount>, <nWidth>, <nOffset> ] )

      hb_imPlotErrorBarsHFloat3( <cLabelID>, <pXs>, <pYs>, <pErrs>[, <nCount>, <nWidth>, <nOffset> ] )
      hb_imPlotErrorBarsHFloat4( <cLabelID>, <pXs>, <pYs>, <pNeg>, <pPos>[, <nCount>, <nWidth>, <nOffset> ] )

      hb_imPlotHLinesFloat( <cLabelID>, <pYs>[, <nCount>, <nOffset> ] )

      hb_imPlotHeatMapFloat( <cLabelID>, <pFloats>[, <nRows>, <nCols>, <nScaleMin>, <nScaleMax>, <cLabelFmt>, <aBoundsMin>, <aBoundsMax> ] )

      hb_imPlotHistogramFloat  ( <cLabelID>, <pFloats>[, <nCount>, <nBins>, <lCumulative>, <lDensity>, <aRange>, <lOutliers>, <nBarScale> ] )
      hb_imPlotHistogram2DFloat( <cLabelID>, <pXs>, <pYs>[, <nCount>, <nXbins>, <nYbins>, <lDensity>, <aRange>, <lOutliers> ] )

      hb_imPlotLineFloat ( <cLabelID>, <pFloats>[, <nCount>, <nXscale>, <nX0>, <nOffset> ] )
      hb_imPlotLineFloat2( <cLabelID>, <pXs>, <pYs>[, <nCount>, <nOffset> ] )

      hb_imPlotPieChartFloat( <cLabelIDs>, <pFloats>[, <nCount>, <nX>, <nY>, <nRadius>, <lNormalize>, <cLabelFmt>, <nAngle0> ] )

      hb_imPlotScatterFloat ( <cLabelID>, <pFloats>[, <nCount>, <nXscale>, <nX0>, <nOffset> ] )
      hb_imPlotScatterFloat2( <cLabelID>, <pXs>, <pYs>[, <nCount>, <nOffset> ] )

      hb_imPlotShadedFloat ( <cLabelID>, <pFloats>[, <nCount>, <nYref>, <nXScale>, <nX0>, <nOffset> ] )
      hb_imPlotShadedFloat2( <clabelID>, <pXs>, <pYs>[, <nCount>, <nYref>, <nOffset> ] )
      hb_imPlotShadedFloat3( <cLabelID>, <pXs>, <pYs1>, <pYs2>[, <nCount>, <nOffset> ] )

      hb_imPlotStairsFloat ( <cLabelID>, <pFloats>[, <nCount>, <nXScale>, <nX0>, <nOffset> ] )
      hb_imPlotStairsFloat2( <cLabelID>, <pXs>, <pYs>[, <nCount>, <nOffset> ] )

      hb_imPlotStemsFloat ( <cLabelID>, <pFloats>[, <nCount>, <nYref>, <nXscale>, <nX0>, <nOffset> ] )
      hb_imPlotStemsFloat2( <cLabelID>, <pXs>, <pYs>[, <nCount>, <nYref>, <nOffset> ] )

      hb_imPlotVLinesFloat( <cLabelID>, <pXs>[, <nCount>, <nOffset> ] )

      hb_imPlotCalculateBinsFloat( <pFloats>[, <nCount>, <nMeth>, <aRange>, <nBinsOut>, <nWidthOut> ] )
      hb_imPlotImMaxArrayFloat( <pFloats>[, nCount>] )
      hb_imPlotImMeanFloat( <pFloats>[, <nCount>] )
      hb_imPlotImMinArrayFloat( <pFloats>[, <nCount>] )
      hb_imPlotImMinMaxArrayFloat( <pFloats>[, <nCount>] )
      hb_imPlotImStdDevFloat( <pFloats>[, <nCount>] )
      hb_imPlotImSumFloat( <pFloats>[, <nCount>] )

  + examples/implot/line.prg
  + examples/implot/hbmk.hbm
    + first line plotted with Harbour + Dear ImGui + ImPlot

2021-12-04 17:57 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/cimgui.hbp
  + cimgui/hbimgui.h
  + cimgui/hbarrays.cpp
    + added garbage collected sets (C arrays) of floats and int
      They are initialized using following functions:
      - hb_igFloats( <aFloats> [, <nTotalSize> ] ) -> <pFloats>
      - hb_igInts( <aInts> [, <nTotalSize> ] ) -> <pInts>

      <nTotalSize> is optional, but may be specified as larger
      than the initializing array - preparing the structure for
      plotting graphs with specific resolution.

    + added functions push new value to the set and remove the
      oldest
      - hb_igFloatsPush( <pFloats>, <nFloat>, <lUseCursor> )
      - hb_igIntsPush( <pInts>, <nInt>, <lUseCursor> )
      If the set is not fully populated <lUseCursor> = .T.
      may be used to start from the beginning of empty space.

  + cimgui/plots.cpp
    + hb_igPlotLinesFloat( <cLabel>, <pFloats>, [<nCount>], [<nOffset>],
                           [<cOverlay>], [<nScaleMin>], [<nScaleMax>],
                           [<aGraphSize>] )
    + hb_igPlotHistogramFloat( <cLabel>, <pFloats>, [<nCount>], [<nOffset>],
                               [<cOverlay>], [<nScaleMin>], [<nScaleMax>],
                               [<aGraphSize>] )

  * cimgui/hbhlp.c
    * return processed item in ImRect, ImVec2, ImVec4
      conversion helpers

  * cimgui/hbimenum.ch
  * cimgui-docking/hbimenum.ch
    + added translation rule for ImGui:: namespace
      so that ImGui::Text() will end up calling igText()
      if someone would like to use C++ like names

  * cimgui-docking/hbimgui.cpp
  * cimgui/hbimgui.cpp
    * regenerated, passing float and int C arrays is now
      supported

  + examples/plotfloat.prg
    + added examples of bulitin Dear ImGui's plotting features

2021-12-03 10:21 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbimgui.cpp
    * regenerated using updated version of generator.prg

    ! always set text_end variable to NULL, text_end argument
      will be skipped from Harbour wrapper function.
      Also fixes igCalcTextSize( @a, "text" ) and maybe others
      too.

  + examples/treetable.prg
    + ported Dear ImGui's demo Tables & Columns -> Tree view sample
      from C to Harbour

2021-12-01 15:12 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui-docking/hbimgui.cpp
    ! fix path to included hbhlp.c that is common
      between branches

  * cimgui-docking/hbimgui.cpp
  * cimgui/hbimgui.cpp
    * regenerated using updated version of generator.prg,
      now values of ImRect, ImVec2, ImVec4 types are
      returned into an array. Or to be precise, it goes
      into first parameter passed as reference, so actually
      the same Harbour item can be reused between rendering
      frames.

      Example usage:
      igGetWindowPos( @a, c )
      igText( "window pos " + HB_ValToExp( a ) ) // -> { 10.00, 10.00 }

    ; depending on POV, all this may be suboptimal, but right
      now just sailing with simplicity in mind.
      Alternatives could be: keep structs in garbage collected
      pointers (and use dedicated funcs to manipulate them),
      extend Harbour type system (preferably even strict).

  * cimgui/hbhlp.c
    + added ImRect, ImVec2, ImVec4 struct to array conversion helpers

2021-11-30 16:22 UTC+0100 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbfunc_.c
    + added functions:
      hb_igConfigFlagsAdd( <nFlags> ) -> <nOldFlags>
      - sets additional bits in ImGui's io->ConfigFlags
      hb_igConfigFlagsDel( <nFlags> ) -> <nOldFlags>
      - unsets bits passed in integer parameter
      These may not be in final form.

  * examples/loadfont.prg
    * detect if the sample was linked with dear ImGui docking branch,
      and enable most trivial docking configuration using
      hb_igConfigFlagsAdd( ImGuiConfigFlags_DockingEnable )

  + cimgui-docking/*
    cimgui-docking/imgui/*
    + added Dear ImGui 1.85 docking branch together with cimgui
      and generated Harbour wrappers

  ; cimgui/* is still at 1.80 level

  + cimplot/*
    cimplot/implot
    + added ImPlot 0.12 together with cimplot and wrappers
      (library builds, but not tested yet)

2021-06-14 20:49 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * hexeterminal/src/TerminalEmulator.cpp
    ! fix out-of-bounds GPF during text selection

2021-06-14 11:52 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * hexeterminal/src/Hexe/System/Pipe.h
  * hexeterminal/src/Hexe/System/Process.h
  * hexeterminal/src/Hexe/Terminal/ImGuiTerminal.h
  * hexeterminal/src/Hexe/Terminal/TerminalEmulator.h
  * hexeterminal/src/ImGuiTerminal.cpp
  * hexeterminal/src/TerminalEmulator.cpp
    * completed decoupling of the TerminalEmulator class from
      pty abstractions. New class TerminalEmulatorPty is
      created for this old main purpose which is now
      additional.

      Now the base version can be filled programatically with
      this method:
      ->Feed( const char * buf, size_t buf_len )

      For more complete history of changes see this
      (unbuildable) fork:
      https://github.com/alcz/HexeTerminal

2021-06-14 11:26 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  + hexeterminal/LICENSE
  + hexeterminal/README.md
  + hexeterminal/hexeterminal.hbc
  + hexeterminal/hexeterminal.hbp
  + hexeterminal/src/*
  + hexeterminal/src/Hexe/*
  + hexeterminal/src/Hexe/System/*
  + hexeterminal/src/Hexe/Terminal/*
  + hexeterminal/platform/*
    ; imported https://github.com/FredrikAleksander/HexeTerminal
      which is a "full-blown" ANSI terminal with Dear ImGui display
      Restructured the sources moving platform dependent sources
      into separate folder - not compiling them right now. May
      introduce hexeplatform.hbp with those in the future.

  + hexeterminal/tdemo.hbp
  + hexeterminal/tdemo.prg
  + hexeterminal/tdemo_.cpp
    + basic build-testing demo, that totally dives into C++ space
      to display the terminal

2021-06-13 12:57 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbfunc.prg
    % unused var and declaration

  * examples/loadfont.prg
    * use UTF8EX as Harbour codepage, either this or plain US-ASCII
      should be used. Due to nature of Dear ImGui I don't plan
      to add codepage translations, as they would be executed on
      every repaint. Instead do open your databases/connections
      with translations.

  * cimgui/hbfunc_.c
    * updated function list in the header

  * README.md
    * updated project name

2021-06-09 12:56 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * cimgui/hbfunc.prg
    ! fix c&p typo cFile -> cBuffer

  * cimgui/hbfunc_.c
    ! fix incorrect usage of hb_strdupn(), changed to hb_xmemdup(),
      of course font body contains multiple \0's

2021-06-09 12:11 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  + sokol/sokol.hbp
  + sokol/hbsokol.c
    + added default minimally configurable application template, for use
      by examples.
      Parameters specification are:
      sapp_default_run( <cWindowCaption>, [ <nWidth> ], [ <nHeight> ] )

    + hb_sokol_imguiNoDefaultFont( <lSet> ) which should be called with .T.
      parameter before sapp_*_run(), to prevent generating textures for
      Dear ImGui default font.

  +  examples/OpenSans-Regular.ttf
  +  examples/loadfont.prg
  +  examples/hbmk.hbm
  +  examples/wmake.sh
     + added example of loading custom font, which is important functionality,
       as OS font rendering is not used by Dear ImGui.
       Build by calling "hbmk2 loadfont.prg". For emscripten/WebAssembly
       try with helper script "wmake.sh loadfont.prg"

2021-06-08 22:31 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * cdemo.hbp
  * hbdemo.hbp
    * allow building to WebAssembly using abstract wasm platform
      on Harbour 3.4 or Harbour 3.2-alcz: https://github.com/alcz/harbour

  * hbdemo.prg
    + add webassembly workaround "REQUEST" of ImFrame function

    * display OS we are running

  + sigalt.c
    + workaround exporting sigaltstack() - haven't investigated the
      cause, why linking stage need this

  + wmake.sh
  + cimgui/wmake.sh
  + sokol/wmake.sh
    * examples of build scripts for compiling with emscripten SDK

2021-06-08 20:42 UTC+0200 Aleksander Czajczynski (hb fki.pl)
  * LICENSE
    * note about harbour additions, many thanks Andre Weissflog for making
      cimgui-sokol-starterkit self contained project and sokol project too

  * demo.c
    * diminish the role of sokol_main() and rename to hb_sokol_main(),
      we will use Harbour startup functions

  * sokol/sokol_app.h
    * note that debug routine will not work on default Win10 installation,
      though it probably does work on average D3D Windows programmer workstation.
      It is OK on default Win7 too

  + ChangeLog.txt
    + added Harbour style change log

  + cimgui/cimgui.hbc
  + cimgui/cimgui.hbp
  + sokol/sokol.hbc
  + sokol/sokol.hbp
  + hbdemo.hbp
  + cdemo.hbp
    + created Harbour style build/project files while looking at CMakeLists.txt

  + cdemo.prg
    + basic demo that builds using hbmk2 and goes through MAIN procedure, but still
      paints widgets from .c code

  + hbdemo.prg
    + test build displaying few widgets from .prg code, picking up some data
      using static variables passed as reference and updating them
  
  + cimgui/exstyles.cpp
  + cimgui/exstyles.h
    + added styling examples

  + cimgui/hbfunc.prg
    + hb_igAddFontFromFileTTF( <cFile>, <nSizePx>, <xConfig>, <xCdpList>, <lDefaultRange>, <lMerge> )
      hb_igAddFontFromMemoryTTF( <cBuffer>, <nSizePx>, <xConfig>, <xCdpList>, <lDefaultRange>, <lMerge> )

  + cimgui/hbfunc_.c
    + hb_igFps( @<nMs>[, @<nFps> ] ) -> frames/s
                                        (or ms/frame when 1 is passed in <nMs>)

    + internally called
      __igAddFont( <lBuf>, <cBufOrFile>, <nSizePx>, <xConfig>, <xCdpList>, <lDefaultRange>, <lMerge> )

  + cimgui/hbhlp.c
    + handling callbacks from Dear imgui code here

  + cimgui/hbimenum.ch
    + enums translated to #define's - output of generator/generator.prg

  + cimgui/hbimgui.cpp
    + wrappers to cimgui exported functions - output of generator/generator.prg
      We may eventually switch to calling .cpp exported methods directly, if there
      are no objections. While still using definitions from cimgui project I guess

  + generator/placeholder.txt
    + Harbour functions generator based on cimgui definitions will be here later
