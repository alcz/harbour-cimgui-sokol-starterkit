/* This file is automatically generated by generator.prg originated from
   https://github.com/alcz/harbour-cimgui-sokol-starterkit
   based on output/definitions.json from cimgui https://github.com/cimgui/cimgui which is
   based on imgui.h file version "1.86" from Dear ImGui https://github.com/ocornut/imgui */

#include "hbapi.h"
#include "hbapiitm.h"
#include "hbstack.h"
#include "./imgui/imgui.h"
#include "./imgui/imgui_internal.h"
#include "cimgui.h"

static void s_ImGuiContext_setPlatformLocaleDecimalPoint( ImGuiContext * p )
{
   p->PlatformLocaleDecimalPoint = hb_parc( 3 )[0];
}

static void s_ImGuiContext_getInitialized( ImGuiContext * p )
{
   bool ret = p->Initialized;
   hb_retl( ret );
}

static void s_ImGuiContext_getFontAtlasOwnedByContext( ImGuiContext * p )
{
   bool ret = p->FontAtlasOwnedByContext;
   hb_retl( ret );
}

static void s_ImGuiContext_getIO( ImGuiContext * p )
{
   ImGuiIO ret = p->IO;
}

static void s_ImGuiContext_getPlatformIO( ImGuiContext * p )
{
   ImGuiPlatformIO ret = p->PlatformIO;
}

static void s_ImGuiContext_getStyle( ImGuiContext * p )
{
   ImGuiStyle ret = p->Style;
}

static void s_ImGuiContext_getConfigFlagsCurrFrame( ImGuiContext * p )
{
   ImGuiConfigFlags ret = p->ConfigFlagsCurrFrame;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getConfigFlagsLastFrame( ImGuiContext * p )
{
   ImGuiConfigFlags ret = p->ConfigFlagsLastFrame;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getFont( ImGuiContext * p )
{
   ImFont* ret = p->Font;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getFontSize( ImGuiContext * p )
{
   float ret = p->FontSize;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getFontBaseSize( ImGuiContext * p )
{
   float ret = p->FontBaseSize;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getDrawListSharedData( ImGuiContext * p )
{
   ImDrawListSharedData ret = p->DrawListSharedData;
}

static void s_ImGuiContext_getTime( ImGuiContext * p )
{
   double ret = p->Time;
   hb_retnd( ret );
}

static void s_ImGuiContext_getFrameCount( ImGuiContext * p )
{
   int ret = p->FrameCount;
   hb_retni( ret );
}

static void s_ImGuiContext_getFrameCountEnded( ImGuiContext * p )
{
   int ret = p->FrameCountEnded;
   hb_retni( ret );
}

static void s_ImGuiContext_getFrameCountPlatformEnded( ImGuiContext * p )
{
   int ret = p->FrameCountPlatformEnded;
   hb_retni( ret );
}

static void s_ImGuiContext_getFrameCountRendered( ImGuiContext * p )
{
   int ret = p->FrameCountRendered;
   hb_retni( ret );
}

static void s_ImGuiContext_getWithinFrameScope( ImGuiContext * p )
{
   bool ret = p->WithinFrameScope;
   hb_retl( ret );
}

static void s_ImGuiContext_getWithinFrameScopeWithImplicitWindow( ImGuiContext * p )
{
   bool ret = p->WithinFrameScopeWithImplicitWindow;
   hb_retl( ret );
}

static void s_ImGuiContext_getWithinEndChild( ImGuiContext * p )
{
   bool ret = p->WithinEndChild;
   hb_retl( ret );
}

static void s_ImGuiContext_getGcCompactAll( ImGuiContext * p )
{
   bool ret = p->GcCompactAll;
   hb_retl( ret );
}

static void s_ImGuiContext_getTestEngineHookItems( ImGuiContext * p )
{
   bool ret = p->TestEngineHookItems;
   hb_retl( ret );
}

static void s_ImGuiContext_getTestEngine( ImGuiContext * p )
{
   void* ret = p->TestEngine;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getWindows( ImGuiContext * p )
{
   // ImVector_ImGuiWindowPtr ret = p->Windows;
}

static void s_ImGuiContext_getWindowsFocusOrder( ImGuiContext * p )
{
   // ImVector_ImGuiWindowPtr ret = p->WindowsFocusOrder;
}

static void s_ImGuiContext_getWindowsTempSortBuffer( ImGuiContext * p )
{
   // ImVector_ImGuiWindowPtr ret = p->WindowsTempSortBuffer;
}

static void s_ImGuiContext_getCurrentWindowStack( ImGuiContext * p )
{
   // ImVector_ImGuiWindowStackData ret = p->CurrentWindowStack;
}

static void s_ImGuiContext_getWindowsById( ImGuiContext * p )
{
   ImGuiStorage ret = p->WindowsById;
}

static void s_ImGuiContext_getWindowsActiveCount( ImGuiContext * p )
{
   int ret = p->WindowsActiveCount;
   hb_retni( ret );
}

static void s_ImGuiContext_getWindowsHoverPadding( ImGuiContext * p )
{
   ImVec2 ret = p->WindowsHoverPadding;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiContext_getCurrentWindow( ImGuiContext * p )
{
   ImGuiWindow* ret = p->CurrentWindow;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getHoveredWindow( ImGuiContext * p )
{
   ImGuiWindow* ret = p->HoveredWindow;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getHoveredWindowUnderMovingWindow( ImGuiContext * p )
{
   ImGuiWindow* ret = p->HoveredWindowUnderMovingWindow;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getHoveredDockNode( ImGuiContext * p )
{
   ImGuiDockNode* ret = p->HoveredDockNode;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getMovingWindow( ImGuiContext * p )
{
   ImGuiWindow* ret = p->MovingWindow;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getWheelingWindow( ImGuiContext * p )
{
   ImGuiWindow* ret = p->WheelingWindow;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getWheelingWindowRefMousePos( ImGuiContext * p )
{
   ImVec2 ret = p->WheelingWindowRefMousePos;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiContext_getWheelingWindowTimer( ImGuiContext * p )
{
   float ret = p->WheelingWindowTimer;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getDebugHookIdInfo( ImGuiContext * p )
{
   ImGuiID ret = p->DebugHookIdInfo;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getHoveredId( ImGuiContext * p )
{
   ImGuiID ret = p->HoveredId;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getHoveredIdPreviousFrame( ImGuiContext * p )
{
   ImGuiID ret = p->HoveredIdPreviousFrame;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getHoveredIdAllowOverlap( ImGuiContext * p )
{
   bool ret = p->HoveredIdAllowOverlap;
   hb_retl( ret );
}

static void s_ImGuiContext_getHoveredIdUsingMouseWheel( ImGuiContext * p )
{
   bool ret = p->HoveredIdUsingMouseWheel;
   hb_retl( ret );
}

static void s_ImGuiContext_getHoveredIdPreviousFrameUsingMouseWheel( ImGuiContext * p )
{
   bool ret = p->HoveredIdPreviousFrameUsingMouseWheel;
   hb_retl( ret );
}

static void s_ImGuiContext_getHoveredIdDisabled( ImGuiContext * p )
{
   bool ret = p->HoveredIdDisabled;
   hb_retl( ret );
}

static void s_ImGuiContext_getHoveredIdTimer( ImGuiContext * p )
{
   float ret = p->HoveredIdTimer;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getHoveredIdNotActiveTimer( ImGuiContext * p )
{
   float ret = p->HoveredIdNotActiveTimer;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getActiveId( ImGuiContext * p )
{
   ImGuiID ret = p->ActiveId;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getActiveIdIsAlive( ImGuiContext * p )
{
   ImGuiID ret = p->ActiveIdIsAlive;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getActiveIdTimer( ImGuiContext * p )
{
   float ret = p->ActiveIdTimer;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getActiveIdIsJustActivated( ImGuiContext * p )
{
   bool ret = p->ActiveIdIsJustActivated;
   hb_retl( ret );
}

static void s_ImGuiContext_getActiveIdAllowOverlap( ImGuiContext * p )
{
   bool ret = p->ActiveIdAllowOverlap;
   hb_retl( ret );
}

static void s_ImGuiContext_getActiveIdNoClearOnFocusLoss( ImGuiContext * p )
{
   bool ret = p->ActiveIdNoClearOnFocusLoss;
   hb_retl( ret );
}

static void s_ImGuiContext_getActiveIdHasBeenPressedBefore( ImGuiContext * p )
{
   bool ret = p->ActiveIdHasBeenPressedBefore;
   hb_retl( ret );
}

static void s_ImGuiContext_getActiveIdHasBeenEditedBefore( ImGuiContext * p )
{
   bool ret = p->ActiveIdHasBeenEditedBefore;
   hb_retl( ret );
}

static void s_ImGuiContext_getActiveIdHasBeenEditedThisFrame( ImGuiContext * p )
{
   bool ret = p->ActiveIdHasBeenEditedThisFrame;
   hb_retl( ret );
}

static void s_ImGuiContext_getActiveIdUsingMouseWheel( ImGuiContext * p )
{
   bool ret = p->ActiveIdUsingMouseWheel;
   hb_retl( ret );
}

static void s_ImGuiContext_getActiveIdUsingNavDirMask( ImGuiContext * p )
{
   ImU32 ret = p->ActiveIdUsingNavDirMask;
   hb_retnl( ( HB_LONG ) ret );
}

static void s_ImGuiContext_getActiveIdUsingNavInputMask( ImGuiContext * p )
{
   ImU32 ret = p->ActiveIdUsingNavInputMask;
   hb_retnl( ( HB_LONG ) ret );
}

static void s_ImGuiContext_getActiveIdUsingKeyInputMask( ImGuiContext * p )
{
   ImU64 ret = p->ActiveIdUsingKeyInputMask;
}

static void s_ImGuiContext_getActiveIdClickOffset( ImGuiContext * p )
{
   ImVec2 ret = p->ActiveIdClickOffset;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiContext_getActiveIdWindow( ImGuiContext * p )
{
   ImGuiWindow* ret = p->ActiveIdWindow;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getActiveIdSource( ImGuiContext * p )
{
   ImGuiInputSource ret = p->ActiveIdSource;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getActiveIdMouseButton( ImGuiContext * p )
{
   int ret = p->ActiveIdMouseButton;
   hb_retni( ret );
}

static void s_ImGuiContext_getActiveIdPreviousFrame( ImGuiContext * p )
{
   ImGuiID ret = p->ActiveIdPreviousFrame;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getActiveIdPreviousFrameIsAlive( ImGuiContext * p )
{
   bool ret = p->ActiveIdPreviousFrameIsAlive;
   hb_retl( ret );
}

static void s_ImGuiContext_getActiveIdPreviousFrameHasBeenEditedBefore( ImGuiContext * p )
{
   bool ret = p->ActiveIdPreviousFrameHasBeenEditedBefore;
   hb_retl( ret );
}

static void s_ImGuiContext_getActiveIdPreviousFrameWindow( ImGuiContext * p )
{
   ImGuiWindow* ret = p->ActiveIdPreviousFrameWindow;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getLastActiveId( ImGuiContext * p )
{
   ImGuiID ret = p->LastActiveId;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getLastActiveIdTimer( ImGuiContext * p )
{
   float ret = p->LastActiveIdTimer;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getCurrentItemFlags( ImGuiContext * p )
{
   ImGuiItemFlags ret = p->CurrentItemFlags;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNextItemData( ImGuiContext * p )
{
//   ImGuiNextItemData ret = p->NextItemData;
}

static void s_ImGuiContext_getLastItemData( ImGuiContext * p )
{
//   ImGuiLastItemData ret = p->LastItemData;
}

static void s_ImGuiContext_getNextWindowData( ImGuiContext * p )
{
//   ImGuiNextWindowData ret = p->NextWindowData;
}

static void s_ImGuiContext_getColorStack( ImGuiContext * p )
{
   // ImVector_ImGuiColorMod ret = p->ColorStack;
}

static void s_ImGuiContext_getStyleVarStack( ImGuiContext * p )
{
   // ImVector_ImGuiStyleMod ret = p->StyleVarStack;
}

static void s_ImGuiContext_getFontStack( ImGuiContext * p )
{
   // ImVector_ImFontPtr ret = p->FontStack;
}

static void s_ImGuiContext_getFocusScopeStack( ImGuiContext * p )
{
   // ImVector_ImGuiID ret = p->FocusScopeStack;
}

static void s_ImGuiContext_getItemFlagsStack( ImGuiContext * p )
{
   // ImVector_ImGuiItemFlags ret = p->ItemFlagsStack;
}

static void s_ImGuiContext_getGroupStack( ImGuiContext * p )
{
   // ImVector_ImGuiGroupData ret = p->GroupStack;
}

static void s_ImGuiContext_getOpenPopupStack( ImGuiContext * p )
{
   // ImVector_ImGuiPopupData ret = p->OpenPopupStack;
}

static void s_ImGuiContext_getBeginPopupStack( ImGuiContext * p )
{
   // ImVector_ImGuiPopupData ret = p->BeginPopupStack;
}

static void s_ImGuiContext_getBeginMenuCount( ImGuiContext * p )
{
   int ret = p->BeginMenuCount;
   hb_retni( ret );
}

static void s_ImGuiContext_getViewports( ImGuiContext * p )
{
   // ImVector_ImGuiViewportPPtr ret = p->Viewports;
}

static void s_ImGuiContext_getCurrentDpiScale( ImGuiContext * p )
{
   float ret = p->CurrentDpiScale;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getCurrentViewport( ImGuiContext * p )
{
   ImGuiViewportP* ret = p->CurrentViewport;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getMouseViewport( ImGuiContext * p )
{
   ImGuiViewportP* ret = p->MouseViewport;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getMouseLastHoveredViewport( ImGuiContext * p )
{
   ImGuiViewportP* ret = p->MouseLastHoveredViewport;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getPlatformLastFocusedViewportId( ImGuiContext * p )
{
   ImGuiID ret = p->PlatformLastFocusedViewportId;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getFallbackMonitor( ImGuiContext * p )
{
 //  ImGuiPlatformMonitor ret = p->FallbackMonitor;
}

static void s_ImGuiContext_getViewportFrontMostStampCount( ImGuiContext * p )
{
   int ret = p->ViewportFrontMostStampCount;
   hb_retni( ret );
}

static void s_ImGuiContext_getNavWindow( ImGuiContext * p )
{
   ImGuiWindow* ret = p->NavWindow;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getNavId( ImGuiContext * p )
{
   ImGuiID ret = p->NavId;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavFocusScopeId( ImGuiContext * p )
{
   ImGuiID ret = p->NavFocusScopeId;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavActivateId( ImGuiContext * p )
{
   ImGuiID ret = p->NavActivateId;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavActivateDownId( ImGuiContext * p )
{
   ImGuiID ret = p->NavActivateDownId;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavActivatePressedId( ImGuiContext * p )
{
   ImGuiID ret = p->NavActivatePressedId;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavActivateInputId( ImGuiContext * p )
{
   ImGuiID ret = p->NavActivateInputId;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavActivateFlags( ImGuiContext * p )
{
   ImGuiActivateFlags ret = p->NavActivateFlags;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavJustMovedToId( ImGuiContext * p )
{
   ImGuiID ret = p->NavJustMovedToId;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavJustMovedToFocusScopeId( ImGuiContext * p )
{
   ImGuiID ret = p->NavJustMovedToFocusScopeId;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavJustMovedToKeyMods( ImGuiContext * p )
{
   ImGuiKeyModFlags ret = p->NavJustMovedToKeyMods;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavNextActivateId( ImGuiContext * p )
{
   ImGuiID ret = p->NavNextActivateId;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavNextActivateFlags( ImGuiContext * p )
{
   ImGuiActivateFlags ret = p->NavNextActivateFlags;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavInputSource( ImGuiContext * p )
{
   ImGuiInputSource ret = p->NavInputSource;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavLayer( ImGuiContext * p )
{
   ImGuiNavLayer ret = p->NavLayer;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavIdIsAlive( ImGuiContext * p )
{
   bool ret = p->NavIdIsAlive;
   hb_retl( ret );
}

static void s_ImGuiContext_getNavMousePosDirty( ImGuiContext * p )
{
   bool ret = p->NavMousePosDirty;
   hb_retl( ret );
}

static void s_ImGuiContext_getNavDisableHighlight( ImGuiContext * p )
{
   bool ret = p->NavDisableHighlight;
   hb_retl( ret );
}

static void s_ImGuiContext_getNavDisableMouseHover( ImGuiContext * p )
{
   bool ret = p->NavDisableMouseHover;
   hb_retl( ret );
}

static void s_ImGuiContext_getNavAnyRequest( ImGuiContext * p )
{
   bool ret = p->NavAnyRequest;
   hb_retl( ret );
}

static void s_ImGuiContext_getNavInitRequest( ImGuiContext * p )
{
   bool ret = p->NavInitRequest;
   hb_retl( ret );
}

static void s_ImGuiContext_getNavInitRequestFromMove( ImGuiContext * p )
{
   bool ret = p->NavInitRequestFromMove;
   hb_retl( ret );
}

static void s_ImGuiContext_getNavInitResultId( ImGuiContext * p )
{
   ImGuiID ret = p->NavInitResultId;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavInitResultRectRel( ImGuiContext * p )
{
   ImRect ret = p->NavInitResultRectRel;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 4 );
   hb_arraySetND( pret, 1, ( double ) ret.Min.x );
   hb_arraySetND( pret, 2, ( double ) ret.Min.y );
   hb_arraySetND( pret, 3, ( double ) ret.Max.x );
   hb_arraySetND( pret, 4, ( double ) ret.Max.y );
}

static void s_ImGuiContext_getNavMoveSubmitted( ImGuiContext * p )
{
   bool ret = p->NavMoveSubmitted;
   hb_retl( ret );
}

static void s_ImGuiContext_getNavMoveScoringItems( ImGuiContext * p )
{
   bool ret = p->NavMoveScoringItems;
   hb_retl( ret );
}

static void s_ImGuiContext_getNavMoveForwardToNextFrame( ImGuiContext * p )
{
   bool ret = p->NavMoveForwardToNextFrame;
   hb_retl( ret );
}

static void s_ImGuiContext_getNavMoveFlags( ImGuiContext * p )
{
   ImGuiNavMoveFlags ret = p->NavMoveFlags;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavMoveScrollFlags( ImGuiContext * p )
{
   ImGuiScrollFlags ret = p->NavMoveScrollFlags;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavMoveKeyMods( ImGuiContext * p )
{
   ImGuiKeyModFlags ret = p->NavMoveKeyMods;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavMoveDir( ImGuiContext * p )
{
   ImGuiDir ret = p->NavMoveDir;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavMoveDirForDebug( ImGuiContext * p )
{
   ImGuiDir ret = p->NavMoveDirForDebug;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavMoveClipDir( ImGuiContext * p )
{
   ImGuiDir ret = p->NavMoveClipDir;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getNavScoringRect( ImGuiContext * p )
{
   ImRect ret = p->NavScoringRect;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 4 );
   hb_arraySetND( pret, 1, ( double ) ret.Min.x );
   hb_arraySetND( pret, 2, ( double ) ret.Min.y );
   hb_arraySetND( pret, 3, ( double ) ret.Max.x );
   hb_arraySetND( pret, 4, ( double ) ret.Max.y );
}

static void s_ImGuiContext_getNavScoringNoClipRect( ImGuiContext * p )
{
   ImRect ret = p->NavScoringNoClipRect;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 4 );
   hb_arraySetND( pret, 1, ( double ) ret.Min.x );
   hb_arraySetND( pret, 2, ( double ) ret.Min.y );
   hb_arraySetND( pret, 3, ( double ) ret.Max.x );
   hb_arraySetND( pret, 4, ( double ) ret.Max.y );
}

static void s_ImGuiContext_getNavScoringDebugCount( ImGuiContext * p )
{
   int ret = p->NavScoringDebugCount;
   hb_retni( ret );
}

static void s_ImGuiContext_getNavTabbingDir( ImGuiContext * p )
{
   int ret = p->NavTabbingDir;
   hb_retni( ret );
}

static void s_ImGuiContext_getNavTabbingCounter( ImGuiContext * p )
{
   int ret = p->NavTabbingCounter;
   hb_retni( ret );
}

static void s_ImGuiContext_getNavMoveResultLocal( ImGuiContext * p )
{
 //  ImGuiNavItemData ret = p->NavMoveResultLocal;
}

static void s_ImGuiContext_getNavMoveResultLocalVisible( ImGuiContext * p )
{
 //  ImGuiNavItemData ret = p->NavMoveResultLocalVisible;
}

static void s_ImGuiContext_getNavMoveResultOther( ImGuiContext * p )
{
 //  ImGuiNavItemData ret = p->NavMoveResultOther;
}

static void s_ImGuiContext_getNavTabbingResultFirst( ImGuiContext * p )
{
 //  ImGuiNavItemData ret = p->NavTabbingResultFirst;
}

static void s_ImGuiContext_getNavWindowingTarget( ImGuiContext * p )
{
   ImGuiWindow* ret = p->NavWindowingTarget;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getNavWindowingTargetAnim( ImGuiContext * p )
{
   ImGuiWindow* ret = p->NavWindowingTargetAnim;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getNavWindowingListWindow( ImGuiContext * p )
{
   ImGuiWindow* ret = p->NavWindowingListWindow;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getNavWindowingTimer( ImGuiContext * p )
{
   float ret = p->NavWindowingTimer;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getNavWindowingHighlightAlpha( ImGuiContext * p )
{
   float ret = p->NavWindowingHighlightAlpha;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getNavWindowingToggleLayer( ImGuiContext * p )
{
   bool ret = p->NavWindowingToggleLayer;
   hb_retl( ret );
}

static void s_ImGuiContext_getDimBgRatio( ImGuiContext * p )
{
   float ret = p->DimBgRatio;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getMouseCursor( ImGuiContext * p )
{
   ImGuiMouseCursor ret = p->MouseCursor;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getDragDropActive( ImGuiContext * p )
{
   bool ret = p->DragDropActive;
   hb_retl( ret );
}

static void s_ImGuiContext_getDragDropWithinSource( ImGuiContext * p )
{
   bool ret = p->DragDropWithinSource;
   hb_retl( ret );
}

static void s_ImGuiContext_getDragDropWithinTarget( ImGuiContext * p )
{
   bool ret = p->DragDropWithinTarget;
   hb_retl( ret );
}

static void s_ImGuiContext_getDragDropSourceFlags( ImGuiContext * p )
{
   ImGuiDragDropFlags ret = p->DragDropSourceFlags;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getDragDropSourceFrameCount( ImGuiContext * p )
{
   int ret = p->DragDropSourceFrameCount;
   hb_retni( ret );
}

static void s_ImGuiContext_getDragDropMouseButton( ImGuiContext * p )
{
   int ret = p->DragDropMouseButton;
   hb_retni( ret );
}

static void s_ImGuiContext_getDragDropPayload( ImGuiContext * p )
{
   ImGuiPayload ret = p->DragDropPayload;
}

static void s_ImGuiContext_getDragDropTargetRect( ImGuiContext * p )
{
   ImRect ret = p->DragDropTargetRect;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 4 );
   hb_arraySetND( pret, 1, ( double ) ret.Min.x );
   hb_arraySetND( pret, 2, ( double ) ret.Min.y );
   hb_arraySetND( pret, 3, ( double ) ret.Max.x );
   hb_arraySetND( pret, 4, ( double ) ret.Max.y );
}

static void s_ImGuiContext_getDragDropTargetId( ImGuiContext * p )
{
   ImGuiID ret = p->DragDropTargetId;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getDragDropAcceptFlags( ImGuiContext * p )
{
   ImGuiDragDropFlags ret = p->DragDropAcceptFlags;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getDragDropAcceptIdCurrRectSurface( ImGuiContext * p )
{
   float ret = p->DragDropAcceptIdCurrRectSurface;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getDragDropAcceptIdCurr( ImGuiContext * p )
{
   ImGuiID ret = p->DragDropAcceptIdCurr;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getDragDropAcceptIdPrev( ImGuiContext * p )
{
   ImGuiID ret = p->DragDropAcceptIdPrev;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getDragDropAcceptFrameCount( ImGuiContext * p )
{
   int ret = p->DragDropAcceptFrameCount;
   hb_retni( ret );
}

static void s_ImGuiContext_getDragDropHoldJustPressedId( ImGuiContext * p )
{
   ImGuiID ret = p->DragDropHoldJustPressedId;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getDragDropPayloadBufHeap( ImGuiContext * p )
{
   // ImVector_unsigned_char ret = p->DragDropPayloadBufHeap;
}

static void s_ImGuiContext_getDragDropPayloadBufLocal( ImGuiContext * p )
{
   unsigned char ret;
   HB_SIZE pos = hb_parns( 3 );
   if( pos == 0 || pos > 16 )
      return;
   ret = p->DragDropPayloadBufLocal[ pos - 1 ];
}

static void s_ImGuiContext_getClipperTempDataStacked( ImGuiContext * p )
{
   int ret = p->ClipperTempDataStacked;
   hb_retni( ret );
}

static void s_ImGuiContext_getClipperTempData( ImGuiContext * p )
{
   // ImVector_ImGuiListClipperData ret = p->ClipperTempData;
}

static void s_ImGuiContext_getCurrentTable( ImGuiContext * p )
{
   ImGuiTable* ret = p->CurrentTable;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getTablesTempDataStacked( ImGuiContext * p )
{
   int ret = p->TablesTempDataStacked;
   hb_retni( ret );
}

static void s_ImGuiContext_getTablesTempData( ImGuiContext * p )
{
   // ImVector_ImGuiTableTempData ret = p->TablesTempData;
}

static void s_ImGuiContext_getTables( ImGuiContext * p )
{
   ImPool_ImGuiTable ret = p->Tables;
}

static void s_ImGuiContext_getTablesLastTimeActive( ImGuiContext * p )
{
   // ImVector_float ret = p->TablesLastTimeActive;
}

static void s_ImGuiContext_getDrawChannelsTempMergeBuffer( ImGuiContext * p )
{
   // ImVector_ImDrawChannel ret = p->DrawChannelsTempMergeBuffer;
}

static void s_ImGuiContext_getCurrentTabBar( ImGuiContext * p )
{
   ImGuiTabBar* ret = p->CurrentTabBar;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getTabBars( ImGuiContext * p )
{
 //  ImPool_ImGuiTabBar ret = p->TabBars;
}

static void s_ImGuiContext_getCurrentTabBarStack( ImGuiContext * p )
{
   // ImVector_ImGuiPtrOrIndex ret = p->CurrentTabBarStack;
}

static void s_ImGuiContext_getShrinkWidthBuffer( ImGuiContext * p )
{
   // ImVector_ImGuiShrinkWidthItem ret = p->ShrinkWidthBuffer;
}

static void s_ImGuiContext_getMouseLastValidPos( ImGuiContext * p )
{
   ImVec2 ret = p->MouseLastValidPos;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiContext_getInputTextState( ImGuiContext * p )
{
   ImGuiInputTextState ret = p->InputTextState;
}

static void s_ImGuiContext_getInputTextPasswordFont( ImGuiContext * p )
{
   ImFont ret = p->InputTextPasswordFont;
}

static void s_ImGuiContext_getTempInputId( ImGuiContext * p )
{
   ImGuiID ret = p->TempInputId;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getColorEditOptions( ImGuiContext * p )
{
   ImGuiColorEditFlags ret = p->ColorEditOptions;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getColorEditLastHue( ImGuiContext * p )
{
   float ret = p->ColorEditLastHue;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getColorEditLastSat( ImGuiContext * p )
{
   float ret = p->ColorEditLastSat;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getColorEditLastColor( ImGuiContext * p )
{
   ImU32 ret = p->ColorEditLastColor;
   hb_retnl( ( HB_LONG ) ret );
}

static void s_ImGuiContext_getColorPickerRef( ImGuiContext * p )
{
   ImVec4 ret = p->ColorPickerRef;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 4 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
   hb_arraySetND( pret, 3, ( double ) ret.z );
   hb_arraySetND( pret, 4, ( double ) ret.w );
}

static void s_ImGuiContext_getComboPreviewData( ImGuiContext * p )
{
 //  ImGuiComboPreviewData ret = p->ComboPreviewData;
}

static void s_ImGuiContext_getSliderCurrentAccum( ImGuiContext * p )
{
   float ret = p->SliderCurrentAccum;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getSliderCurrentAccumDirty( ImGuiContext * p )
{
   bool ret = p->SliderCurrentAccumDirty;
   hb_retl( ret );
}

static void s_ImGuiContext_getDragCurrentAccumDirty( ImGuiContext * p )
{
   bool ret = p->DragCurrentAccumDirty;
   hb_retl( ret );
}

static void s_ImGuiContext_getDragCurrentAccum( ImGuiContext * p )
{
   float ret = p->DragCurrentAccum;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getDragSpeedDefaultRatio( ImGuiContext * p )
{
   float ret = p->DragSpeedDefaultRatio;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getScrollbarClickDeltaToGrabCenter( ImGuiContext * p )
{
   float ret = p->ScrollbarClickDeltaToGrabCenter;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getDisabledAlphaBackup( ImGuiContext * p )
{
   float ret = p->DisabledAlphaBackup;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getDisabledStackSize( ImGuiContext * p )
{
   short ret = p->DisabledStackSize;
}

static void s_ImGuiContext_getTooltipOverrideCount( ImGuiContext * p )
{
   short ret = p->TooltipOverrideCount;
}

static void s_ImGuiContext_getTooltipSlowDelay( ImGuiContext * p )
{
   float ret = p->TooltipSlowDelay;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getClipboardHandlerData( ImGuiContext * p )
{
   // ImVector_char ret = p->ClipboardHandlerData;
}

static void s_ImGuiContext_getMenusIdSubmittedThisFrame( ImGuiContext * p )
{
   // ImVector_ImGuiID ret = p->MenusIdSubmittedThisFrame;
}

static void s_ImGuiContext_getPlatformImePos( ImGuiContext * p )
{
   ImVec2 ret = p->PlatformImePos;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiContext_getPlatformImeLastPos( ImGuiContext * p )
{
   ImVec2 ret = p->PlatformImeLastPos;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiContext_getPlatformImePosViewport( ImGuiContext * p )
{
   ImGuiViewportP* ret = p->PlatformImePosViewport;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiContext_getPlatformLocaleDecimalPoint( ImGuiContext * p )
{
   char ret = p->PlatformLocaleDecimalPoint;
   hb_retclen( &ret, 1 );
}

static void s_ImGuiContext_getDockContext( ImGuiContext * p )
{
//   ImGuiDockContext ret = p->DockContext;
}

static void s_ImGuiContext_getSettingsLoaded( ImGuiContext * p )
{
   bool ret = p->SettingsLoaded;
   hb_retl( ret );
}

static void s_ImGuiContext_getSettingsDirtyTimer( ImGuiContext * p )
{
   float ret = p->SettingsDirtyTimer;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getSettingsIniData( ImGuiContext * p )
{
   ImGuiTextBuffer ret = p->SettingsIniData;
}

static void s_ImGuiContext_getSettingsHandlers( ImGuiContext * p )
{
   // ImVector_ImGuiSettingsHandler ret = p->SettingsHandlers;
}

static void s_ImGuiContext_getSettingsWindows( ImGuiContext * p )
{
   ImChunkStream_ImGuiWindowSettings ret = p->SettingsWindows;
}

static void s_ImGuiContext_getSettingsTables( ImGuiContext * p )
{
   ImChunkStream_ImGuiTableSettings ret = p->SettingsTables;
}

static void s_ImGuiContext_getHooks( ImGuiContext * p )
{
   // ImVector_ImGuiContextHook ret = p->Hooks;
}

static void s_ImGuiContext_getHookIdNext( ImGuiContext * p )
{
   ImGuiID ret = p->HookIdNext;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getLogEnabled( ImGuiContext * p )
{
   bool ret = p->LogEnabled;
   hb_retl( ret );
}

static void s_ImGuiContext_getLogType( ImGuiContext * p )
{
   ImGuiLogType ret = p->LogType;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getLogFile( ImGuiContext * p )
{
   ImFileHandle ret = p->LogFile;
}

static void s_ImGuiContext_getLogBuffer( ImGuiContext * p )
{
   ImGuiTextBuffer ret = p->LogBuffer;
}

static void s_ImGuiContext_getLogNextPrefix( ImGuiContext * p )
{
   const char* ret = p->LogNextPrefix;
   hb_retc( ret );
}

static void s_ImGuiContext_getLogNextSuffix( ImGuiContext * p )
{
   const char* ret = p->LogNextSuffix;
   hb_retc( ret );
}

static void s_ImGuiContext_getLogLinePosY( ImGuiContext * p )
{
   float ret = p->LogLinePosY;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getLogLineFirstItem( ImGuiContext * p )
{
   bool ret = p->LogLineFirstItem;
   hb_retl( ret );
}

static void s_ImGuiContext_getLogDepthRef( ImGuiContext * p )
{
   int ret = p->LogDepthRef;
   hb_retni( ret );
}

static void s_ImGuiContext_getLogDepthToExpand( ImGuiContext * p )
{
   int ret = p->LogDepthToExpand;
   hb_retni( ret );
}

static void s_ImGuiContext_getLogDepthToExpandDefault( ImGuiContext * p )
{
   int ret = p->LogDepthToExpandDefault;
   hb_retni( ret );
}

static void s_ImGuiContext_getDebugItemPickerActive( ImGuiContext * p )
{
   bool ret = p->DebugItemPickerActive;
   hb_retl( ret );
}

static void s_ImGuiContext_getDebugItemPickerBreakId( ImGuiContext * p )
{
   ImGuiID ret = p->DebugItemPickerBreakId;
   hb_retni( ( int ) ret );
}

static void s_ImGuiContext_getDebugMetricsConfig( ImGuiContext * p )
{
 //  ImGuiMetricsConfig ret = p->DebugMetricsConfig;
}

static void s_ImGuiContext_getDebugStackTool( ImGuiContext * p )
{
 //  ImGuiStackTool ret = p->DebugStackTool;
}

static void s_ImGuiContext_getFramerateSecPerFrame( ImGuiContext * p )
{
   float ret;
   HB_SIZE pos = hb_parns( 3 );
   if( pos == 0 || pos > 120 )
      return;
   ret = p->FramerateSecPerFrame[ pos - 1 ];
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getFramerateSecPerFrameIdx( ImGuiContext * p )
{
   int ret = p->FramerateSecPerFrameIdx;
   hb_retni( ret );
}

static void s_ImGuiContext_getFramerateSecPerFrameCount( ImGuiContext * p )
{
   int ret = p->FramerateSecPerFrameCount;
   hb_retni( ret );
}

static void s_ImGuiContext_getFramerateSecPerFrameAccum( ImGuiContext * p )
{
   float ret = p->FramerateSecPerFrameAccum;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiContext_getWantCaptureMouseNextFrame( ImGuiContext * p )
{
   int ret = p->WantCaptureMouseNextFrame;
   hb_retni( ret );
}

static void s_ImGuiContext_getWantCaptureKeyboardNextFrame( ImGuiContext * p )
{
   int ret = p->WantCaptureKeyboardNextFrame;
   hb_retni( ret );
}

static void s_ImGuiContext_getWantTextInputNextFrame( ImGuiContext * p )
{
   int ret = p->WantTextInputNextFrame;
   hb_retni( ret );
}

static void s_ImGuiContext_getTempBuffer( ImGuiContext * p )
{
   char ret;
   HB_SIZE pos = hb_parns( 3 );
   if( pos == 0 || pos > 1024 )
      return;
   ret = p->TempBuffer[ pos - 1 ];
   hb_retclen( &ret, 1 );
}

static void(*s_ImGuiContext_fields[])( ImGuiContext * ) = { s_ImGuiContext_getInitialized, s_ImGuiContext_getFontAtlasOwnedByContext, s_ImGuiContext_getIO, s_ImGuiContext_getPlatformIO, s_ImGuiContext_getStyle, s_ImGuiContext_getConfigFlagsCurrFrame, s_ImGuiContext_getConfigFlagsLastFrame, s_ImGuiContext_getFont, s_ImGuiContext_getFontSize, s_ImGuiContext_getFontBaseSize, s_ImGuiContext_getDrawListSharedData, s_ImGuiContext_getTime, s_ImGuiContext_getFrameCount, s_ImGuiContext_getFrameCountEnded, s_ImGuiContext_getFrameCountPlatformEnded, s_ImGuiContext_getFrameCountRendered, s_ImGuiContext_getWithinFrameScope, s_ImGuiContext_getWithinFrameScopeWithImplicitWindow, s_ImGuiContext_getWithinEndChild, s_ImGuiContext_getGcCompactAll, s_ImGuiContext_getTestEngineHookItems, s_ImGuiContext_getTestEngine, s_ImGuiContext_getWindows, s_ImGuiContext_getWindowsFocusOrder, s_ImGuiContext_getWindowsTempSortBuffer, s_ImGuiContext_getCurrentWindowStack, s_ImGuiContext_getWindowsById, s_ImGuiContext_getWindowsActiveCount, s_ImGuiContext_getWindowsHoverPadding, s_ImGuiContext_getCurrentWindow, s_ImGuiContext_getHoveredWindow, s_ImGuiContext_getHoveredWindowUnderMovingWindow, s_ImGuiContext_getHoveredDockNode, s_ImGuiContext_getMovingWindow, s_ImGuiContext_getWheelingWindow, s_ImGuiContext_getWheelingWindowRefMousePos, s_ImGuiContext_getWheelingWindowTimer, s_ImGuiContext_getDebugHookIdInfo, s_ImGuiContext_getHoveredId, s_ImGuiContext_getHoveredIdPreviousFrame, s_ImGuiContext_getHoveredIdAllowOverlap, s_ImGuiContext_getHoveredIdUsingMouseWheel, s_ImGuiContext_getHoveredIdPreviousFrameUsingMouseWheel, s_ImGuiContext_getHoveredIdDisabled, s_ImGuiContext_getHoveredIdTimer, s_ImGuiContext_getHoveredIdNotActiveTimer, s_ImGuiContext_getActiveId, s_ImGuiContext_getActiveIdIsAlive, s_ImGuiContext_getActiveIdTimer, s_ImGuiContext_getActiveIdIsJustActivated, s_ImGuiContext_getActiveIdAllowOverlap, s_ImGuiContext_getActiveIdNoClearOnFocusLoss, s_ImGuiContext_getActiveIdHasBeenPressedBefore, s_ImGuiContext_getActiveIdHasBeenEditedBefore, s_ImGuiContext_getActiveIdHasBeenEditedThisFrame, s_ImGuiContext_getActiveIdUsingMouseWheel, s_ImGuiContext_getActiveIdUsingNavDirMask, s_ImGuiContext_getActiveIdUsingNavInputMask, s_ImGuiContext_getActiveIdUsingKeyInputMask, s_ImGuiContext_getActiveIdClickOffset, s_ImGuiContext_getActiveIdWindow, s_ImGuiContext_getActiveIdSource, s_ImGuiContext_getActiveIdMouseButton, s_ImGuiContext_getActiveIdPreviousFrame, s_ImGuiContext_getActiveIdPreviousFrameIsAlive, s_ImGuiContext_getActiveIdPreviousFrameHasBeenEditedBefore, s_ImGuiContext_getActiveIdPreviousFrameWindow, s_ImGuiContext_getLastActiveId, s_ImGuiContext_getLastActiveIdTimer, s_ImGuiContext_getCurrentItemFlags, s_ImGuiContext_getNextItemData, s_ImGuiContext_getLastItemData, s_ImGuiContext_getNextWindowData, s_ImGuiContext_getColorStack, s_ImGuiContext_getStyleVarStack, s_ImGuiContext_getFontStack, s_ImGuiContext_getFocusScopeStack, s_ImGuiContext_getItemFlagsStack, s_ImGuiContext_getGroupStack, s_ImGuiContext_getOpenPopupStack, s_ImGuiContext_getBeginPopupStack, s_ImGuiContext_getBeginMenuCount, s_ImGuiContext_getViewports, s_ImGuiContext_getCurrentDpiScale, s_ImGuiContext_getCurrentViewport, s_ImGuiContext_getMouseViewport, s_ImGuiContext_getMouseLastHoveredViewport, s_ImGuiContext_getPlatformLastFocusedViewportId, s_ImGuiContext_getFallbackMonitor, s_ImGuiContext_getViewportFrontMostStampCount, s_ImGuiContext_getNavWindow, s_ImGuiContext_getNavId, s_ImGuiContext_getNavFocusScopeId, s_ImGuiContext_getNavActivateId, s_ImGuiContext_getNavActivateDownId, s_ImGuiContext_getNavActivatePressedId, s_ImGuiContext_getNavActivateInputId, s_ImGuiContext_getNavActivateFlags, s_ImGuiContext_getNavJustMovedToId, s_ImGuiContext_getNavJustMovedToFocusScopeId, s_ImGuiContext_getNavJustMovedToKeyMods, s_ImGuiContext_getNavNextActivateId, s_ImGuiContext_getNavNextActivateFlags, s_ImGuiContext_getNavInputSource, s_ImGuiContext_getNavLayer, s_ImGuiContext_getNavIdIsAlive, s_ImGuiContext_getNavMousePosDirty, s_ImGuiContext_getNavDisableHighlight, s_ImGuiContext_getNavDisableMouseHover, s_ImGuiContext_getNavAnyRequest, s_ImGuiContext_getNavInitRequest, s_ImGuiContext_getNavInitRequestFromMove, s_ImGuiContext_getNavInitResultId, s_ImGuiContext_getNavInitResultRectRel, s_ImGuiContext_getNavMoveSubmitted, s_ImGuiContext_getNavMoveScoringItems, s_ImGuiContext_getNavMoveForwardToNextFrame, s_ImGuiContext_getNavMoveFlags, s_ImGuiContext_getNavMoveScrollFlags, s_ImGuiContext_getNavMoveKeyMods, s_ImGuiContext_getNavMoveDir, s_ImGuiContext_getNavMoveDirForDebug, s_ImGuiContext_getNavMoveClipDir, s_ImGuiContext_getNavScoringRect, s_ImGuiContext_getNavScoringNoClipRect, s_ImGuiContext_getNavScoringDebugCount, s_ImGuiContext_getNavTabbingDir, s_ImGuiContext_getNavTabbingCounter, s_ImGuiContext_getNavMoveResultLocal, s_ImGuiContext_getNavMoveResultLocalVisible, s_ImGuiContext_getNavMoveResultOther, s_ImGuiContext_getNavTabbingResultFirst, s_ImGuiContext_getNavWindowingTarget, s_ImGuiContext_getNavWindowingTargetAnim, s_ImGuiContext_getNavWindowingListWindow, s_ImGuiContext_getNavWindowingTimer, s_ImGuiContext_getNavWindowingHighlightAlpha, s_ImGuiContext_getNavWindowingToggleLayer, s_ImGuiContext_getDimBgRatio, s_ImGuiContext_getMouseCursor, s_ImGuiContext_getDragDropActive, s_ImGuiContext_getDragDropWithinSource, s_ImGuiContext_getDragDropWithinTarget, s_ImGuiContext_getDragDropSourceFlags, s_ImGuiContext_getDragDropSourceFrameCount, s_ImGuiContext_getDragDropMouseButton, s_ImGuiContext_getDragDropPayload, s_ImGuiContext_getDragDropTargetRect, s_ImGuiContext_getDragDropTargetId, s_ImGuiContext_getDragDropAcceptFlags, s_ImGuiContext_getDragDropAcceptIdCurrRectSurface, s_ImGuiContext_getDragDropAcceptIdCurr, s_ImGuiContext_getDragDropAcceptIdPrev, s_ImGuiContext_getDragDropAcceptFrameCount, s_ImGuiContext_getDragDropHoldJustPressedId, s_ImGuiContext_getDragDropPayloadBufHeap, s_ImGuiContext_getDragDropPayloadBufLocal, s_ImGuiContext_getClipperTempDataStacked, s_ImGuiContext_getClipperTempData, s_ImGuiContext_getCurrentTable, s_ImGuiContext_getTablesTempDataStacked, s_ImGuiContext_getTablesTempData, s_ImGuiContext_getTables, s_ImGuiContext_getTablesLastTimeActive, s_ImGuiContext_getDrawChannelsTempMergeBuffer, s_ImGuiContext_getCurrentTabBar, s_ImGuiContext_getTabBars, s_ImGuiContext_getCurrentTabBarStack, s_ImGuiContext_getShrinkWidthBuffer, s_ImGuiContext_getMouseLastValidPos, s_ImGuiContext_getInputTextState, s_ImGuiContext_getInputTextPasswordFont, s_ImGuiContext_getTempInputId, s_ImGuiContext_getColorEditOptions, s_ImGuiContext_getColorEditLastHue, s_ImGuiContext_getColorEditLastSat, s_ImGuiContext_getColorEditLastColor, s_ImGuiContext_getColorPickerRef, s_ImGuiContext_getComboPreviewData, s_ImGuiContext_getSliderCurrentAccum, s_ImGuiContext_getSliderCurrentAccumDirty, s_ImGuiContext_getDragCurrentAccumDirty, s_ImGuiContext_getDragCurrentAccum, s_ImGuiContext_getDragSpeedDefaultRatio, s_ImGuiContext_getScrollbarClickDeltaToGrabCenter, s_ImGuiContext_getDisabledAlphaBackup, s_ImGuiContext_getDisabledStackSize, s_ImGuiContext_getTooltipOverrideCount, s_ImGuiContext_getTooltipSlowDelay, s_ImGuiContext_getClipboardHandlerData, s_ImGuiContext_getMenusIdSubmittedThisFrame, s_ImGuiContext_getPlatformImePos, s_ImGuiContext_getPlatformImeLastPos, s_ImGuiContext_getPlatformImePosViewport, s_ImGuiContext_getPlatformLocaleDecimalPoint, s_ImGuiContext_getDockContext, s_ImGuiContext_getSettingsLoaded, s_ImGuiContext_getSettingsDirtyTimer, s_ImGuiContext_getSettingsIniData, s_ImGuiContext_getSettingsHandlers, s_ImGuiContext_getSettingsWindows, s_ImGuiContext_getSettingsTables, s_ImGuiContext_getHooks, s_ImGuiContext_getHookIdNext, s_ImGuiContext_getLogEnabled, s_ImGuiContext_getLogType, s_ImGuiContext_getLogFile, s_ImGuiContext_getLogBuffer, s_ImGuiContext_getLogNextPrefix, s_ImGuiContext_getLogNextSuffix, s_ImGuiContext_getLogLinePosY, s_ImGuiContext_getLogLineFirstItem, s_ImGuiContext_getLogDepthRef, s_ImGuiContext_getLogDepthToExpand, s_ImGuiContext_getLogDepthToExpandDefault, s_ImGuiContext_getDebugItemPickerActive, s_ImGuiContext_getDebugItemPickerBreakId, s_ImGuiContext_getDebugMetricsConfig, s_ImGuiContext_getDebugStackTool, s_ImGuiContext_getFramerateSecPerFrame, s_ImGuiContext_getFramerateSecPerFrameIdx, s_ImGuiContext_getFramerateSecPerFrameCount, s_ImGuiContext_getFramerateSecPerFrameAccum, s_ImGuiContext_getWantCaptureMouseNextFrame, s_ImGuiContext_getWantCaptureKeyboardNextFrame, s_ImGuiContext_getWantTextInputNextFrame, s_ImGuiContext_getTempBuffer, s_ImGuiContext_setPlatformLocaleDecimalPoint };

HB_FUNC( IMGUICONTEXT_GET )
{
   ImGuiContext * p = ( ImGuiContext * ) hb_parptr( 1 );
   int n = hb_parni( 2 ) - 1;
   if( p && n >= 0 && n < 227 )
      s_ImGuiContext_fields[ n ]( p );
}

HB_FUNC( IMGUICONTEXT_SET )
{
   ImGuiContext * p = ( ImGuiContext * ) hb_parptr( 1 );
   int n = hb_parni( 2 ) - 1;
   if( p && n >= 0 && n < 1 )
      s_ImGuiContext_fields[ 227 + n ]( p );
   hb_itemCopy( hb_stackReturnItem(), hb_paramError( 3 ) );
}

