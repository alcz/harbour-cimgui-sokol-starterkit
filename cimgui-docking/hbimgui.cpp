/* This file is automatically generated by generator.prg originated from
   https://github.com/alcz/harbour-cimgui-sokol-starterkit
   based on output/definitions.json from cimgui https://github.com/cimgui/cimgui which is
   based on imgui.h file version "1.85" from Dear ImGui https://github.com/ocornut/imgui */

#include "hbapi.h"
#include "hbapiitm.h"
#include "hbstack.h"
#include "./imgui/imgui.h"
#include "./imgui/imgui_internal.h"
#include "cimgui.h"

#include "../cimgui-common/hbhlp.c"

/* void ImGuiListClipper_Begin(ImGuiListClipper* self,int items_count,float items_height) */
HB_FUNC( IMGUILISTCLIPPER_BEGIN )
{
   ImGuiListClipper* pOut = ( ImGuiListClipper* ) hb_parptr( 1 );
   int items_count = hb_parni( 2 );
   float items_height = ( float ) hb_parnd( 3 );
   ImGuiListClipper_Begin(pOut,items_count,items_height);
}

/* void ImGuiListClipper_End(ImGuiListClipper* self) */
HB_FUNC( IMGUILISTCLIPPER_END )
{
   ImGuiListClipper* pOut = ( ImGuiListClipper* ) hb_parptr( 1 );
   ImGuiListClipper_End(pOut);
}

HB_FUNC( IMGUILISTCLIPPER_IMGUILISTCLIPPER )
{
   hb_retptr( ImGuiListClipper_ImGuiListClipper() );
}

/* bool ImGuiListClipper_Step(ImGuiListClipper* self) */
HB_FUNC( IMGUILISTCLIPPER_STEP )
{
   ImGuiListClipper* pOut = ( ImGuiListClipper* ) hb_parptr( 1 );
   bool ret = ImGuiListClipper_Step(pOut);
   hb_retl( ret );
}

/* void ImGuiListClipper_destroy(ImGuiListClipper* self) */
HB_FUNC( IMGUILISTCLIPPER_DESTROY )
{
   ImGuiListClipper* pOut = ( ImGuiListClipper* ) hb_parptr( 1 );
   ImGuiListClipper_destroy(pOut);
}

/* const ImGuiPayload* igAcceptDragDropPayload(const char* type,ImGuiDragDropFlags flags) */
HB_FUNC( IGACCEPTDRAGDROPPAYLOAD )
{
   const char* type = hb_parcx( 1 );
   ImGuiDragDropFlags flags = ( ImGuiDragDropFlags ) hb_parni( 2 );
   const ImGuiPayload* ret = igAcceptDragDropPayload(type,flags);
   hb_retptr( ( void * ) ret );
}

/* void igActivateItem(ImGuiID id) */
HB_FUNC( IGACTIVATEITEM )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   igActivateItem(id);
}

/* ImGuiID igAddContextHook(ImGuiContext* context,const ImGuiContextHook* hook) */
HB_FUNC( IGADDCONTEXTHOOK )
{
   ImGuiContext* context = ( ImGuiContext* ) hb_parptr( 1 );
   const ImGuiContextHook* hook = ( const ImGuiContextHook* ) hb_parptr( 2 );
   ImGuiID ret = igAddContextHook(context,hook);
   hb_retni( ( int ) ret );
}

/* void igAlignTextToFramePadding() */
HB_FUNC( IGALIGNTEXTTOFRAMEPADDING )
{
   igAlignTextToFramePadding();
}

/* bool igArrowButton(const char* str_id,ImGuiDir dir) */
HB_FUNC( IGARROWBUTTON )
{
   const char* str_id = hb_parcx( 1 );
   ImGuiDir dir = ( ImGuiDir ) hb_parni( 2 );
   bool ret = igArrowButton(str_id,dir);
   hb_retl( ret );
}

/* bool igArrowButtonEx(const char* str_id,ImGuiDir dir,ImVec2 size_arg,ImGuiButtonFlags flags) */
HB_FUNC( IGARROWBUTTONEX )
{
   const char* str_id = hb_parcx( 1 );
   ImGuiDir dir = ( ImGuiDir ) hb_parni( 2 );
   PHB_ITEM psize_arg = hb_param( 3, HB_IT_ARRAY );
   ImVec2 size_arg = ImVec2{ _paf( psize_arg, 1 ), _paf( psize_arg, 2 ) };
   ImGuiButtonFlags flags = ( ImGuiButtonFlags ) hb_parni( 4 );
   bool ret = igArrowButtonEx(str_id,dir,size_arg,flags);
   hb_retl( ret );
}

/* bool igBegin(const char* name,bool* p_open,ImGuiWindowFlags flags) */
HB_FUNC( IGBEGIN )
{
   const char* name = hb_parcx( 1 );
   bool /* @ */ _p_open = hb_parl( 2 );
   bool * p_open = ( HB_ISNIL( 2 ) ? NULL : &_p_open );
   ImGuiWindowFlags flags = ( ImGuiWindowFlags ) hb_parni( 3 );
   bool ret = igBegin(name,p_open,flags);
   hb_itemPutL( hb_paramError( 2 ), _p_open );
   hb_retl( ret );
}

/* bool igBeginChild_Str(const char* str_id,const ImVec2 size,bool border,ImGuiWindowFlags flags) */
HB_FUNC( IGBEGINCHILDSTR )
{
   const char* str_id = hb_parcx( 1 );
   PHB_ITEM psize = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   bool border = hb_parldef( 3, 0 );
   ImGuiWindowFlags flags = ( ImGuiWindowFlags ) hb_parni( 4 );
   bool ret = igBeginChild_Str(str_id,size,border,flags);
   hb_retl( ret );
}

/* bool igBeginChild_ID(ImGuiID id,const ImVec2 size,bool border,ImGuiWindowFlags flags) */
HB_FUNC( IGBEGINCHILDID )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   PHB_ITEM psize = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   bool border = hb_parldef( 3, 0 );
   ImGuiWindowFlags flags = ( ImGuiWindowFlags ) hb_parni( 4 );
   bool ret = igBeginChild_ID(id,size,border,flags);
   hb_retl( ret );
}

/* bool igBeginChildEx(const char* name,ImGuiID id,const ImVec2 size_arg,bool border,ImGuiWindowFlags flags) */
HB_FUNC( IGBEGINCHILDEX )
{
   const char* name = hb_parcx( 1 );
   ImGuiID id = ( ImGuiID ) hb_parni( 2 );
   PHB_ITEM psize_arg = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 size_arg = ImVec2{ _paf( psize_arg, 1 ), _paf( psize_arg, 2 ) };
   bool border = hb_parl( 4 );
   ImGuiWindowFlags flags = ( ImGuiWindowFlags ) hb_parni( 5 );
   bool ret = igBeginChildEx(name,id,size_arg,border,flags);
   hb_retl( ret );
}

/* bool igBeginChildFrame(ImGuiID id,const ImVec2 size,ImGuiWindowFlags flags) */
HB_FUNC( IGBEGINCHILDFRAME )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   PHB_ITEM psize = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   ImGuiWindowFlags flags = ( ImGuiWindowFlags ) hb_parni( 3 );
   bool ret = igBeginChildFrame(id,size,flags);
   hb_retl( ret );
}

/* void igBeginColumns(const char* str_id,int count,ImGuiOldColumnFlags flags) */
HB_FUNC( IGBEGINCOLUMNS )
{
   const char* str_id = hb_parcx( 1 );
   int count = hb_parni( 2 );
   ImGuiOldColumnFlags flags = ( ImGuiOldColumnFlags ) hb_parni( 3 );
   igBeginColumns(str_id,count,flags);
}

/* bool igBeginCombo(const char* label,const char* preview_value,ImGuiComboFlags flags) */
HB_FUNC( IGBEGINCOMBO )
{
   const char* label = hb_parcx( 1 );
   const char* preview_value = hb_parcx( 2 );
   ImGuiComboFlags flags = ( ImGuiComboFlags ) hb_parni( 3 );
   bool ret = igBeginCombo(label,preview_value,flags);
   hb_retl( ret );
}

/* bool igBeginComboPopup(ImGuiID popup_id,const ImRect bb,ImGuiComboFlags flags) */
HB_FUNC( IGBEGINCOMBOPOPUP )
{
   ImGuiID popup_id = ( ImGuiID ) hb_parni( 1 );
   PHB_ITEM pbb = hb_param( 2, HB_IT_ARRAY );
   const ImRect bb = ImRect{ ImVec2{ _paf( pbb, 1 ), _paf( pbb, 2 ) }, ImVec2{ _paf( pbb, 3 ), _paf( pbb, 4 ) } };
   ImGuiComboFlags flags = ( ImGuiComboFlags ) hb_parni( 3 );
   bool ret = igBeginComboPopup(popup_id,bb,flags);
   hb_retl( ret );
}

/* bool igBeginComboPreview() */
HB_FUNC( IGBEGINCOMBOPREVIEW )
{
   bool ret = igBeginComboPreview();
   hb_retl( ret );
}

/* void igBeginDisabled(bool disabled) */
HB_FUNC( IGBEGINDISABLED )
{
   bool disabled = hb_parldef( 1, 1 );
   igBeginDisabled(disabled);
}

/* void igBeginDockableDragDropSource(ImGuiWindow* window) */
HB_FUNC( IGBEGINDOCKABLEDRAGDROPSOURCE )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   igBeginDockableDragDropSource(window);
}

/* void igBeginDockableDragDropTarget(ImGuiWindow* window) */
HB_FUNC( IGBEGINDOCKABLEDRAGDROPTARGET )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   igBeginDockableDragDropTarget(window);
}

/* void igBeginDocked(ImGuiWindow* window,bool* p_open) */
HB_FUNC( IGBEGINDOCKED )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   bool /* @ */ _p_open = hb_parl( 2 );
   bool * p_open = ( HB_ISNIL( 2 ) ? NULL : &_p_open );
   igBeginDocked(window,p_open);
   hb_itemPutL( hb_paramError( 2 ), _p_open );
}

/* bool igBeginDragDropSource(ImGuiDragDropFlags flags) */
HB_FUNC( IGBEGINDRAGDROPSOURCE )
{
   ImGuiDragDropFlags flags = ( ImGuiDragDropFlags ) hb_parni( 1 );
   bool ret = igBeginDragDropSource(flags);
   hb_retl( ret );
}

/* bool igBeginDragDropTarget() */
HB_FUNC( IGBEGINDRAGDROPTARGET )
{
   bool ret = igBeginDragDropTarget();
   hb_retl( ret );
}

/* bool igBeginDragDropTargetCustom(const ImRect bb,ImGuiID id) */
HB_FUNC( IGBEGINDRAGDROPTARGETCUSTOM )
{
   PHB_ITEM pbb = hb_param( 1, HB_IT_ARRAY );
   const ImRect bb = ImRect{ ImVec2{ _paf( pbb, 1 ), _paf( pbb, 2 ) }, ImVec2{ _paf( pbb, 3 ), _paf( pbb, 4 ) } };
   ImGuiID id = ( ImGuiID ) hb_parni( 2 );
   bool ret = igBeginDragDropTargetCustom(bb,id);
   hb_retl( ret );
}

/* void igBeginGroup() */
HB_FUNC( IGBEGINGROUP )
{
   igBeginGroup();
}

/* bool igBeginListBox(const char* label,const ImVec2 size) */
HB_FUNC( IGBEGINLISTBOX )
{
   const char* label = hb_parcx( 1 );
   PHB_ITEM psize = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   bool ret = igBeginListBox(label,size);
   hb_retl( ret );
}

/* bool igBeginMainMenuBar() */
HB_FUNC( IGBEGINMAINMENUBAR )
{
   bool ret = igBeginMainMenuBar();
   hb_retl( ret );
}

/* bool igBeginMenu(const char* label,bool enabled) */
HB_FUNC( IGBEGINMENU )
{
   const char* label = hb_parcx( 1 );
   bool enabled = hb_parldef( 2, 1 );
   bool ret = igBeginMenu(label,enabled);
   hb_retl( ret );
}

/* bool igBeginMenuBar() */
HB_FUNC( IGBEGINMENUBAR )
{
   bool ret = igBeginMenuBar();
   hb_retl( ret );
}

/* bool igBeginMenuEx(const char* label,const char* icon,bool enabled) */
HB_FUNC( IGBEGINMENUEX )
{
   const char* label = hb_parcx( 1 );
   const char* icon = hb_parcx( 2 );
   bool enabled = hb_parldef( 3, 1 );
   bool ret = igBeginMenuEx(label,icon,enabled);
   hb_retl( ret );
}

/* bool igBeginPopup(const char* str_id,ImGuiWindowFlags flags) */
HB_FUNC( IGBEGINPOPUP )
{
   const char* str_id = hb_parcx( 1 );
   ImGuiWindowFlags flags = ( ImGuiWindowFlags ) hb_parni( 2 );
   bool ret = igBeginPopup(str_id,flags);
   hb_retl( ret );
}

/* bool igBeginPopupContextItem(const char* str_id,ImGuiPopupFlags popup_flags) */
HB_FUNC( IGBEGINPOPUPCONTEXTITEM )
{
   const char* str_id = hb_parcx( 1 );
   ImGuiPopupFlags popup_flags = ( ImGuiPopupFlags ) hb_parni( 2 );
   bool ret = igBeginPopupContextItem(str_id,popup_flags);
   hb_retl( ret );
}

/* bool igBeginPopupContextVoid(const char* str_id,ImGuiPopupFlags popup_flags) */
HB_FUNC( IGBEGINPOPUPCONTEXTVOID )
{
   const char* str_id = hb_parcx( 1 );
   ImGuiPopupFlags popup_flags = ( ImGuiPopupFlags ) hb_parni( 2 );
   bool ret = igBeginPopupContextVoid(str_id,popup_flags);
   hb_retl( ret );
}

/* bool igBeginPopupContextWindow(const char* str_id,ImGuiPopupFlags popup_flags) */
HB_FUNC( IGBEGINPOPUPCONTEXTWINDOW )
{
   const char* str_id = hb_parcx( 1 );
   ImGuiPopupFlags popup_flags = ( ImGuiPopupFlags ) hb_parni( 2 );
   bool ret = igBeginPopupContextWindow(str_id,popup_flags);
   hb_retl( ret );
}

/* bool igBeginPopupEx(ImGuiID id,ImGuiWindowFlags extra_flags) */
HB_FUNC( IGBEGINPOPUPEX )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   ImGuiWindowFlags extra_flags = ( ImGuiWindowFlags ) hb_parni( 2 );
   bool ret = igBeginPopupEx(id,extra_flags);
   hb_retl( ret );
}

/* bool igBeginPopupModal(const char* name,bool* p_open,ImGuiWindowFlags flags) */
HB_FUNC( IGBEGINPOPUPMODAL )
{
   const char* name = hb_parcx( 1 );
   bool /* @ */ _p_open = hb_parl( 2 );
   bool * p_open = ( HB_ISNIL( 2 ) ? NULL : &_p_open );
   ImGuiWindowFlags flags = ( ImGuiWindowFlags ) hb_parni( 3 );
   bool ret = igBeginPopupModal(name,p_open,flags);
   hb_itemPutL( hb_paramError( 2 ), _p_open );
   hb_retl( ret );
}

/* bool igBeginTabBar(const char* str_id,ImGuiTabBarFlags flags) */
HB_FUNC( IGBEGINTABBAR )
{
   const char* str_id = hb_parcx( 1 );
   ImGuiTabBarFlags flags = ( ImGuiTabBarFlags ) hb_parni( 2 );
   bool ret = igBeginTabBar(str_id,flags);
   hb_retl( ret );
}

/* bool igBeginTabBarEx(ImGuiTabBar* tab_bar,const ImRect bb,ImGuiTabBarFlags flags,ImGuiDockNode* dock_node) */
HB_FUNC( IGBEGINTABBAREX )
{
   ImGuiTabBar* tab_bar = ( ImGuiTabBar* ) hb_parptr( 1 );
   PHB_ITEM pbb = hb_param( 2, HB_IT_ARRAY );
   const ImRect bb = ImRect{ ImVec2{ _paf( pbb, 1 ), _paf( pbb, 2 ) }, ImVec2{ _paf( pbb, 3 ), _paf( pbb, 4 ) } };
   ImGuiTabBarFlags flags = ( ImGuiTabBarFlags ) hb_parni( 3 );
   ImGuiDockNode* dock_node = ( ImGuiDockNode* ) hb_parptr( 4 );
   bool ret = igBeginTabBarEx(tab_bar,bb,flags,dock_node);
   hb_retl( ret );
}

/* bool igBeginTabItem(const char* label,bool* p_open,ImGuiTabItemFlags flags) */
HB_FUNC( IGBEGINTABITEM )
{
   const char* label = hb_parcx( 1 );
   bool /* @ */ _p_open = hb_parl( 2 );
   bool * p_open = ( HB_ISNIL( 2 ) ? NULL : &_p_open );
   ImGuiTabItemFlags flags = ( ImGuiTabItemFlags ) hb_parni( 3 );
   bool ret = igBeginTabItem(label,p_open,flags);
   hb_itemPutL( hb_paramError( 2 ), _p_open );
   hb_retl( ret );
}

/* bool igBeginTable(const char* str_id,int column,ImGuiTableFlags flags,const ImVec2 outer_size,float inner_width) */
HB_FUNC( IGBEGINTABLE )
{
   const char* str_id = hb_parcx( 1 );
   int column = hb_parni( 2 );
   ImGuiTableFlags flags = ( ImGuiTableFlags ) hb_parni( 3 );
   PHB_ITEM pouter_size = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 outer_size = ImVec2{ _paf( pouter_size, 1 ), _paf( pouter_size, 2 ) };
   float inner_width = ( float ) hb_parnd( 5 );
   bool ret = igBeginTable(str_id,column,flags,outer_size,inner_width);
   hb_retl( ret );
}

/* bool igBeginTableEx(const char* name,ImGuiID id,int columns_count,ImGuiTableFlags flags,const ImVec2 outer_size,float inner_width) */
HB_FUNC( IGBEGINTABLEEX )
{
   const char* name = hb_parcx( 1 );
   ImGuiID id = ( ImGuiID ) hb_parni( 2 );
   int columns_count = hb_parni( 3 );
   ImGuiTableFlags flags = ( ImGuiTableFlags ) hb_parni( 4 );
   PHB_ITEM pouter_size = hb_param( 5, HB_IT_ARRAY );
   const ImVec2 outer_size = ImVec2{ _paf( pouter_size, 1 ), _paf( pouter_size, 2 ) };
   float inner_width = ( float ) hb_parnd( 6 );
   bool ret = igBeginTableEx(name,id,columns_count,flags,outer_size,inner_width);
   hb_retl( ret );
}

/* void igBeginTooltip() */
HB_FUNC( IGBEGINTOOLTIP )
{
   igBeginTooltip();
}

/* void igBeginTooltipEx(ImGuiWindowFlags extra_flags,ImGuiTooltipFlags tooltip_flags) */
HB_FUNC( IGBEGINTOOLTIPEX )
{
   ImGuiWindowFlags extra_flags = ( ImGuiWindowFlags ) hb_parni( 1 );
   ImGuiTooltipFlags tooltip_flags = ( ImGuiTooltipFlags ) hb_parni( 2 );
   igBeginTooltipEx(extra_flags,tooltip_flags);
}

/* bool igBeginViewportSideBar(const char* name,ImGuiViewport* viewport,ImGuiDir dir,float size,ImGuiWindowFlags window_flags) */
HB_FUNC( IGBEGINVIEWPORTSIDEBAR )
{
   const char* name = hb_parcx( 1 );
   ImGuiViewport* viewport = ( ImGuiViewport* ) hb_parptr( 2 );
   ImGuiDir dir = ( ImGuiDir ) hb_parni( 3 );
   float size = ( float ) hb_parnd( 4 );
   ImGuiWindowFlags window_flags = ( ImGuiWindowFlags ) hb_parni( 5 );
   bool ret = igBeginViewportSideBar(name,viewport,dir,size,window_flags);
   hb_retl( ret );
}

/* void igBringWindowToDisplayBack(ImGuiWindow* window) */
HB_FUNC( IGBRINGWINDOWTODISPLAYBACK )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   igBringWindowToDisplayBack(window);
}

/* void igBringWindowToDisplayFront(ImGuiWindow* window) */
HB_FUNC( IGBRINGWINDOWTODISPLAYFRONT )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   igBringWindowToDisplayFront(window);
}

/* void igBringWindowToFocusFront(ImGuiWindow* window) */
HB_FUNC( IGBRINGWINDOWTOFOCUSFRONT )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   igBringWindowToFocusFront(window);
}

/* void igBullet() */
HB_FUNC( IGBULLET )
{
   igBullet();
}

/* void igBulletText(const char* fmt,...) */
HB_FUNC( IGBULLETTEXT )
{
   const char* fmt = hb_parcx( 1 );
   igBulletText(fmt,NULL);
}

/* void igBulletTextV(const char* fmt,va_list args) */
HB_FUNC( IGBULLETTEXTV )
{
   const char* fmt = hb_parcx( 1 );
   /* unsupported */
}

/* bool igButton(const char* label,const ImVec2 size) */
HB_FUNC( IGBUTTON )
{
   const char* label = hb_parcx( 1 );
   PHB_ITEM psize = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   bool ret = igButton(label,size);
   hb_retl( ret );
}

/* bool igButtonBehavior(const ImRect bb,ImGuiID id,bool* out_hovered,bool* out_held,ImGuiButtonFlags flags) */
HB_FUNC( IGBUTTONBEHAVIOR )
{
   PHB_ITEM pbb = hb_param( 1, HB_IT_ARRAY );
   const ImRect bb = ImRect{ ImVec2{ _paf( pbb, 1 ), _paf( pbb, 2 ) }, ImVec2{ _paf( pbb, 3 ), _paf( pbb, 4 ) } };
   ImGuiID id = ( ImGuiID ) hb_parni( 2 );
   bool _out_hovered;
   bool* out_hovered = &_out_hovered;
   bool _out_held;
   bool* out_held = &_out_held;
   ImGuiButtonFlags flags = ( ImGuiButtonFlags ) hb_parni( 5 );
   bool ret = igButtonBehavior(bb,id,out_hovered,out_held,flags);
   hb_itemPutL( hb_paramError( 3 ), _out_hovered );
   hb_itemPutL( hb_paramError( 4 ), _out_held );
   hb_retl( ret );
}

/* bool igButtonEx(const char* label,const ImVec2 size_arg,ImGuiButtonFlags flags) */
HB_FUNC( IGBUTTONEX )
{
   const char* label = hb_parcx( 1 );
   PHB_ITEM psize_arg = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 size_arg = ImVec2{ _paf( psize_arg, 1 ), _paf( psize_arg, 2 ) };
   ImGuiButtonFlags flags = ( ImGuiButtonFlags ) hb_parni( 3 );
   bool ret = igButtonEx(label,size_arg,flags);
   hb_retl( ret );
}

/* void igCalcItemSize(ImVec2 *pOut,ImVec2 size,float default_w,float default_h) */
HB_FUNC( IGCALCITEMSIZE )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   PHB_ITEM psize = hb_param( 2, HB_IT_ARRAY );
   ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   float default_w = ( float ) hb_parnd( 3 );
   float default_h = ( float ) hb_parnd( 4 );
   igCalcItemSize(&pOut,size,default_w,default_h);
   _ImVec2toA( &pOut, pOutItem );
}

/* float igCalcItemWidth() */
HB_FUNC( IGCALCITEMWIDTH )
{
   float ret = igCalcItemWidth();
   hb_retnd( ( double ) ret );
}

/* void igCalcListClipping(int items_count,float items_height,int* out_items_display_start,int* out_items_display_end) */
HB_FUNC( IGCALCLISTCLIPPING )
{
   int items_count = hb_parni( 1 );
   float items_height = ( float ) hb_parnd( 2 );
   int _out_items_display_start;
   int* out_items_display_start = &_out_items_display_start;
   int _out_items_display_end;
   int* out_items_display_end = &_out_items_display_end;
   igCalcListClipping(items_count,items_height,out_items_display_start,out_items_display_end);
   hb_itemPutNI( hb_paramError( 3 ), _out_items_display_start );
   hb_itemPutNI( hb_paramError( 4 ), _out_items_display_end );
}

/* void igCalcTextSize(ImVec2 *pOut,const char* text,const char* text_end,bool hide_text_after_double_hash,float wrap_width) */
HB_FUNC( IGCALCTEXTSIZE )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   const char* text = hb_parcx( 2 );
   const char* text_end = NULL;
   bool hide_text_after_double_hash = hb_parldef( 3, 0 );
   float wrap_width = ( float ) hb_parnd( 4 );
   igCalcTextSize(&pOut,text,text_end,hide_text_after_double_hash,wrap_width);
   _ImVec2toA( &pOut, pOutItem );
}

/* int igCalcTypematicRepeatAmount(float t0,float t1,float repeat_delay,float repeat_rate) */
HB_FUNC( IGCALCTYPEMATICREPEATAMOUNT )
{
   float t0 = ( float ) hb_parnd( 1 );
   float t1 = ( float ) hb_parnd( 2 );
   float repeat_delay = ( float ) hb_parnd( 3 );
   float repeat_rate = ( float ) hb_parnd( 4 );
   int ret = igCalcTypematicRepeatAmount(t0,t1,repeat_delay,repeat_rate);
   hb_retni( ret );
}

/* void igCalcWindowNextAutoFitSize(ImVec2 *pOut,ImGuiWindow* window) */
HB_FUNC( IGCALCWINDOWNEXTAUTOFITSIZE )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 2 );
   igCalcWindowNextAutoFitSize(&pOut,window);
   _ImVec2toA( &pOut, pOutItem );
}

/* float igCalcWrapWidthForPos(const ImVec2 pos,float wrap_pos_x) */
HB_FUNC( IGCALCWRAPWIDTHFORPOS )
{
   PHB_ITEM ppos = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   float wrap_pos_x = ( float ) hb_parnd( 2 );
   float ret = igCalcWrapWidthForPos(pos,wrap_pos_x);
   hb_retnd( ( double ) ret );
}

/* void igCallContextHooks(ImGuiContext* context,ImGuiContextHookType type) */
HB_FUNC( IGCALLCONTEXTHOOKS )
{
   ImGuiContext* context = ( ImGuiContext* ) hb_parptr( 1 );
   ImGuiContextHookType type = ( ImGuiContextHookType ) hb_parni( 2 );
   igCallContextHooks(context,type);
}

/* void igCaptureKeyboardFromApp(bool want_capture_keyboard_value) */
HB_FUNC( IGCAPTUREKEYBOARDFROMAPP )
{
   bool want_capture_keyboard_value = hb_parldef( 1, 1 );
   igCaptureKeyboardFromApp(want_capture_keyboard_value);
}

/* void igCaptureMouseFromApp(bool want_capture_mouse_value) */
HB_FUNC( IGCAPTUREMOUSEFROMAPP )
{
   bool want_capture_mouse_value = hb_parldef( 1, 1 );
   igCaptureMouseFromApp(want_capture_mouse_value);
}

/* bool igCheckbox(const char* label,bool* v) */
HB_FUNC( IGCHECKBOX )
{
   const char* label = hb_parcx( 1 );
   bool /* @ */ _v = hb_parl( 2 );
   bool * v = &_v;
   bool ret = igCheckbox(label,v);
   hb_itemPutL( hb_paramError( 2 ), _v );
   hb_retl( ret );
}

/* bool igCheckboxFlags_IntPtr(const char* label,int* flags,int flags_value) */
HB_FUNC( IGCHECKBOXFLAGSINTPTR )
{
   const char* label = hb_parcx( 1 );
   int /* @ */ _flags = hb_parni( 2 );
   int * flags = &_flags;
   int flags_value = hb_parni( 3 );
   bool ret = igCheckboxFlags_IntPtr(label,flags,flags_value);
   hb_itemPutNI( hb_paramError( 2 ), _flags );
   hb_retl( ret );
}

/* bool igCheckboxFlags_UintPtr(const char* label,unsigned int* flags,unsigned int flags_value) */
HB_FUNC( IGCHECKBOXFLAGSUINTPTR )
{
   const char* label = hb_parcx( 1 );
   unsigned int* flags = ( unsigned int* ) hb_parptr( 2 );
   unsigned int flags_value;
   bool ret = igCheckboxFlags_UintPtr(label,flags,flags_value);
   hb_retl( ret );
}

/* bool igCheckboxFlags_S64Ptr(const char* label,ImS64* flags,ImS64 flags_value) */
HB_FUNC( IGCHECKBOXFLAGSS64PTR )
{
   const char* label = hb_parcx( 1 );
   ImS64* flags = ( ImS64* ) hb_parptr( 2 );
   ImS64 flags_value;
   bool ret = igCheckboxFlags_S64Ptr(label,flags,flags_value);
   hb_retl( ret );
}

/* bool igCheckboxFlags_U64Ptr(const char* label,ImU64* flags,ImU64 flags_value) */
HB_FUNC( IGCHECKBOXFLAGSU64PTR )
{
   const char* label = hb_parcx( 1 );
   ImU64* flags = ( ImU64* ) hb_parptr( 2 );
   ImU64 flags_value;
   bool ret = igCheckboxFlags_U64Ptr(label,flags,flags_value);
   hb_retl( ret );
}

/* void igClearActiveID() */
HB_FUNC( IGCLEARACTIVEID )
{
   igClearActiveID();
}

/* void igClearDragDrop() */
HB_FUNC( IGCLEARDRAGDROP )
{
   igClearDragDrop();
}

/* void igClearIniSettings() */
HB_FUNC( IGCLEARINISETTINGS )
{
   igClearIniSettings();
}

/* bool igCloseButton(ImGuiID id,const ImVec2 pos) */
HB_FUNC( IGCLOSEBUTTON )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   PHB_ITEM ppos = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   bool ret = igCloseButton(id,pos);
   hb_retl( ret );
}

/* void igCloseCurrentPopup() */
HB_FUNC( IGCLOSECURRENTPOPUP )
{
   igCloseCurrentPopup();
}

/* void igClosePopupToLevel(int remaining,bool restore_focus_to_window_under_popup) */
HB_FUNC( IGCLOSEPOPUPTOLEVEL )
{
   int remaining = hb_parni( 1 );
   bool restore_focus_to_window_under_popup = hb_parl( 2 );
   igClosePopupToLevel(remaining,restore_focus_to_window_under_popup);
}

/* void igClosePopupsExceptModals() */
HB_FUNC( IGCLOSEPOPUPSEXCEPTMODALS )
{
   igClosePopupsExceptModals();
}

/* void igClosePopupsOverWindow(ImGuiWindow* ref_window,bool restore_focus_to_window_under_popup) */
HB_FUNC( IGCLOSEPOPUPSOVERWINDOW )
{
   ImGuiWindow* ref_window = ( ImGuiWindow* ) hb_parptr( 1 );
   bool restore_focus_to_window_under_popup = hb_parl( 2 );
   igClosePopupsOverWindow(ref_window,restore_focus_to_window_under_popup);
}

/* bool igCollapseButton(ImGuiID id,const ImVec2 pos,ImGuiDockNode* dock_node) */
HB_FUNC( IGCOLLAPSEBUTTON )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   PHB_ITEM ppos = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   ImGuiDockNode* dock_node = ( ImGuiDockNode* ) hb_parptr( 3 );
   bool ret = igCollapseButton(id,pos,dock_node);
   hb_retl( ret );
}

/* bool igCollapsingHeader_TreeNodeFlags(const char* label,ImGuiTreeNodeFlags flags) */
HB_FUNC( IGCOLLAPSINGHEADERTREENODEFLAGS )
{
   const char* label = hb_parcx( 1 );
   ImGuiTreeNodeFlags flags = ( ImGuiTreeNodeFlags ) hb_parni( 2 );
   bool ret = igCollapsingHeader_TreeNodeFlags(label,flags);
   hb_retl( ret );
}

/* bool igCollapsingHeader_BoolPtr(const char* label,bool* p_visible,ImGuiTreeNodeFlags flags) */
HB_FUNC( IGCOLLAPSINGHEADERBOOLPTR )
{
   const char* label = hb_parcx( 1 );
   bool /* @ */ _p_visible = hb_parl( 2 );
   bool * p_visible = &_p_visible;
   ImGuiTreeNodeFlags flags = ( ImGuiTreeNodeFlags ) hb_parni( 3 );
   bool ret = igCollapsingHeader_BoolPtr(label,p_visible,flags);
   hb_itemPutL( hb_paramError( 2 ), _p_visible );
   hb_retl( ret );
}

/* bool igColorButton(const char* desc_id,const ImVec4 col,ImGuiColorEditFlags flags,ImVec2 size) */
HB_FUNC( IGCOLORBUTTON )
{
   const char* desc_id = hb_parcx( 1 );
   PHB_ITEM pcol = hb_param( 2, HB_IT_ARRAY );
   const ImVec4 col = ImVec4{ _paf( pcol, 1 ), _paf( pcol, 2 ), _paf( pcol, 3 ), _paf( pcol, 4 ) };
   ImGuiColorEditFlags flags = ( ImGuiColorEditFlags ) hb_parni( 3 );
   PHB_ITEM psize = hb_param( 4, HB_IT_ARRAY );
   ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   bool ret = igColorButton(desc_id,col,flags,size);
   hb_retl( ret );
}

/* ImU32 igColorConvertFloat4ToU32(const ImVec4 in) */
HB_FUNC( IGCOLORCONVERTFLOAT4TOU32 )
{
   PHB_ITEM pin = hb_param( 1, HB_IT_ARRAY );
   const ImVec4 in = ImVec4{ _paf( pin, 1 ), _paf( pin, 2 ), _paf( pin, 3 ), _paf( pin, 4 ) };
   ImU32 ret = igColorConvertFloat4ToU32(in);
   hb_retnl( ( HB_LONG ) ret );
}

/* void igColorConvertHSVtoRGB(float h,float s,float v,float* out_r,float* out_g,float* out_b) */
HB_FUNC( IGCOLORCONVERTHSVTORGB )
{
   float h = ( float ) hb_parnd( 1 );
   float s = ( float ) hb_parnd( 2 );
   float v = ( float ) hb_parnd( 3 );
   float _out_r;
   float* out_r = &_out_r;
   float _out_g;
   float* out_g = &_out_g;
   float _out_b;
   float* out_b = &_out_b;
   igColorConvertHSVtoRGB(h,s,v,out_r,out_g,out_b);
   hb_itemPutND( hb_paramError( 4 ), ( double ) _out_r );
   hb_itemPutND( hb_paramError( 5 ), ( double ) _out_g );
   hb_itemPutND( hb_paramError( 6 ), ( double ) _out_b );
}

/* void igColorConvertRGBtoHSV(float r,float g,float b,float* out_h,float* out_s,float* out_v) */
HB_FUNC( IGCOLORCONVERTRGBTOHSV )
{
   float r = ( float ) hb_parnd( 1 );
   float g = ( float ) hb_parnd( 2 );
   float b = ( float ) hb_parnd( 3 );
   float _out_h;
   float* out_h = &_out_h;
   float _out_s;
   float* out_s = &_out_s;
   float _out_v;
   float* out_v = &_out_v;
   igColorConvertRGBtoHSV(r,g,b,out_h,out_s,out_v);
   hb_itemPutND( hb_paramError( 4 ), ( double ) _out_h );
   hb_itemPutND( hb_paramError( 5 ), ( double ) _out_s );
   hb_itemPutND( hb_paramError( 6 ), ( double ) _out_v );
}

/* void igColorConvertU32ToFloat4(ImVec4 *pOut,ImU32 in) */
HB_FUNC( IGCOLORCONVERTU32TOFLOAT4 )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec4 pOut;
   ImU32 in = ( HB_U32 ) hb_parnl( 2 );
   igColorConvertU32ToFloat4(&pOut,in);
   _ImVec4toA( &pOut, pOutItem );
}

/* bool igColorEdit3(const char* label,float col[3],ImGuiColorEditFlags flags) */
HB_FUNC( IGCOLOREDIT3 )
{
   const char* label = hb_parcx( 1 );
   float * col;
   PHB_IG_FLOATS _col = hb_ig_floats_par( 2 );
   ImGuiColorEditFlags flags = ( ImGuiColorEditFlags ) hb_parni( 3 );
   static float s_col[3] = { 0,0,0 };
   if( _col && _col->nSize >= 3 )
      col = _col->pBuf;
   else
      col = &s_col[0];
   bool ret = igColorEdit3(label,col,flags);
   hb_retl( ret );
}

/* bool igColorEdit4(const char* label,float col[4],ImGuiColorEditFlags flags) */
HB_FUNC( IGCOLOREDIT4 )
{
   const char* label = hb_parcx( 1 );
   float * col;
   PHB_IG_FLOATS _col = hb_ig_floats_par( 2 );
   ImGuiColorEditFlags flags = ( ImGuiColorEditFlags ) hb_parni( 3 );
   static float s_col[4] = { 0,0,0,0 };
   if( _col && _col->nSize >= 4 )
      col = _col->pBuf;
   else
      col = &s_col[0];
   bool ret = igColorEdit4(label,col,flags);
   hb_retl( ret );
}

/* void igColorEditOptionsPopup(const float* col,ImGuiColorEditFlags flags) */
HB_FUNC( IGCOLOREDITOPTIONSPOPUP )
{
   const float* col = ( const float* ) hb_parptr( 1 );
   ImGuiColorEditFlags flags = ( ImGuiColorEditFlags ) hb_parni( 2 );
   igColorEditOptionsPopup(col,flags);
}

/* bool igColorPicker3(const char* label,float col[3],ImGuiColorEditFlags flags) */
HB_FUNC( IGCOLORPICKER3 )
{
   const char* label = hb_parcx( 1 );
   float * col;
   PHB_IG_FLOATS _col = hb_ig_floats_par( 2 );
   ImGuiColorEditFlags flags = ( ImGuiColorEditFlags ) hb_parni( 3 );
   static float s_col[3] = { 0,0,0 };
   if( _col && _col->nSize >= 3 )
      col = _col->pBuf;
   else
      col = &s_col[0];
   bool ret = igColorPicker3(label,col,flags);
   hb_retl( ret );
}

/* bool igColorPicker4(const char* label,float col[4],ImGuiColorEditFlags flags,const float* ref_col) */
HB_FUNC( IGCOLORPICKER4 )
{
   const char* label = hb_parcx( 1 );
   float * col;
   PHB_IG_FLOATS _col = hb_ig_floats_par( 2 );
   ImGuiColorEditFlags flags = ( ImGuiColorEditFlags ) hb_parni( 3 );
   const float* ref_col = ( const float* ) hb_parptr( 4 );
   static float s_col[4] = { 0,0,0,0 };
   if( _col && _col->nSize >= 4 )
      col = _col->pBuf;
   else
      col = &s_col[0];
   bool ret = igColorPicker4(label,col,flags,ref_col);
   hb_retl( ret );
}

/* void igColorPickerOptionsPopup(const float* ref_col,ImGuiColorEditFlags flags) */
HB_FUNC( IGCOLORPICKEROPTIONSPOPUP )
{
   const float* ref_col = ( const float* ) hb_parptr( 1 );
   ImGuiColorEditFlags flags = ( ImGuiColorEditFlags ) hb_parni( 2 );
   igColorPickerOptionsPopup(ref_col,flags);
}

/* void igColorTooltip(const char* text,const float* col,ImGuiColorEditFlags flags) */
HB_FUNC( IGCOLORTOOLTIP )
{
   const char* text = hb_parcx( 1 );
   const float* col = ( const float* ) hb_parptr( 2 );
   ImGuiColorEditFlags flags = ( ImGuiColorEditFlags ) hb_parni( 3 );
   igColorTooltip(text,col,flags);
}

/* void igColumns(int count,const char* id,bool border) */
HB_FUNC( IGCOLUMNS )
{
   int count = hb_parni( 1 );
   const char* id = hb_parcx( 2 );
   bool border = hb_parldef( 3, 1 );
   igColumns(count,id,border);
}

/* bool igCombo_Str_arr(const char* label,int* current_item,const char* const items[],int items_count,int popup_max_height_in_items) */
HB_FUNC( IGCOMBO_STRARR )
{
   const char* label = hb_parcx( 1 );
   int /* @ */ _current_item = hb_parni( 2 );
   int * current_item = &_current_item;
   const char* const items[] = { 0 };
   int items_count = hb_parni( 4 );
   int popup_max_height_in_items = hb_parni( 5 );
   bool ret = igCombo_Str_arr(label,current_item,items,items_count,popup_max_height_in_items);
   hb_itemPutNI( hb_paramError( 2 ), _current_item );
   hb_retl( ret );
}

/* bool igCombo_Str(const char* label,int* current_item,const char* items_separated_by_zeros,int popup_max_height_in_items) */
HB_FUNC( IGCOMBOSTR )
{
   const char* label = hb_parcx( 1 );
   int /* @ */ _current_item = hb_parni( 2 );
   int * current_item = &_current_item;
   const char* items_separated_by_zeros = hb_parcx( 3 );
   int popup_max_height_in_items = hb_parni( 4 );
   bool ret = igCombo_Str(label,current_item,items_separated_by_zeros,popup_max_height_in_items);
   hb_itemPutNI( hb_paramError( 2 ), _current_item );
   hb_retl( ret );
}

/* bool igCombo_FnBoolPtr(const char* label,int* current_item,bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int popup_max_height_in_items) */
HB_FUNC( IGCOMBOFNBOOLPTR )
{
   const char* label = hb_parcx( 1 );
   int /* @ */ _current_item = hb_parni( 2 );
   int * current_item = &_current_item;
   void* data = ( void* ) hb_parptr( 4 );
   int items_count = hb_parni( 5 );
   int popup_max_height_in_items = hb_parni( 6 );
   bool ret = igCombo_FnBoolPtr(label,current_item,&hb_ig_items_getter,data,items_count,popup_max_height_in_items);
   hb_itemPutNI( hb_paramError( 2 ), _current_item );
   hb_retl( ret );
}

/* ImGuiContext* igCreateContext(ImFontAtlas* shared_font_atlas) */
HB_FUNC( IGCREATECONTEXT )
{
   ImFontAtlas* shared_font_atlas = ( ImFontAtlas* ) hb_parptr( 1 );
   ImGuiContext* ret = igCreateContext(shared_font_atlas);
   hb_retptr( ( void * ) ret );
}

/* ImGuiWindowSettings* igCreateNewWindowSettings(const char* name) */
HB_FUNC( IGCREATENEWWINDOWSETTINGS )
{
   const char* name = hb_parcx( 1 );
   ImGuiWindowSettings* ret = igCreateNewWindowSettings(name);
   hb_retptr( ( void * ) ret );
}

/* void igDataTypeApplyOp(ImGuiDataType data_type,int op,void* output,const void* arg_1,const void* arg_2) */
HB_FUNC( IGDATATYPEAPPLYOP )
{
   ImGuiDataType data_type = ( ImGuiDataType ) hb_parni( 1 );
   int op = hb_parni( 2 );
   void* output = ( void* ) hb_parptr( 3 );
   const void* arg_1 = ( const void* ) hb_parptr( 4 );
   const void* arg_2 = ( const void* ) hb_parptr( 5 );
   igDataTypeApplyOp(data_type,op,output,arg_1,arg_2);
}

/* bool igDataTypeApplyOpFromText(const char* buf,const char* initial_value_buf,ImGuiDataType data_type,void* p_data,const char* format) */
HB_FUNC( IGDATATYPEAPPLYOPFROMTEXT )
{
   const char* buf = hb_parcx( 1 );
   const char* initial_value_buf = hb_parcx( 2 );
   ImGuiDataType data_type = ( ImGuiDataType ) hb_parni( 3 );
   void* p_data = ( void* ) hb_parptr( 4 );
   const char* format = hb_parcx( 5 );
   bool ret = igDataTypeApplyOpFromText(buf,initial_value_buf,data_type,p_data,format);
   hb_retl( ret );
}

/* bool igDataTypeClamp(ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max) */
HB_FUNC( IGDATATYPECLAMP )
{
   ImGuiDataType data_type = ( ImGuiDataType ) hb_parni( 1 );
   void* p_data = ( void* ) hb_parptr( 2 );
   const void* p_min = ( const void* ) hb_parptr( 3 );
   const void* p_max = ( const void* ) hb_parptr( 4 );
   bool ret = igDataTypeClamp(data_type,p_data,p_min,p_max);
   hb_retl( ret );
}

/* int igDataTypeCompare(ImGuiDataType data_type,const void* arg_1,const void* arg_2) */
HB_FUNC( IGDATATYPECOMPARE )
{
   ImGuiDataType data_type = ( ImGuiDataType ) hb_parni( 1 );
   const void* arg_1 = ( const void* ) hb_parptr( 2 );
   const void* arg_2 = ( const void* ) hb_parptr( 3 );
   int ret = igDataTypeCompare(data_type,arg_1,arg_2);
   hb_retni( ret );
}

/* int igDataTypeFormatString(char* buf,int buf_size,ImGuiDataType data_type,const void* p_data,const char* format) */
HB_FUNC( IGDATATYPEFORMATSTRING )
{
   char* buf = hb_itemGetC( hb_paramError( 1 ) );
   int buf_size = hb_parni( 2 );
   ImGuiDataType data_type = ( ImGuiDataType ) hb_parni( 3 );
   const void* p_data = ( const void* ) hb_parptr( 4 );
   const char* format = hb_parcx( 5 );
   int ret = igDataTypeFormatString(buf,buf_size,data_type,p_data,format);
   hb_itemPutC( hb_paramError( 1 ), buf );
   hb_xfree( buf );
   hb_retni( ret );
}

/* const ImGuiDataTypeInfo* igDataTypeGetInfo(ImGuiDataType data_type) */
HB_FUNC( IGDATATYPEGETINFO )
{
   ImGuiDataType data_type = ( ImGuiDataType ) hb_parni( 1 );
   const ImGuiDataTypeInfo* ret = igDataTypeGetInfo(data_type);
   hb_retptr( ( void * ) ret );
}

/* bool igDebugCheckVersionAndDataLayout(const char* version_str,size_t sz_io,size_t sz_style,size_t sz_vec2,size_t sz_vec4,size_t sz_drawvert,size_t sz_drawidx) */
HB_FUNC( IGDEBUGCHECKVERSIONANDDATALAYOUT )
{
   const char* version_str = hb_parcx( 1 );
   size_t sz_io = ( size_t ) hb_parnl( 2 );
   size_t sz_style = ( size_t ) hb_parnl( 3 );
   size_t sz_vec2 = ( size_t ) hb_parnl( 4 );
   size_t sz_vec4 = ( size_t ) hb_parnl( 5 );
   size_t sz_drawvert = ( size_t ) hb_parnl( 6 );
   size_t sz_drawidx = ( size_t ) hb_parnl( 7 );
   bool ret = igDebugCheckVersionAndDataLayout(version_str,sz_io,sz_style,sz_vec2,sz_vec4,sz_drawvert,sz_drawidx);
   hb_retl( ret );
}

/* void igDebugDrawItemRect(ImU32 col) */
HB_FUNC( IGDEBUGDRAWITEMRECT )
{
   ImU32 col = ( HB_U32 ) hb_parnl( 1 );
   igDebugDrawItemRect(col);
}

/* void igDebugHookIdInfo(ImGuiID id,ImGuiDataType data_type,const void* data_id,const void* data_id_end) */
HB_FUNC( IGDEBUGHOOKIDINFO )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   ImGuiDataType data_type = ( ImGuiDataType ) hb_parni( 2 );
   const void* data_id = ( const void* ) hb_parptr( 3 );
   const void* data_id_end = ( const void* ) hb_parptr( 4 );
   igDebugHookIdInfo(id,data_type,data_id,data_id_end);
}

/* void igDebugNodeColumns(ImGuiOldColumns* columns) */
HB_FUNC( IGDEBUGNODECOLUMNS )
{
   ImGuiOldColumns* columns = ( ImGuiOldColumns* ) hb_parptr( 1 );
   igDebugNodeColumns(columns);
}

/* void igDebugNodeDockNode(ImGuiDockNode* node,const char* label) */
HB_FUNC( IGDEBUGNODEDOCKNODE )
{
   ImGuiDockNode* node = ( ImGuiDockNode* ) hb_parptr( 1 );
   const char* label = hb_parcx( 2 );
   igDebugNodeDockNode(node,label);
}

/* void igDebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList* out_draw_list,const ImDrawList* draw_list,const ImDrawCmd* draw_cmd,bool show_mesh,bool show_aabb) */
/* TOFIX _out_draw_list invalid (not a struct)
HB_FUNC( IGDEBUGNODEDRAWCMDSHOWMESHANDBOUNDINGBOX )
{
   ImDrawList _out_draw_list;
   ImDrawList* out_draw_list = &_out_draw_list;
   const ImDrawList* draw_list = ( const ImDrawList* ) hb_parptr( 2 );
   const ImDrawCmd* draw_cmd = ( const ImDrawCmd* ) hb_parptr( 3 );
   bool show_mesh = hb_parl( 4 );
   bool show_aabb = hb_parl( 5 );
   igDebugNodeDrawCmdShowMeshAndBoundingBox(out_draw_list,draw_list,draw_cmd,show_mesh,show_aabb);
}
*/

/* void igDebugNodeDrawList(ImGuiWindow* window,ImGuiViewportP* viewport,const ImDrawList* draw_list,const char* label) */
HB_FUNC( IGDEBUGNODEDRAWLIST )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   ImGuiViewportP* viewport = ( ImGuiViewportP* ) hb_parptr( 2 );
   const ImDrawList* draw_list = ( const ImDrawList* ) hb_parptr( 3 );
   const char* label = hb_parcx( 4 );
   igDebugNodeDrawList(window,viewport,draw_list,label);
}

/* void igDebugNodeFont(ImFont* font) */
HB_FUNC( IGDEBUGNODEFONT )
{
   ImFont* font = ( ImFont* ) hb_parptr( 1 );
   igDebugNodeFont(font);
}

/* void igDebugNodeStorage(ImGuiStorage* storage,const char* label) */
HB_FUNC( IGDEBUGNODESTORAGE )
{
   ImGuiStorage* storage = ( ImGuiStorage* ) hb_parptr( 1 );
   const char* label = hb_parcx( 2 );
   igDebugNodeStorage(storage,label);
}

/* void igDebugNodeTabBar(ImGuiTabBar* tab_bar,const char* label) */
HB_FUNC( IGDEBUGNODETABBAR )
{
   ImGuiTabBar* tab_bar = ( ImGuiTabBar* ) hb_parptr( 1 );
   const char* label = hb_parcx( 2 );
   igDebugNodeTabBar(tab_bar,label);
}

/* void igDebugNodeTable(ImGuiTable* table) */
HB_FUNC( IGDEBUGNODETABLE )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igDebugNodeTable(table);
}

/* void igDebugNodeTableSettings(ImGuiTableSettings* settings) */
HB_FUNC( IGDEBUGNODETABLESETTINGS )
{
   ImGuiTableSettings* settings = ( ImGuiTableSettings* ) hb_parptr( 1 );
   igDebugNodeTableSettings(settings);
}

/* void igDebugNodeViewport(ImGuiViewportP* viewport) */
HB_FUNC( IGDEBUGNODEVIEWPORT )
{
   ImGuiViewportP* viewport = ( ImGuiViewportP* ) hb_parptr( 1 );
   igDebugNodeViewport(viewport);
}

/* void igDebugNodeWindow(ImGuiWindow* window,const char* label) */
HB_FUNC( IGDEBUGNODEWINDOW )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   const char* label = hb_parcx( 2 );
   igDebugNodeWindow(window,label);
}

/* void igDebugNodeWindowSettings(ImGuiWindowSettings* settings) */
HB_FUNC( IGDEBUGNODEWINDOWSETTINGS )
{
   ImGuiWindowSettings* settings = ( ImGuiWindowSettings* ) hb_parptr( 1 );
   igDebugNodeWindowSettings(settings);
}

/* void igDebugNodeWindowsList(ImVector_ImGuiWindowPtr* windows,const char* label) */
HB_FUNC( IGDEBUGNODEWINDOWSLIST )
{
   ImVector_ImGuiWindowPtr* windows = ( ImVector_ImGuiWindowPtr* ) hb_parptr( 1 );
   const char* label = hb_parcx( 2 );
   igDebugNodeWindowsList(windows,label);
}

/* void igDebugRenderViewportThumbnail(ImDrawList* draw_list,ImGuiViewportP* viewport,const ImRect bb) */
HB_FUNC( IGDEBUGRENDERVIEWPORTTHUMBNAIL )
{
   ImDrawList* draw_list = ( ImDrawList* ) hb_parptr( 1 );
   ImGuiViewportP* viewport = ( ImGuiViewportP* ) hb_parptr( 2 );
   PHB_ITEM pbb = hb_param( 3, HB_IT_ARRAY );
   const ImRect bb = ImRect{ ImVec2{ _paf( pbb, 1 ), _paf( pbb, 2 ) }, ImVec2{ _paf( pbb, 3 ), _paf( pbb, 4 ) } };
   igDebugRenderViewportThumbnail(draw_list,viewport,bb);
}

/* void igDebugStartItemPicker() */
HB_FUNC( IGDEBUGSTARTITEMPICKER )
{
   igDebugStartItemPicker();
}

/* void igDestroyContext(ImGuiContext* ctx) */
HB_FUNC( IGDESTROYCONTEXT )
{
   ImGuiContext* ctx = ( ImGuiContext* ) hb_parptr( 1 );
   igDestroyContext(ctx);
}

/* void igDestroyPlatformWindow(ImGuiViewportP* viewport) */
HB_FUNC( IGDESTROYPLATFORMWINDOW )
{
   ImGuiViewportP* viewport = ( ImGuiViewportP* ) hb_parptr( 1 );
   igDestroyPlatformWindow(viewport);
}

/* void igDestroyPlatformWindows() */
HB_FUNC( IGDESTROYPLATFORMWINDOWS )
{
   igDestroyPlatformWindows();
}

/* ImGuiID igDockBuilderAddNode(ImGuiID node_id,ImGuiDockNodeFlags flags) */
HB_FUNC( IGDOCKBUILDERADDNODE )
{
   ImGuiID node_id = ( ImGuiID ) hb_parni( 1 );
   ImGuiDockNodeFlags flags = ( ImGuiDockNodeFlags ) hb_parni( 2 );
   ImGuiID ret = igDockBuilderAddNode(node_id,flags);
   hb_retni( ( int ) ret );
}

/* void igDockBuilderCopyDockSpace(ImGuiID src_dockspace_id,ImGuiID dst_dockspace_id,ImVector_const_charPtr* in_window_remap_pairs) */
HB_FUNC( IGDOCKBUILDERCOPYDOCKSPACE )
{
   ImGuiID src_dockspace_id = ( ImGuiID ) hb_parni( 1 );
   ImGuiID dst_dockspace_id = ( ImGuiID ) hb_parni( 2 );
   ImVector_const_charPtr* in_window_remap_pairs = ( ImVector_const_charPtr* ) hb_parptr( 3 );
   igDockBuilderCopyDockSpace(src_dockspace_id,dst_dockspace_id,in_window_remap_pairs);
}

/* void igDockBuilderCopyNode(ImGuiID src_node_id,ImGuiID dst_node_id,ImVector_ImGuiID* out_node_remap_pairs) */
HB_FUNC( IGDOCKBUILDERCOPYNODE )
{
   ImGuiID src_node_id = ( ImGuiID ) hb_parni( 1 );
   ImGuiID dst_node_id = ( ImGuiID ) hb_parni( 2 );
   ImVector_ImGuiID _out_node_remap_pairs;
   ImVector_ImGuiID* out_node_remap_pairs = &_out_node_remap_pairs;
   igDockBuilderCopyNode(src_node_id,dst_node_id,out_node_remap_pairs);
}

/* void igDockBuilderCopyWindowSettings(const char* src_name,const char* dst_name) */
HB_FUNC( IGDOCKBUILDERCOPYWINDOWSETTINGS )
{
   const char* src_name = hb_parcx( 1 );
   const char* dst_name = hb_parcx( 2 );
   igDockBuilderCopyWindowSettings(src_name,dst_name);
}

/* void igDockBuilderDockWindow(const char* window_name,ImGuiID node_id) */
HB_FUNC( IGDOCKBUILDERDOCKWINDOW )
{
   const char* window_name = hb_parcx( 1 );
   ImGuiID node_id = ( ImGuiID ) hb_parni( 2 );
   igDockBuilderDockWindow(window_name,node_id);
}

/* void igDockBuilderFinish(ImGuiID node_id) */
HB_FUNC( IGDOCKBUILDERFINISH )
{
   ImGuiID node_id = ( ImGuiID ) hb_parni( 1 );
   igDockBuilderFinish(node_id);
}

/* ImGuiDockNode* igDockBuilderGetCentralNode(ImGuiID node_id) */
HB_FUNC( IGDOCKBUILDERGETCENTRALNODE )
{
   ImGuiID node_id = ( ImGuiID ) hb_parni( 1 );
   ImGuiDockNode* ret = igDockBuilderGetCentralNode(node_id);
   hb_retptr( ( void * ) ret );
}

/* ImGuiDockNode* igDockBuilderGetNode(ImGuiID node_id) */
HB_FUNC( IGDOCKBUILDERGETNODE )
{
   ImGuiID node_id = ( ImGuiID ) hb_parni( 1 );
   ImGuiDockNode* ret = igDockBuilderGetNode(node_id);
   hb_retptr( ( void * ) ret );
}

/* void igDockBuilderRemoveNode(ImGuiID node_id) */
HB_FUNC( IGDOCKBUILDERREMOVENODE )
{
   ImGuiID node_id = ( ImGuiID ) hb_parni( 1 );
   igDockBuilderRemoveNode(node_id);
}

/* void igDockBuilderRemoveNodeChildNodes(ImGuiID node_id) */
HB_FUNC( IGDOCKBUILDERREMOVENODECHILDNODES )
{
   ImGuiID node_id = ( ImGuiID ) hb_parni( 1 );
   igDockBuilderRemoveNodeChildNodes(node_id);
}

/* void igDockBuilderRemoveNodeDockedWindows(ImGuiID node_id,bool clear_settings_refs) */
HB_FUNC( IGDOCKBUILDERREMOVENODEDOCKEDWINDOWS )
{
   ImGuiID node_id = ( ImGuiID ) hb_parni( 1 );
   bool clear_settings_refs = hb_parldef( 2, 1 );
   igDockBuilderRemoveNodeDockedWindows(node_id,clear_settings_refs);
}

/* void igDockBuilderSetNodePos(ImGuiID node_id,ImVec2 pos) */
HB_FUNC( IGDOCKBUILDERSETNODEPOS )
{
   ImGuiID node_id = ( ImGuiID ) hb_parni( 1 );
   PHB_ITEM ppos = hb_param( 2, HB_IT_ARRAY );
   ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   igDockBuilderSetNodePos(node_id,pos);
}

/* void igDockBuilderSetNodeSize(ImGuiID node_id,ImVec2 size) */
HB_FUNC( IGDOCKBUILDERSETNODESIZE )
{
   ImGuiID node_id = ( ImGuiID ) hb_parni( 1 );
   PHB_ITEM psize = hb_param( 2, HB_IT_ARRAY );
   ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   igDockBuilderSetNodeSize(node_id,size);
}

/* ImGuiID igDockBuilderSplitNode(ImGuiID node_id,ImGuiDir split_dir,float size_ratio_for_node_at_dir,ImGuiID* out_id_at_dir,ImGuiID* out_id_at_opposite_dir) */
HB_FUNC( IGDOCKBUILDERSPLITNODE )
{
   ImGuiID node_id = ( ImGuiID ) hb_parni( 1 );
   ImGuiDir split_dir = ( ImGuiDir ) hb_parni( 2 );
   float size_ratio_for_node_at_dir = ( float ) hb_parnd( 3 );
   ImGuiID _out_id_at_dir;
   ImGuiID* out_id_at_dir = &_out_id_at_dir;
   ImGuiID _out_id_at_opposite_dir;
   ImGuiID* out_id_at_opposite_dir = &_out_id_at_opposite_dir;
   ImGuiID ret = igDockBuilderSplitNode(node_id,split_dir,size_ratio_for_node_at_dir,out_id_at_dir,out_id_at_opposite_dir);
   hb_retni( ( int ) ret );
}

/* bool igDockContextCalcDropPosForDocking(ImGuiWindow* target,ImGuiDockNode* target_node,ImGuiWindow* payload,ImGuiDir split_dir,bool split_outer,ImVec2* out_pos) */
HB_FUNC( IGDOCKCONTEXTCALCDROPPOSFORDOCKING )
{
   ImGuiWindow* target = ( ImGuiWindow* ) hb_parptr( 1 );
   ImGuiDockNode* target_node = ( ImGuiDockNode* ) hb_parptr( 2 );
   ImGuiWindow* payload = ( ImGuiWindow* ) hb_parptr( 3 );
   ImGuiDir split_dir = ( ImGuiDir ) hb_parni( 4 );
   bool split_outer = hb_parl( 5 );
   ImVec2 _out_pos;
   ImVec2* out_pos = &_out_pos;
   bool ret = igDockContextCalcDropPosForDocking(target,target_node,payload,split_dir,split_outer,out_pos);
   hb_retl( ret );
}

/* void igDockContextClearNodes(ImGuiContext* ctx,ImGuiID root_id,bool clear_settings_refs) */
HB_FUNC( IGDOCKCONTEXTCLEARNODES )
{
   ImGuiContext* ctx = ( ImGuiContext* ) hb_parptr( 1 );
   ImGuiID root_id = ( ImGuiID ) hb_parni( 2 );
   bool clear_settings_refs = hb_parl( 3 );
   igDockContextClearNodes(ctx,root_id,clear_settings_refs);
}

/* ImGuiID igDockContextGenNodeID(ImGuiContext* ctx) */
HB_FUNC( IGDOCKCONTEXTGENNODEID )
{
   ImGuiContext* ctx = ( ImGuiContext* ) hb_parptr( 1 );
   ImGuiID ret = igDockContextGenNodeID(ctx);
   hb_retni( ( int ) ret );
}

/* void igDockContextInitialize(ImGuiContext* ctx) */
HB_FUNC( IGDOCKCONTEXTINITIALIZE )
{
   ImGuiContext* ctx = ( ImGuiContext* ) hb_parptr( 1 );
   igDockContextInitialize(ctx);
}

/* void igDockContextNewFrameUpdateDocking(ImGuiContext* ctx) */
HB_FUNC( IGDOCKCONTEXTNEWFRAMEUPDATEDOCKING )
{
   ImGuiContext* ctx = ( ImGuiContext* ) hb_parptr( 1 );
   igDockContextNewFrameUpdateDocking(ctx);
}

/* void igDockContextNewFrameUpdateUndocking(ImGuiContext* ctx) */
HB_FUNC( IGDOCKCONTEXTNEWFRAMEUPDATEUNDOCKING )
{
   ImGuiContext* ctx = ( ImGuiContext* ) hb_parptr( 1 );
   igDockContextNewFrameUpdateUndocking(ctx);
}

/* void igDockContextQueueDock(ImGuiContext* ctx,ImGuiWindow* target,ImGuiDockNode* target_node,ImGuiWindow* payload,ImGuiDir split_dir,float split_ratio,bool split_outer) */
HB_FUNC( IGDOCKCONTEXTQUEUEDOCK )
{
   ImGuiContext* ctx = ( ImGuiContext* ) hb_parptr( 1 );
   ImGuiWindow* target = ( ImGuiWindow* ) hb_parptr( 2 );
   ImGuiDockNode* target_node = ( ImGuiDockNode* ) hb_parptr( 3 );
   ImGuiWindow* payload = ( ImGuiWindow* ) hb_parptr( 4 );
   ImGuiDir split_dir = ( ImGuiDir ) hb_parni( 5 );
   float split_ratio = ( float ) hb_parnd( 6 );
   bool split_outer = hb_parl( 7 );
   igDockContextQueueDock(ctx,target,target_node,payload,split_dir,split_ratio,split_outer);
}

/* void igDockContextQueueUndockNode(ImGuiContext* ctx,ImGuiDockNode* node) */
HB_FUNC( IGDOCKCONTEXTQUEUEUNDOCKNODE )
{
   ImGuiContext* ctx = ( ImGuiContext* ) hb_parptr( 1 );
   ImGuiDockNode* node = ( ImGuiDockNode* ) hb_parptr( 2 );
   igDockContextQueueUndockNode(ctx,node);
}

/* void igDockContextQueueUndockWindow(ImGuiContext* ctx,ImGuiWindow* window) */
HB_FUNC( IGDOCKCONTEXTQUEUEUNDOCKWINDOW )
{
   ImGuiContext* ctx = ( ImGuiContext* ) hb_parptr( 1 );
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 2 );
   igDockContextQueueUndockWindow(ctx,window);
}

/* void igDockContextRebuildNodes(ImGuiContext* ctx) */
HB_FUNC( IGDOCKCONTEXTREBUILDNODES )
{
   ImGuiContext* ctx = ( ImGuiContext* ) hb_parptr( 1 );
   igDockContextRebuildNodes(ctx);
}

/* void igDockContextShutdown(ImGuiContext* ctx) */
HB_FUNC( IGDOCKCONTEXTSHUTDOWN )
{
   ImGuiContext* ctx = ( ImGuiContext* ) hb_parptr( 1 );
   igDockContextShutdown(ctx);
}

/* bool igDockNodeBeginAmendTabBar(ImGuiDockNode* node) */
HB_FUNC( IGDOCKNODEBEGINAMENDTABBAR )
{
   ImGuiDockNode* node = ( ImGuiDockNode* ) hb_parptr( 1 );
   bool ret = igDockNodeBeginAmendTabBar(node);
   hb_retl( ret );
}

/* void igDockNodeEndAmendTabBar() */
HB_FUNC( IGDOCKNODEENDAMENDTABBAR )
{
   igDockNodeEndAmendTabBar();
}

/* int igDockNodeGetDepth(const ImGuiDockNode* node) */
HB_FUNC( IGDOCKNODEGETDEPTH )
{
   const ImGuiDockNode* node = ( const ImGuiDockNode* ) hb_parptr( 1 );
   int ret = igDockNodeGetDepth(node);
   hb_retni( ret );
}

/* ImGuiDockNode* igDockNodeGetRootNode(ImGuiDockNode* node) */
HB_FUNC( IGDOCKNODEGETROOTNODE )
{
   ImGuiDockNode* node = ( ImGuiDockNode* ) hb_parptr( 1 );
   ImGuiDockNode* ret = igDockNodeGetRootNode(node);
   hb_retptr( ( void * ) ret );
}

/* ImGuiID igDockNodeGetWindowMenuButtonId(const ImGuiDockNode* node) */
HB_FUNC( IGDOCKNODEGETWINDOWMENUBUTTONID )
{
   const ImGuiDockNode* node = ( const ImGuiDockNode* ) hb_parptr( 1 );
   ImGuiID ret = igDockNodeGetWindowMenuButtonId(node);
   hb_retni( ( int ) ret );
}

/* ImGuiID igDockSpace(ImGuiID id,const ImVec2 size,ImGuiDockNodeFlags flags,const ImGuiWindowClass* window_class) */
HB_FUNC( IGDOCKSPACE )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   PHB_ITEM psize = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   ImGuiDockNodeFlags flags = ( ImGuiDockNodeFlags ) hb_parni( 3 );
   const ImGuiWindowClass* window_class = ( const ImGuiWindowClass* ) hb_parptr( 4 );
   ImGuiID ret = igDockSpace(id,size,flags,window_class);
   hb_retni( ( int ) ret );
}

/* ImGuiID igDockSpaceOverViewport(const ImGuiViewport* viewport,ImGuiDockNodeFlags flags,const ImGuiWindowClass* window_class) */
HB_FUNC( IGDOCKSPACEOVERVIEWPORT )
{
   const ImGuiViewport* viewport = ( const ImGuiViewport* ) hb_parptr( 1 );
   ImGuiDockNodeFlags flags = ( ImGuiDockNodeFlags ) hb_parni( 2 );
   const ImGuiWindowClass* window_class = ( const ImGuiWindowClass* ) hb_parptr( 3 );
   ImGuiID ret = igDockSpaceOverViewport(viewport,flags,window_class);
   hb_retni( ( int ) ret );
}

/* bool igDragBehavior(ImGuiID id,ImGuiDataType data_type,void* p_v,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGDRAGBEHAVIOR )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   ImGuiDataType data_type = ( ImGuiDataType ) hb_parni( 2 );
   void* p_v = ( void* ) hb_parptr( 3 );
   float v_speed = ( float ) hb_parnd( 4 );
   const void* p_min = ( const void* ) hb_parptr( 5 );
   const void* p_max = ( const void* ) hb_parptr( 6 );
   const char* format = hb_parcx( 7 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 8 );
   bool ret = igDragBehavior(id,data_type,p_v,v_speed,p_min,p_max,format,flags);
   hb_retl( ret );
}

/* bool igDragFloat(const char* label,float* v,float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGDRAGFLOAT )
{
   const char* label = hb_parcx( 1 );
   float /* @ */ _v = ( float ) hb_parnd( 2 );
   float * v = &_v;
   float v_speed = ( float ) hb_parnd( 3 );
   float v_min = ( float ) hb_parnd( 4 );
   float v_max = ( float ) hb_parnd( 5 );
   const char* format = hb_parcx( 6 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 7 );
   bool ret = igDragFloat(label,v,v_speed,v_min,v_max,format,flags);
   hb_itemPutND( hb_paramError( 2 ), ( double ) _v );
   hb_retl( ret );
}

/* bool igDragFloat2(const char* label,float v[2],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGDRAGFLOAT2 )
{
   const char* label = hb_parcx( 1 );
   float * v;
   PHB_IG_FLOATS _v = hb_ig_floats_par( 2 );
   float v_speed = ( float ) hb_parnd( 3 );
   float v_min = ( float ) hb_parnd( 4 );
   float v_max = ( float ) hb_parnd( 5 );
   const char* format = hb_parcx( 6 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 7 );
   static float s_v[2] = { 0,0 };
   if( _v && _v->nSize >= 2 )
      v = _v->pBuf;
   else
      v = &s_v[0];
   bool ret = igDragFloat2(label,v,v_speed,v_min,v_max,format,flags);
   hb_retl( ret );
}

/* bool igDragFloat3(const char* label,float v[3],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGDRAGFLOAT3 )
{
   const char* label = hb_parcx( 1 );
   float * v;
   PHB_IG_FLOATS _v = hb_ig_floats_par( 2 );
   float v_speed = ( float ) hb_parnd( 3 );
   float v_min = ( float ) hb_parnd( 4 );
   float v_max = ( float ) hb_parnd( 5 );
   const char* format = hb_parcx( 6 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 7 );
   static float s_v[3] = { 0,0,0 };
   if( _v && _v->nSize >= 3 )
      v = _v->pBuf;
   else
      v = &s_v[0];
   bool ret = igDragFloat3(label,v,v_speed,v_min,v_max,format,flags);
   hb_retl( ret );
}

/* bool igDragFloat4(const char* label,float v[4],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGDRAGFLOAT4 )
{
   const char* label = hb_parcx( 1 );
   float * v;
   PHB_IG_FLOATS _v = hb_ig_floats_par( 2 );
   float v_speed = ( float ) hb_parnd( 3 );
   float v_min = ( float ) hb_parnd( 4 );
   float v_max = ( float ) hb_parnd( 5 );
   const char* format = hb_parcx( 6 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 7 );
   static float s_v[4] = { 0,0,0,0 };
   if( _v && _v->nSize >= 4 )
      v = _v->pBuf;
   else
      v = &s_v[0];
   bool ret = igDragFloat4(label,v,v_speed,v_min,v_max,format,flags);
   hb_retl( ret );
}

/* bool igDragFloatRange2(const char* label,float* v_current_min,float* v_current_max,float v_speed,float v_min,float v_max,const char* format,const char* format_max,ImGuiSliderFlags flags) */
HB_FUNC( IGDRAGFLOATRANGE2 )
{
   const char* label = hb_parcx( 1 );
   float /* @ */ _v_current_min = ( float ) hb_parnd( 2 );
   float * v_current_min = &_v_current_min;
   float /* @ */ _v_current_max = ( float ) hb_parnd( 3 );
   float * v_current_max = &_v_current_max;
   float v_speed = ( float ) hb_parnd( 4 );
   float v_min = ( float ) hb_parnd( 5 );
   float v_max = ( float ) hb_parnd( 6 );
   const char* format = hb_parcx( 7 );
   const char* format_max = hb_parcx( 8 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 9 );
   bool ret = igDragFloatRange2(label,v_current_min,v_current_max,v_speed,v_min,v_max,format,format_max,flags);
   hb_itemPutND( hb_paramError( 2 ), ( double ) _v_current_min );
   hb_itemPutND( hb_paramError( 3 ), ( double ) _v_current_max );
   hb_retl( ret );
}

/* bool igDragInt(const char* label,int* v,float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGDRAGINT )
{
   const char* label = hb_parcx( 1 );
   int /* @ */ _v = hb_parni( 2 );
   int * v = &_v;
   float v_speed = ( float ) hb_parnd( 3 );
   int v_min = hb_parni( 4 );
   int v_max = hb_parni( 5 );
   const char* format = hb_parcx( 6 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 7 );
   bool ret = igDragInt(label,v,v_speed,v_min,v_max,format,flags);
   hb_itemPutNI( hb_paramError( 2 ), _v );
   hb_retl( ret );
}

/* bool igDragInt2(const char* label,int v[2],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGDRAGINT2 )
{
   const char* label = hb_parcx( 1 );
   int * v;
   PHB_IG_INTS _v = hb_ig_ints_par( 2 );
   float v_speed = ( float ) hb_parnd( 3 );
   int v_min = hb_parni( 4 );
   int v_max = hb_parni( 5 );
   const char* format = hb_parcx( 6 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 7 );
   static int s_v[2] = { 0,0 };
   if( _v && _v->nSize >= 2 )
      v = _v->pBuf;
   else
      v = &s_v[0];
   bool ret = igDragInt2(label,v,v_speed,v_min,v_max,format,flags);
   hb_retl( ret );
}

/* bool igDragInt3(const char* label,int v[3],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGDRAGINT3 )
{
   const char* label = hb_parcx( 1 );
   int * v;
   PHB_IG_INTS _v = hb_ig_ints_par( 2 );
   float v_speed = ( float ) hb_parnd( 3 );
   int v_min = hb_parni( 4 );
   int v_max = hb_parni( 5 );
   const char* format = hb_parcx( 6 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 7 );
   static int s_v[3] = { 0,0,0 };
   if( _v && _v->nSize >= 3 )
      v = _v->pBuf;
   else
      v = &s_v[0];
   bool ret = igDragInt3(label,v,v_speed,v_min,v_max,format,flags);
   hb_retl( ret );
}

/* bool igDragInt4(const char* label,int v[4],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGDRAGINT4 )
{
   const char* label = hb_parcx( 1 );
   int * v;
   PHB_IG_INTS _v = hb_ig_ints_par( 2 );
   float v_speed = ( float ) hb_parnd( 3 );
   int v_min = hb_parni( 4 );
   int v_max = hb_parni( 5 );
   const char* format = hb_parcx( 6 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 7 );
   static int s_v[4] = { 0,0,0,0 };
   if( _v && _v->nSize >= 4 )
      v = _v->pBuf;
   else
      v = &s_v[0];
   bool ret = igDragInt4(label,v,v_speed,v_min,v_max,format,flags);
   hb_retl( ret );
}

/* bool igDragIntRange2(const char* label,int* v_current_min,int* v_current_max,float v_speed,int v_min,int v_max,const char* format,const char* format_max,ImGuiSliderFlags flags) */
HB_FUNC( IGDRAGINTRANGE2 )
{
   const char* label = hb_parcx( 1 );
   int /* @ */ _v_current_min = hb_parni( 2 );
   int * v_current_min = &_v_current_min;
   int /* @ */ _v_current_max = hb_parni( 3 );
   int * v_current_max = &_v_current_max;
   float v_speed = ( float ) hb_parnd( 4 );
   int v_min = hb_parni( 5 );
   int v_max = hb_parni( 6 );
   const char* format = hb_parcx( 7 );
   const char* format_max = hb_parcx( 8 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 9 );
   bool ret = igDragIntRange2(label,v_current_min,v_current_max,v_speed,v_min,v_max,format,format_max,flags);
   hb_itemPutNI( hb_paramError( 2 ), _v_current_min );
   hb_itemPutNI( hb_paramError( 3 ), _v_current_max );
   hb_retl( ret );
}

/* bool igDragScalar(const char* label,ImGuiDataType data_type,void* p_data,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGDRAGSCALAR )
{
   const char* label = hb_parcx( 1 );
   ImGuiDataType data_type = ( ImGuiDataType ) hb_parni( 2 );
   void* p_data = ( void* ) hb_parptr( 3 );
   float v_speed = ( float ) hb_parnd( 4 );
   const void* p_min = ( const void* ) hb_parptr( 5 );
   const void* p_max = ( const void* ) hb_parptr( 6 );
   const char* format = hb_parcx( 7 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 8 );
   bool ret = igDragScalar(label,data_type,p_data,v_speed,p_min,p_max,format,flags);
   hb_retl( ret );
}

/* bool igDragScalarN(const char* label,ImGuiDataType data_type,void* p_data,int components,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGDRAGSCALARN )
{
   const char* label = hb_parcx( 1 );
   ImGuiDataType data_type = ( ImGuiDataType ) hb_parni( 2 );
   void* p_data = ( void* ) hb_parptr( 3 );
   int components = hb_parni( 4 );
   float v_speed = ( float ) hb_parnd( 5 );
   const void* p_min = ( const void* ) hb_parptr( 6 );
   const void* p_max = ( const void* ) hb_parptr( 7 );
   const char* format = hb_parcx( 8 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 9 );
   bool ret = igDragScalarN(label,data_type,p_data,components,v_speed,p_min,p_max,format,flags);
   hb_retl( ret );
}

/* void igDummy(const ImVec2 size) */
HB_FUNC( IGDUMMY )
{
   PHB_ITEM psize = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   igDummy(size);
}

/* void igEnd() */
HB_FUNC( IGEND )
{
   igEnd();
}

/* void igEndChild() */
HB_FUNC( IGENDCHILD )
{
   igEndChild();
}

/* void igEndChildFrame() */
HB_FUNC( IGENDCHILDFRAME )
{
   igEndChildFrame();
}

/* void igEndColumns() */
HB_FUNC( IGENDCOLUMNS )
{
   igEndColumns();
}

/* void igEndCombo() */
HB_FUNC( IGENDCOMBO )
{
   igEndCombo();
}

/* void igEndComboPreview() */
HB_FUNC( IGENDCOMBOPREVIEW )
{
   igEndComboPreview();
}

/* void igEndDisabled() */
HB_FUNC( IGENDDISABLED )
{
   igEndDisabled();
}

/* void igEndDragDropSource() */
HB_FUNC( IGENDDRAGDROPSOURCE )
{
   igEndDragDropSource();
}

/* void igEndDragDropTarget() */
HB_FUNC( IGENDDRAGDROPTARGET )
{
   igEndDragDropTarget();
}

/* void igEndFrame() */
HB_FUNC( IGENDFRAME )
{
   igEndFrame();
}

/* void igEndGroup() */
HB_FUNC( IGENDGROUP )
{
   igEndGroup();
}

/* void igEndListBox() */
HB_FUNC( IGENDLISTBOX )
{
   igEndListBox();
}

/* void igEndMainMenuBar() */
HB_FUNC( IGENDMAINMENUBAR )
{
   igEndMainMenuBar();
}

/* void igEndMenu() */
HB_FUNC( IGENDMENU )
{
   igEndMenu();
}

/* void igEndMenuBar() */
HB_FUNC( IGENDMENUBAR )
{
   igEndMenuBar();
}

/* void igEndPopup() */
HB_FUNC( IGENDPOPUP )
{
   igEndPopup();
}

/* void igEndTabBar() */
HB_FUNC( IGENDTABBAR )
{
   igEndTabBar();
}

/* void igEndTabItem() */
HB_FUNC( IGENDTABITEM )
{
   igEndTabItem();
}

/* void igEndTable() */
HB_FUNC( IGENDTABLE )
{
   igEndTable();
}

/* void igEndTooltip() */
HB_FUNC( IGENDTOOLTIP )
{
   igEndTooltip();
}

/* void igErrorCheckEndFrameRecover(ImGuiErrorLogCallback log_callback,void* user_data) */
HB_FUNC( IGERRORCHECKENDFRAMERECOVER )
{
   ImGuiErrorLogCallback log_callback;
   void* user_data = ( void* ) hb_parptr( 2 );
   igErrorCheckEndFrameRecover(log_callback,user_data);
}

/* void igErrorCheckEndWindowRecover(ImGuiErrorLogCallback log_callback,void* user_data) */
HB_FUNC( IGERRORCHECKENDWINDOWRECOVER )
{
   ImGuiErrorLogCallback log_callback;
   void* user_data = ( void* ) hb_parptr( 2 );
   igErrorCheckEndWindowRecover(log_callback,user_data);
}

/* void igFindBestWindowPosForPopup(ImVec2 *pOut,ImGuiWindow* window) */
HB_FUNC( IGFINDBESTWINDOWPOSFORPOPUP )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 2 );
   igFindBestWindowPosForPopup(&pOut,window);
   _ImVec2toA( &pOut, pOutItem );
}

/* void igFindBestWindowPosForPopupEx(ImVec2 *pOut,const ImVec2 ref_pos,const ImVec2 size,ImGuiDir* last_dir,const ImRect r_outer,const ImRect r_avoid,ImGuiPopupPositionPolicy policy) */
HB_FUNC( IGFINDBESTWINDOWPOSFORPOPUPEX )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   PHB_ITEM pref_pos = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 ref_pos = ImVec2{ _paf( pref_pos, 1 ), _paf( pref_pos, 2 ) };
   PHB_ITEM psize = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   ImGuiDir* last_dir = ( ImGuiDir* ) hb_parptr( 4 );
   PHB_ITEM pr_outer = hb_param( 5, HB_IT_ARRAY );
   const ImRect r_outer = ImRect{ ImVec2{ _paf( pr_outer, 1 ), _paf( pr_outer, 2 ) }, ImVec2{ _paf( pr_outer, 3 ), _paf( pr_outer, 4 ) } };
   PHB_ITEM pr_avoid = hb_param( 6, HB_IT_ARRAY );
   const ImRect r_avoid = ImRect{ ImVec2{ _paf( pr_avoid, 1 ), _paf( pr_avoid, 2 ) }, ImVec2{ _paf( pr_avoid, 3 ), _paf( pr_avoid, 4 ) } };
   ImGuiPopupPositionPolicy policy = ( ImGuiPopupPositionPolicy ) hb_parni( 7 );
   igFindBestWindowPosForPopupEx(&pOut,ref_pos,size,last_dir,r_outer,r_avoid,policy);
   _ImVec2toA( &pOut, pOutItem );
}

/* ImGuiOldColumns* igFindOrCreateColumns(ImGuiWindow* window,ImGuiID id) */
HB_FUNC( IGFINDORCREATECOLUMNS )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   ImGuiID id = ( ImGuiID ) hb_parni( 2 );
   ImGuiOldColumns* ret = igFindOrCreateColumns(window,id);
   hb_retptr( ( void * ) ret );
}

/* ImGuiWindowSettings* igFindOrCreateWindowSettings(const char* name) */
HB_FUNC( IGFINDORCREATEWINDOWSETTINGS )
{
   const char* name = hb_parcx( 1 );
   ImGuiWindowSettings* ret = igFindOrCreateWindowSettings(name);
   hb_retptr( ( void * ) ret );
}

/* const char* igFindRenderedTextEnd(const char* text,const char* text_end) */
HB_FUNC( IGFINDRENDEREDTEXTEND )
{
   const char* text = hb_parcx( 1 );
   const char* text_end = NULL;
   const char* ret = igFindRenderedTextEnd(text,text_end);
   hb_retc( ret );
}

/* ImGuiSettingsHandler* igFindSettingsHandler(const char* type_name) */
HB_FUNC( IGFINDSETTINGSHANDLER )
{
   const char* type_name = hb_parcx( 1 );
   ImGuiSettingsHandler* ret = igFindSettingsHandler(type_name);
   hb_retptr( ( void * ) ret );
}

/* ImGuiViewport* igFindViewportByID(ImGuiID id) */
HB_FUNC( IGFINDVIEWPORTBYID )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   ImGuiViewport* ret = igFindViewportByID(id);
   hb_retptr( ( void * ) ret );
}

/* ImGuiViewport* igFindViewportByPlatformHandle(void* platform_handle) */
HB_FUNC( IGFINDVIEWPORTBYPLATFORMHANDLE )
{
   void* platform_handle = ( void* ) hb_parptr( 1 );
   ImGuiViewport* ret = igFindViewportByPlatformHandle(platform_handle);
   hb_retptr( ( void * ) ret );
}

/* ImGuiWindow* igFindWindowByID(ImGuiID id) */
HB_FUNC( IGFINDWINDOWBYID )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   ImGuiWindow* ret = igFindWindowByID(id);
   hb_retptr( ( void * ) ret );
}

/* ImGuiWindow* igFindWindowByName(const char* name) */
HB_FUNC( IGFINDWINDOWBYNAME )
{
   const char* name = hb_parcx( 1 );
   ImGuiWindow* ret = igFindWindowByName(name);
   hb_retptr( ( void * ) ret );
}

/* ImGuiWindowSettings* igFindWindowSettings(ImGuiID id) */
HB_FUNC( IGFINDWINDOWSETTINGS )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   ImGuiWindowSettings* ret = igFindWindowSettings(id);
   hb_retptr( ( void * ) ret );
}

/* void igFocusTopMostWindowUnderOne(ImGuiWindow* under_this_window,ImGuiWindow* ignore_window) */
HB_FUNC( IGFOCUSTOPMOSTWINDOWUNDERONE )
{
   ImGuiWindow* under_this_window = ( ImGuiWindow* ) hb_parptr( 1 );
   ImGuiWindow* ignore_window = ( ImGuiWindow* ) hb_parptr( 2 );
   igFocusTopMostWindowUnderOne(under_this_window,ignore_window);
}

/* void igFocusWindow(ImGuiWindow* window) */
HB_FUNC( IGFOCUSWINDOW )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   igFocusWindow(window);
}

/* void igGcAwakeTransientWindowBuffers(ImGuiWindow* window) */
HB_FUNC( IGGCAWAKETRANSIENTWINDOWBUFFERS )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   igGcAwakeTransientWindowBuffers(window);
}

/* void igGcCompactTransientMiscBuffers() */
HB_FUNC( IGGCCOMPACTTRANSIENTMISCBUFFERS )
{
   igGcCompactTransientMiscBuffers();
}

/* void igGcCompactTransientWindowBuffers(ImGuiWindow* window) */
HB_FUNC( IGGCCOMPACTTRANSIENTWINDOWBUFFERS )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   igGcCompactTransientWindowBuffers(window);
}

/* ImGuiID igGetActiveID() */
HB_FUNC( IGGETACTIVEID )
{
   ImGuiID ret = igGetActiveID();
   hb_retni( ( int ) ret );
}

/* void igGetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func,ImGuiMemFreeFunc* p_free_func,void** p_user_data) */
HB_FUNC( IGGETALLOCATORFUNCTIONS )
{
   ImGuiMemAllocFunc* p_alloc_func = ( ImGuiMemAllocFunc* ) hb_parptr( 1 );
   ImGuiMemFreeFunc* p_free_func = ( ImGuiMemFreeFunc* ) hb_parptr( 2 );
   void** p_user_data = ( void** ) hb_parptr( 3 );
   igGetAllocatorFunctions(p_alloc_func,p_free_func,p_user_data);
}

/* ImDrawList* igGetBackgroundDrawList_Nil() */
HB_FUNC( IGGETBACKGROUNDDRAWLISTNIL )
{
   ImDrawList* ret = igGetBackgroundDrawList_Nil();
   hb_retptr( ( void * ) ret );
}

/* ImDrawList* igGetBackgroundDrawList_ViewportPtr(ImGuiViewport* viewport) */
HB_FUNC( IGGETBACKGROUNDDRAWLISTVIEWPORTPTR )
{
   ImGuiViewport* viewport = ( ImGuiViewport* ) hb_parptr( 1 );
   ImDrawList* ret = igGetBackgroundDrawList_ViewportPtr(viewport);
   hb_retptr( ( void * ) ret );
}

/* const char* igGetClipboardText() */
HB_FUNC( IGGETCLIPBOARDTEXT )
{
   const char* ret = igGetClipboardText();
   hb_retc( ret );
}

/* ImU32 igGetColorU32_Col(ImGuiCol idx,float alpha_mul) */
HB_FUNC( IGGETCOLORU32COL )
{
   ImGuiCol idx = ( ImGuiCol ) hb_parni( 1 );
   float alpha_mul = ( float ) hb_parnd( 2 );
   ImU32 ret = igGetColorU32_Col(idx,alpha_mul);
   hb_retnl( ( HB_LONG ) ret );
}

/* ImU32 igGetColorU32_Vec4(const ImVec4 col) */
HB_FUNC( IGGETCOLORU32VEC4 )
{
   PHB_ITEM pcol = hb_param( 1, HB_IT_ARRAY );
   const ImVec4 col = ImVec4{ _paf( pcol, 1 ), _paf( pcol, 2 ), _paf( pcol, 3 ), _paf( pcol, 4 ) };
   ImU32 ret = igGetColorU32_Vec4(col);
   hb_retnl( ( HB_LONG ) ret );
}

/* ImU32 igGetColorU32_U32(ImU32 col) */
HB_FUNC( IGGETCOLORU32U32 )
{
   ImU32 col = ( HB_U32 ) hb_parnl( 1 );
   ImU32 ret = igGetColorU32_U32(col);
   hb_retnl( ( HB_LONG ) ret );
}

/* int igGetColumnIndex() */
HB_FUNC( IGGETCOLUMNINDEX )
{
   int ret = igGetColumnIndex();
   hb_retni( ret );
}

/* float igGetColumnNormFromOffset(const ImGuiOldColumns* columns,float offset) */
HB_FUNC( IGGETCOLUMNNORMFROMOFFSET )
{
   const ImGuiOldColumns* columns = ( const ImGuiOldColumns* ) hb_parptr( 1 );
   float offset = ( float ) hb_parnd( 2 );
   float ret = igGetColumnNormFromOffset(columns,offset);
   hb_retnd( ( double ) ret );
}

/* float igGetColumnOffset(int column_index) */
HB_FUNC( IGGETCOLUMNOFFSET )
{
   int column_index = hb_parni( 1 );
   float ret = igGetColumnOffset(column_index);
   hb_retnd( ( double ) ret );
}

/* float igGetColumnOffsetFromNorm(const ImGuiOldColumns* columns,float offset_norm) */
HB_FUNC( IGGETCOLUMNOFFSETFROMNORM )
{
   const ImGuiOldColumns* columns = ( const ImGuiOldColumns* ) hb_parptr( 1 );
   float offset_norm = ( float ) hb_parnd( 2 );
   float ret = igGetColumnOffsetFromNorm(columns,offset_norm);
   hb_retnd( ( double ) ret );
}

/* float igGetColumnWidth(int column_index) */
HB_FUNC( IGGETCOLUMNWIDTH )
{
   int column_index = hb_parni( 1 );
   float ret = igGetColumnWidth(column_index);
   hb_retnd( ( double ) ret );
}

/* int igGetColumnsCount() */
HB_FUNC( IGGETCOLUMNSCOUNT )
{
   int ret = igGetColumnsCount();
   hb_retni( ret );
}

/* ImGuiID igGetColumnsID(const char* str_id,int count) */
HB_FUNC( IGGETCOLUMNSID )
{
   const char* str_id = hb_parcx( 1 );
   int count = hb_parni( 2 );
   ImGuiID ret = igGetColumnsID(str_id,count);
   hb_retni( ( int ) ret );
}

/* void igGetContentRegionAvail(ImVec2 *pOut) */
HB_FUNC( IGGETCONTENTREGIONAVAIL )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   igGetContentRegionAvail(&pOut);
   _ImVec2toA( &pOut, pOutItem );
}

/* void igGetContentRegionMax(ImVec2 *pOut) */
HB_FUNC( IGGETCONTENTREGIONMAX )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   igGetContentRegionMax(&pOut);
   _ImVec2toA( &pOut, pOutItem );
}

/* void igGetContentRegionMaxAbs(ImVec2 *pOut) */
HB_FUNC( IGGETCONTENTREGIONMAXABS )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   igGetContentRegionMaxAbs(&pOut);
   _ImVec2toA( &pOut, pOutItem );
}

/* ImGuiContext* igGetCurrentContext() */
HB_FUNC( IGGETCURRENTCONTEXT )
{
   ImGuiContext* ret = igGetCurrentContext();
   hb_retptr( ( void * ) ret );
}

/* ImGuiTable* igGetCurrentTable() */
HB_FUNC( IGGETCURRENTTABLE )
{
   ImGuiTable* ret = igGetCurrentTable();
   hb_retptr( ( void * ) ret );
}

/* ImGuiWindow* igGetCurrentWindow() */
HB_FUNC( IGGETCURRENTWINDOW )
{
   ImGuiWindow* ret = igGetCurrentWindow();
   hb_retptr( ( void * ) ret );
}

/* ImGuiWindow* igGetCurrentWindowRead() */
HB_FUNC( IGGETCURRENTWINDOWREAD )
{
   ImGuiWindow* ret = igGetCurrentWindowRead();
   hb_retptr( ( void * ) ret );
}

/* void igGetCursorPos(ImVec2 *pOut) */
HB_FUNC( IGGETCURSORPOS )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   igGetCursorPos(&pOut);
   _ImVec2toA( &pOut, pOutItem );
}

/* float igGetCursorPosX() */
HB_FUNC( IGGETCURSORPOSX )
{
   float ret = igGetCursorPosX();
   hb_retnd( ( double ) ret );
}

/* float igGetCursorPosY() */
HB_FUNC( IGGETCURSORPOSY )
{
   float ret = igGetCursorPosY();
   hb_retnd( ( double ) ret );
}

/* void igGetCursorScreenPos(ImVec2 *pOut) */
HB_FUNC( IGGETCURSORSCREENPOS )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   igGetCursorScreenPos(&pOut);
   _ImVec2toA( &pOut, pOutItem );
}

/* void igGetCursorStartPos(ImVec2 *pOut) */
HB_FUNC( IGGETCURSORSTARTPOS )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   igGetCursorStartPos(&pOut);
   _ImVec2toA( &pOut, pOutItem );
}

/* ImFont* igGetDefaultFont() */
HB_FUNC( IGGETDEFAULTFONT )
{
   ImFont* ret = igGetDefaultFont();
   hb_retptr( ( void * ) ret );
}

/* const ImGuiPayload* igGetDragDropPayload() */
HB_FUNC( IGGETDRAGDROPPAYLOAD )
{
   const ImGuiPayload* ret = igGetDragDropPayload();
   hb_retptr( ( void * ) ret );
}

/* ImDrawData* igGetDrawData() */
HB_FUNC( IGGETDRAWDATA )
{
   ImDrawData* ret = igGetDrawData();
   hb_retptr( ( void * ) ret );
}

/* ImDrawListSharedData* igGetDrawListSharedData() */
HB_FUNC( IGGETDRAWLISTSHAREDDATA )
{
   ImDrawListSharedData* ret = igGetDrawListSharedData();
   hb_retptr( ( void * ) ret );
}

/* ImGuiID igGetFocusID() */
HB_FUNC( IGGETFOCUSID )
{
   ImGuiID ret = igGetFocusID();
   hb_retni( ( int ) ret );
}

/* ImGuiID igGetFocusScope() */
HB_FUNC( IGGETFOCUSSCOPE )
{
   ImGuiID ret = igGetFocusScope();
   hb_retni( ( int ) ret );
}

/* ImGuiID igGetFocusedFocusScope() */
HB_FUNC( IGGETFOCUSEDFOCUSSCOPE )
{
   ImGuiID ret = igGetFocusedFocusScope();
   hb_retni( ( int ) ret );
}

/* ImFont* igGetFont() */
HB_FUNC( IGGETFONT )
{
   ImFont* ret = igGetFont();
   hb_retptr( ( void * ) ret );
}

/* float igGetFontSize() */
HB_FUNC( IGGETFONTSIZE )
{
   float ret = igGetFontSize();
   hb_retnd( ( double ) ret );
}

/* void igGetFontTexUvWhitePixel(ImVec2 *pOut) */
HB_FUNC( IGGETFONTTEXUVWHITEPIXEL )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   igGetFontTexUvWhitePixel(&pOut);
   _ImVec2toA( &pOut, pOutItem );
}

/* ImDrawList* igGetForegroundDrawList_Nil() */
HB_FUNC( IGGETFOREGROUNDDRAWLISTNIL )
{
   ImDrawList* ret = igGetForegroundDrawList_Nil();
   hb_retptr( ( void * ) ret );
}

/* ImDrawList* igGetForegroundDrawList_ViewportPtr(ImGuiViewport* viewport) */
HB_FUNC( IGGETFOREGROUNDDRAWLISTVIEWPORTPTR )
{
   ImGuiViewport* viewport = ( ImGuiViewport* ) hb_parptr( 1 );
   ImDrawList* ret = igGetForegroundDrawList_ViewportPtr(viewport);
   hb_retptr( ( void * ) ret );
}

/* ImDrawList* igGetForegroundDrawList_WindowPtr(ImGuiWindow* window) */
HB_FUNC( IGGETFOREGROUNDDRAWLISTWINDOWPTR )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   ImDrawList* ret = igGetForegroundDrawList_WindowPtr(window);
   hb_retptr( ( void * ) ret );
}

/* int igGetFrameCount() */
HB_FUNC( IGGETFRAMECOUNT )
{
   int ret = igGetFrameCount();
   hb_retni( ret );
}

/* float igGetFrameHeight() */
HB_FUNC( IGGETFRAMEHEIGHT )
{
   float ret = igGetFrameHeight();
   hb_retnd( ( double ) ret );
}

/* float igGetFrameHeightWithSpacing() */
HB_FUNC( IGGETFRAMEHEIGHTWITHSPACING )
{
   float ret = igGetFrameHeightWithSpacing();
   hb_retnd( ( double ) ret );
}

/* ImGuiID igGetHoveredID() */
HB_FUNC( IGGETHOVEREDID )
{
   ImGuiID ret = igGetHoveredID();
   hb_retni( ( int ) ret );
}

/* ImGuiID igGetID_Str(const char* str_id) */
HB_FUNC( IGGETIDSTR )
{
   const char* str_id = hb_parcx( 1 );
   ImGuiID ret = igGetID_Str(str_id);
   hb_retni( ( int ) ret );
}

/* ImGuiID igGetID_StrStr(const char* str_id_begin,const char* str_id_end) */
HB_FUNC( IGGETIDSTRSTR )
{
   const char* str_id_begin = hb_parcx( 1 );
   const char* str_id_end = hb_parcx( 2 );
   ImGuiID ret = igGetID_StrStr(str_id_begin,str_id_end);
   hb_retni( ( int ) ret );
}

/* ImGuiID igGetID_Ptr(const void* ptr_id) */
HB_FUNC( IGGETIDPTR )
{
   const void* ptr_id = ( const void* ) hb_parptr( 1 );
   ImGuiID ret = igGetID_Ptr(ptr_id);
   hb_retni( ( int ) ret );
}

/* ImGuiID igGetIDWithSeed(const char* str_id_begin,const char* str_id_end,ImGuiID seed) */
HB_FUNC( IGGETIDWITHSEED )
{
   const char* str_id_begin = hb_parcx( 1 );
   const char* str_id_end = hb_parcx( 2 );
   ImGuiID seed = ( ImGuiID ) hb_parni( 3 );
   ImGuiID ret = igGetIDWithSeed(str_id_begin,str_id_end,seed);
   hb_retni( ( int ) ret );
}

/* ImGuiIO* igGetIO() */
HB_FUNC( IGGETIO )
{
   ImGuiIO* ret = igGetIO();
   hb_retptr( ( void * ) ret );
}

/* ImGuiInputTextState* igGetInputTextState(ImGuiID id) */
HB_FUNC( IGGETINPUTTEXTSTATE )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   ImGuiInputTextState* ret = igGetInputTextState(id);
   hb_retptr( ( void * ) ret );
}

/* ImGuiItemFlags igGetItemFlags() */
HB_FUNC( IGGETITEMFLAGS )
{
   ImGuiItemFlags ret = igGetItemFlags();
   hb_retni( ( int ) ret );
}

/* ImGuiID igGetItemID() */
HB_FUNC( IGGETITEMID )
{
   ImGuiID ret = igGetItemID();
   hb_retni( ( int ) ret );
}

/* void igGetItemRectMax(ImVec2 *pOut) */
HB_FUNC( IGGETITEMRECTMAX )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   igGetItemRectMax(&pOut);
   _ImVec2toA( &pOut, pOutItem );
}

/* void igGetItemRectMin(ImVec2 *pOut) */
HB_FUNC( IGGETITEMRECTMIN )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   igGetItemRectMin(&pOut);
   _ImVec2toA( &pOut, pOutItem );
}

/* void igGetItemRectSize(ImVec2 *pOut) */
HB_FUNC( IGGETITEMRECTSIZE )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   igGetItemRectSize(&pOut);
   _ImVec2toA( &pOut, pOutItem );
}

/* ImGuiItemStatusFlags igGetItemStatusFlags() */
HB_FUNC( IGGETITEMSTATUSFLAGS )
{
   ImGuiItemStatusFlags ret = igGetItemStatusFlags();
   hb_retni( ( int ) ret );
}

/* int igGetKeyIndex(ImGuiKey imgui_key) */
HB_FUNC( IGGETKEYINDEX )
{
   ImGuiKey imgui_key = ( ImGuiKey ) hb_parni( 1 );
   int ret = igGetKeyIndex(imgui_key);
   hb_retni( ret );
}

/* int igGetKeyPressedAmount(int key_index,float repeat_delay,float rate) */
HB_FUNC( IGGETKEYPRESSEDAMOUNT )
{
   int key_index = hb_parni( 1 );
   float repeat_delay = ( float ) hb_parnd( 2 );
   float rate = ( float ) hb_parnd( 3 );
   int ret = igGetKeyPressedAmount(key_index,repeat_delay,rate);
   hb_retni( ret );
}

/* ImGuiViewport* igGetMainViewport() */
HB_FUNC( IGGETMAINVIEWPORT )
{
   ImGuiViewport* ret = igGetMainViewport();
   hb_retptr( ( void * ) ret );
}

/* ImGuiKeyModFlags igGetMergedKeyModFlags() */
HB_FUNC( IGGETMERGEDKEYMODFLAGS )
{
   ImGuiKeyModFlags ret = igGetMergedKeyModFlags();
   hb_retni( ( int ) ret );
}

/* ImGuiMouseCursor igGetMouseCursor() */
HB_FUNC( IGGETMOUSECURSOR )
{
   ImGuiMouseCursor ret = igGetMouseCursor();
   hb_retni( ( int ) ret );
}

/* void igGetMouseDragDelta(ImVec2 *pOut,ImGuiMouseButton button,float lock_threshold) */
HB_FUNC( IGGETMOUSEDRAGDELTA )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   ImGuiMouseButton button = ( ImGuiMouseButton ) hb_parni( 2 );
   float lock_threshold = ( float ) hb_parnd( 3 );
   igGetMouseDragDelta(&pOut,button,lock_threshold);
   _ImVec2toA( &pOut, pOutItem );
}

/* void igGetMousePos(ImVec2 *pOut) */
HB_FUNC( IGGETMOUSEPOS )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   igGetMousePos(&pOut);
   _ImVec2toA( &pOut, pOutItem );
}

/* void igGetMousePosOnOpeningCurrentPopup(ImVec2 *pOut) */
HB_FUNC( IGGETMOUSEPOSONOPENINGCURRENTPOPUP )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   igGetMousePosOnOpeningCurrentPopup(&pOut);
   _ImVec2toA( &pOut, pOutItem );
}

/* float igGetNavInputAmount(ImGuiNavInput n,ImGuiInputReadMode mode) */
HB_FUNC( IGGETNAVINPUTAMOUNT )
{
   ImGuiNavInput n = ( ImGuiNavInput ) hb_parni( 1 );
   ImGuiInputReadMode mode = ( ImGuiInputReadMode ) hb_parni( 2 );
   float ret = igGetNavInputAmount(n,mode);
   hb_retnd( ( double ) ret );
}

/* void igGetNavInputAmount2d(ImVec2 *pOut,ImGuiNavDirSourceFlags dir_sources,ImGuiInputReadMode mode,float slow_factor,float fast_factor) */
HB_FUNC( IGGETNAVINPUTAMOUNT2D )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   ImGuiNavDirSourceFlags dir_sources = ( ImGuiNavDirSourceFlags ) hb_parni( 2 );
   ImGuiInputReadMode mode = ( ImGuiInputReadMode ) hb_parni( 3 );
   float slow_factor = ( float ) hb_parnd( 4 );
   float fast_factor = ( float ) hb_parnd( 5 );
   igGetNavInputAmount2d(&pOut,dir_sources,mode,slow_factor,fast_factor);
   _ImVec2toA( &pOut, pOutItem );
}

/* ImGuiPlatformIO* igGetPlatformIO() */
HB_FUNC( IGGETPLATFORMIO )
{
   ImGuiPlatformIO* ret = igGetPlatformIO();
   hb_retptr( ( void * ) ret );
}

/* void igGetPopupAllowedExtentRect(ImRect *pOut,ImGuiWindow* window) */
HB_FUNC( IGGETPOPUPALLOWEDEXTENTRECT )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImRect pOut;
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 2 );
   igGetPopupAllowedExtentRect(&pOut,window);
   _ImRecttoA( &pOut, pOutItem );
}

/* float igGetScrollMaxX() */
HB_FUNC( IGGETSCROLLMAXX )
{
   float ret = igGetScrollMaxX();
   hb_retnd( ( double ) ret );
}

/* float igGetScrollMaxY() */
HB_FUNC( IGGETSCROLLMAXY )
{
   float ret = igGetScrollMaxY();
   hb_retnd( ( double ) ret );
}

/* float igGetScrollX() */
HB_FUNC( IGGETSCROLLX )
{
   float ret = igGetScrollX();
   hb_retnd( ( double ) ret );
}

/* float igGetScrollY() */
HB_FUNC( IGGETSCROLLY )
{
   float ret = igGetScrollY();
   hb_retnd( ( double ) ret );
}

/* ImGuiStorage* igGetStateStorage() */
HB_FUNC( IGGETSTATESTORAGE )
{
   ImGuiStorage* ret = igGetStateStorage();
   hb_retptr( ( void * ) ret );
}

/* ImGuiStyle* igGetStyle() */
HB_FUNC( IGGETSTYLE )
{
   ImGuiStyle* ret = igGetStyle();
   hb_retptr( ( void * ) ret );
}

/* const char* igGetStyleColorName(ImGuiCol idx) */
HB_FUNC( IGGETSTYLECOLORNAME )
{
   ImGuiCol idx = ( ImGuiCol ) hb_parni( 1 );
   const char* ret = igGetStyleColorName(idx);
   hb_retc( ret );
}

/* const ImVec4* igGetStyleColorVec4(ImGuiCol idx) */
HB_FUNC( IGGETSTYLECOLORVEC4 )
{
   ImGuiCol idx = ( ImGuiCol ) hb_parni( 1 );
   const ImVec4* ret = igGetStyleColorVec4(idx);
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 4 );
   hb_arraySetND( pret, 1, ( double ) ret->x );
   hb_arraySetND( pret, 2, ( double ) ret->y );
   hb_arraySetND( pret, 3, ( double ) ret->z );
   hb_arraySetND( pret, 4, ( double ) ret->w );
}

/* float igGetTextLineHeight() */
HB_FUNC( IGGETTEXTLINEHEIGHT )
{
   float ret = igGetTextLineHeight();
   hb_retnd( ( double ) ret );
}

/* float igGetTextLineHeightWithSpacing() */
HB_FUNC( IGGETTEXTLINEHEIGHTWITHSPACING )
{
   float ret = igGetTextLineHeightWithSpacing();
   hb_retnd( ( double ) ret );
}

/* double igGetTime() */
HB_FUNC( IGGETTIME )
{
   double ret = igGetTime();
   hb_retnd( ret );
}

/* ImGuiWindow* igGetTopMostPopupModal() */
HB_FUNC( IGGETTOPMOSTPOPUPMODAL )
{
   ImGuiWindow* ret = igGetTopMostPopupModal();
   hb_retptr( ( void * ) ret );
}

/* float igGetTreeNodeToLabelSpacing() */
HB_FUNC( IGGETTREENODETOLABELSPACING )
{
   float ret = igGetTreeNodeToLabelSpacing();
   hb_retnd( ( double ) ret );
}

/* const char* igGetVersion() */
HB_FUNC( IGGETVERSION )
{
   const char* ret = igGetVersion();
   hb_retc( ret );
}

/* const ImGuiPlatformMonitor* igGetViewportPlatformMonitor(ImGuiViewport* viewport) */
HB_FUNC( IGGETVIEWPORTPLATFORMMONITOR )
{
   ImGuiViewport* viewport = ( ImGuiViewport* ) hb_parptr( 1 );
   const ImGuiPlatformMonitor* ret = igGetViewportPlatformMonitor(viewport);
   hb_retptr( ( void * ) ret );
}

/* bool igGetWindowAlwaysWantOwnTabBar(ImGuiWindow* window) */
HB_FUNC( IGGETWINDOWALWAYSWANTOWNTABBAR )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   bool ret = igGetWindowAlwaysWantOwnTabBar(window);
   hb_retl( ret );
}

/* void igGetWindowContentRegionMax(ImVec2 *pOut) */
HB_FUNC( IGGETWINDOWCONTENTREGIONMAX )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   igGetWindowContentRegionMax(&pOut);
   _ImVec2toA( &pOut, pOutItem );
}

/* void igGetWindowContentRegionMin(ImVec2 *pOut) */
HB_FUNC( IGGETWINDOWCONTENTREGIONMIN )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   igGetWindowContentRegionMin(&pOut);
   _ImVec2toA( &pOut, pOutItem );
}

/* ImGuiID igGetWindowDockID() */
HB_FUNC( IGGETWINDOWDOCKID )
{
   ImGuiID ret = igGetWindowDockID();
   hb_retni( ( int ) ret );
}

/* ImGuiDockNode* igGetWindowDockNode() */
HB_FUNC( IGGETWINDOWDOCKNODE )
{
   ImGuiDockNode* ret = igGetWindowDockNode();
   hb_retptr( ( void * ) ret );
}

/* float igGetWindowDpiScale() */
HB_FUNC( IGGETWINDOWDPISCALE )
{
   float ret = igGetWindowDpiScale();
   hb_retnd( ( double ) ret );
}

/* ImDrawList* igGetWindowDrawList() */
HB_FUNC( IGGETWINDOWDRAWLIST )
{
   ImDrawList* ret = igGetWindowDrawList();
   hb_retptr( ( void * ) ret );
}

/* float igGetWindowHeight() */
HB_FUNC( IGGETWINDOWHEIGHT )
{
   float ret = igGetWindowHeight();
   hb_retnd( ( double ) ret );
}

/* void igGetWindowPos(ImVec2 *pOut) */
HB_FUNC( IGGETWINDOWPOS )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   igGetWindowPos(&pOut);
   _ImVec2toA( &pOut, pOutItem );
}

/* ImGuiID igGetWindowResizeBorderID(ImGuiWindow* window,ImGuiDir dir) */
HB_FUNC( IGGETWINDOWRESIZEBORDERID )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   ImGuiDir dir = ( ImGuiDir ) hb_parni( 2 );
   ImGuiID ret = igGetWindowResizeBorderID(window,dir);
   hb_retni( ( int ) ret );
}

/* ImGuiID igGetWindowResizeCornerID(ImGuiWindow* window,int n) */
HB_FUNC( IGGETWINDOWRESIZECORNERID )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   int n = hb_parni( 2 );
   ImGuiID ret = igGetWindowResizeCornerID(window,n);
   hb_retni( ( int ) ret );
}

/* ImGuiID igGetWindowScrollbarID(ImGuiWindow* window,ImGuiAxis axis) */
HB_FUNC( IGGETWINDOWSCROLLBARID )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   ImGuiAxis axis = ( ImGuiAxis ) hb_parni( 2 );
   ImGuiID ret = igGetWindowScrollbarID(window,axis);
   hb_retni( ( int ) ret );
}

/* void igGetWindowScrollbarRect(ImRect *pOut,ImGuiWindow* window,ImGuiAxis axis) */
HB_FUNC( IGGETWINDOWSCROLLBARRECT )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImRect pOut;
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 2 );
   ImGuiAxis axis = ( ImGuiAxis ) hb_parni( 3 );
   igGetWindowScrollbarRect(&pOut,window,axis);
   _ImRecttoA( &pOut, pOutItem );
}

/* void igGetWindowSize(ImVec2 *pOut) */
HB_FUNC( IGGETWINDOWSIZE )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   igGetWindowSize(&pOut);
   _ImVec2toA( &pOut, pOutItem );
}

/* ImGuiViewport* igGetWindowViewport() */
HB_FUNC( IGGETWINDOWVIEWPORT )
{
   ImGuiViewport* ret = igGetWindowViewport();
   hb_retptr( ( void * ) ret );
}

/* float igGetWindowWidth() */
HB_FUNC( IGGETWINDOWWIDTH )
{
   float ret = igGetWindowWidth();
   hb_retnd( ( double ) ret );
}

/* int igImAbs_Int(int x) */
HB_FUNC( IGIMABSINT )
{
   int x = hb_parni( 1 );
   int ret = igImAbs_Int(x);
   hb_retni( ret );
}

/* float igImAbs_Float(float x) */
HB_FUNC( IGIMABSFLOAT )
{
   float x = ( float ) hb_parnd( 1 );
   float ret = igImAbs_Float(x);
   hb_retnd( ( double ) ret );
}

/* double igImAbs_double(double x) */
HB_FUNC( IGIMABSDOUBLE )
{
   double x = hb_parnd( 1 );
   double ret = igImAbs_double(x);
   hb_retnd( ret );
}

/* ImU32 igImAlphaBlendColors(ImU32 col_a,ImU32 col_b) */
HB_FUNC( IGIMALPHABLENDCOLORS )
{
   ImU32 col_a = ( HB_U32 ) hb_parnl( 1 );
   ImU32 col_b = ( HB_U32 ) hb_parnl( 2 );
   ImU32 ret = igImAlphaBlendColors(col_a,col_b);
   hb_retnl( ( HB_LONG ) ret );
}

/* void igImBezierCubicCalc(ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,float t) */
HB_FUNC( IGIMBEZIERCUBICCALC )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   PHB_ITEM pp1 = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 p1 = ImVec2{ _paf( pp1, 1 ), _paf( pp1, 2 ) };
   PHB_ITEM pp2 = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 p2 = ImVec2{ _paf( pp2, 1 ), _paf( pp2, 2 ) };
   PHB_ITEM pp3 = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 p3 = ImVec2{ _paf( pp3, 1 ), _paf( pp3, 2 ) };
   PHB_ITEM pp4 = hb_param( 5, HB_IT_ARRAY );
   const ImVec2 p4 = ImVec2{ _paf( pp4, 1 ), _paf( pp4, 2 ) };
   float t = ( float ) hb_parnd( 6 );
   igImBezierCubicCalc(&pOut,p1,p2,p3,p4,t);
   _ImVec2toA( &pOut, pOutItem );
}

/* void igImBezierCubicClosestPoint(ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 p,int num_segments) */
HB_FUNC( IGIMBEZIERCUBICCLOSESTPOINT )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   PHB_ITEM pp1 = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 p1 = ImVec2{ _paf( pp1, 1 ), _paf( pp1, 2 ) };
   PHB_ITEM pp2 = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 p2 = ImVec2{ _paf( pp2, 1 ), _paf( pp2, 2 ) };
   PHB_ITEM pp3 = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 p3 = ImVec2{ _paf( pp3, 1 ), _paf( pp3, 2 ) };
   PHB_ITEM pp4 = hb_param( 5, HB_IT_ARRAY );
   const ImVec2 p4 = ImVec2{ _paf( pp4, 1 ), _paf( pp4, 2 ) };
   PHB_ITEM pp = hb_param( 6, HB_IT_ARRAY );
   const ImVec2 p = ImVec2{ _paf( pp, 1 ), _paf( pp, 2 ) };
   int num_segments = hb_parni( 7 );
   igImBezierCubicClosestPoint(&pOut,p1,p2,p3,p4,p,num_segments);
   _ImVec2toA( &pOut, pOutItem );
}

/* void igImBezierCubicClosestPointCasteljau(ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 p,float tess_tol) */
HB_FUNC( IGIMBEZIERCUBICCLOSESTPOINTCASTELJAU )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   PHB_ITEM pp1 = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 p1 = ImVec2{ _paf( pp1, 1 ), _paf( pp1, 2 ) };
   PHB_ITEM pp2 = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 p2 = ImVec2{ _paf( pp2, 1 ), _paf( pp2, 2 ) };
   PHB_ITEM pp3 = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 p3 = ImVec2{ _paf( pp3, 1 ), _paf( pp3, 2 ) };
   PHB_ITEM pp4 = hb_param( 5, HB_IT_ARRAY );
   const ImVec2 p4 = ImVec2{ _paf( pp4, 1 ), _paf( pp4, 2 ) };
   PHB_ITEM pp = hb_param( 6, HB_IT_ARRAY );
   const ImVec2 p = ImVec2{ _paf( pp, 1 ), _paf( pp, 2 ) };
   float tess_tol = ( float ) hb_parnd( 7 );
   igImBezierCubicClosestPointCasteljau(&pOut,p1,p2,p3,p4,p,tess_tol);
   _ImVec2toA( &pOut, pOutItem );
}

/* void igImBezierQuadraticCalc(ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,float t) */
HB_FUNC( IGIMBEZIERQUADRATICCALC )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   PHB_ITEM pp1 = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 p1 = ImVec2{ _paf( pp1, 1 ), _paf( pp1, 2 ) };
   PHB_ITEM pp2 = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 p2 = ImVec2{ _paf( pp2, 1 ), _paf( pp2, 2 ) };
   PHB_ITEM pp3 = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 p3 = ImVec2{ _paf( pp3, 1 ), _paf( pp3, 2 ) };
   float t = ( float ) hb_parnd( 5 );
   igImBezierQuadraticCalc(&pOut,p1,p2,p3,t);
   _ImVec2toA( &pOut, pOutItem );
}

/* void igImBitArrayClearBit(ImU32* arr,int n) */
HB_FUNC( IGIMBITARRAYCLEARBIT )
{
   ImU32 /* @ */ _arr = ( HB_U32 ) hb_parnl( 1 );
   ImU32 * arr = &_arr;
   int n = hb_parni( 2 );
   igImBitArrayClearBit(arr,n);
   hb_itemPutNL( hb_paramError( 1 ), _arr );
}

/* void igImBitArraySetBit(ImU32* arr,int n) */
HB_FUNC( IGIMBITARRAYSETBIT )
{
   ImU32 /* @ */ _arr = ( HB_U32 ) hb_parnl( 1 );
   ImU32 * arr = &_arr;
   int n = hb_parni( 2 );
   igImBitArraySetBit(arr,n);
   hb_itemPutNL( hb_paramError( 1 ), _arr );
}

/* void igImBitArraySetBitRange(ImU32* arr,int n,int n2) */
HB_FUNC( IGIMBITARRAYSETBITRANGE )
{
   ImU32 /* @ */ _arr = ( HB_U32 ) hb_parnl( 1 );
   ImU32 * arr = &_arr;
   int n = hb_parni( 2 );
   int n2 = hb_parni( 3 );
   igImBitArraySetBitRange(arr,n,n2);
   hb_itemPutNL( hb_paramError( 1 ), _arr );
}

/* bool igImBitArrayTestBit(const ImU32* arr,int n) */
HB_FUNC( IGIMBITARRAYTESTBIT )
{
   const ImU32* arr = ( const ImU32* ) hb_parptr( 1 );
   int n = hb_parni( 2 );
   bool ret = igImBitArrayTestBit(arr,n);
   hb_retl( ret );
}

/* bool igImCharIsBlankA(char c) */
HB_FUNC( IGIMCHARISBLANKA )
{
   char c;
   bool ret = igImCharIsBlankA(c);
   hb_retl( ret );
}

/* bool igImCharIsBlankW(unsigned int c) */
HB_FUNC( IGIMCHARISBLANKW )
{
   unsigned int c;
   bool ret = igImCharIsBlankW(c);
   hb_retl( ret );
}

/* void igImClamp(ImVec2 *pOut,const ImVec2 v,const ImVec2 mn,ImVec2 mx) */
HB_FUNC( IGIMCLAMP )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   PHB_ITEM pv = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 v = ImVec2{ _paf( pv, 1 ), _paf( pv, 2 ) };
   PHB_ITEM pmn = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 mn = ImVec2{ _paf( pmn, 1 ), _paf( pmn, 2 ) };
   PHB_ITEM pmx = hb_param( 4, HB_IT_ARRAY );
   ImVec2 mx = ImVec2{ _paf( pmx, 1 ), _paf( pmx, 2 ) };
   igImClamp(&pOut,v,mn,mx);
   _ImVec2toA( &pOut, pOutItem );
}

/* float igImDot(const ImVec2 a,const ImVec2 b) */
HB_FUNC( IGIMDOT )
{
   PHB_ITEM pa = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 a = ImVec2{ _paf( pa, 1 ), _paf( pa, 2 ) };
   PHB_ITEM pb = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 b = ImVec2{ _paf( pb, 1 ), _paf( pb, 2 ) };
   float ret = igImDot(a,b);
   hb_retnd( ( double ) ret );
}

/* bool igImFileClose(ImFileHandle file) */
HB_FUNC( IGIMFILECLOSE )
{
   ImFileHandle file;
   bool ret = igImFileClose(file);
   hb_retl( ret );
}

/* ImU64 igImFileGetSize(ImFileHandle file) */
HB_FUNC( IGIMFILEGETSIZE )
{
   ImFileHandle file;
   ImU64 ret = igImFileGetSize(file);
}

/* void* igImFileLoadToMemory(const char* filename,const char* mode,size_t* out_file_size,int padding_bytes) */
HB_FUNC( IGIMFILELOADTOMEMORY )
{
   const char* filename = hb_parcx( 1 );
   const char* mode = hb_parcx( 2 );
   size_t _out_file_size;
   size_t* out_file_size = &_out_file_size;
   int padding_bytes = hb_parni( 4 );
   void* ret = igImFileLoadToMemory(filename,mode,out_file_size,padding_bytes);
   hb_itemPutNL( hb_paramError( 3 ), _out_file_size );
   hb_retptr( ( void * ) ret );
}

/* ImFileHandle igImFileOpen(const char* filename,const char* mode) */
HB_FUNC( IGIMFILEOPEN )
{
   const char* filename = hb_parcx( 1 );
   const char* mode = hb_parcx( 2 );
   ImFileHandle ret = igImFileOpen(filename,mode);
}

/* ImU64 igImFileRead(void* data,ImU64 size,ImU64 count,ImFileHandle file) */
HB_FUNC( IGIMFILEREAD )
{
   void* data = ( void* ) hb_parptr( 1 );
   ImU64 size;
   ImU64 count;
   ImFileHandle file;
   ImU64 ret = igImFileRead(data,size,count,file);
}

/* ImU64 igImFileWrite(const void* data,ImU64 size,ImU64 count,ImFileHandle file) */
HB_FUNC( IGIMFILEWRITE )
{
   const void* data = ( const void* ) hb_parptr( 1 );
   ImU64 size;
   ImU64 count;
   ImFileHandle file;
   ImU64 ret = igImFileWrite(data,size,count,file);
}

/* float igImFloor_Float(float f) */
HB_FUNC( IGIMFLOORFLOAT )
{
   float f = ( float ) hb_parnd( 1 );
   float ret = igImFloor_Float(f);
   hb_retnd( ( double ) ret );
}

/* void igImFloor_Vec2(ImVec2 *pOut,const ImVec2 v) */
HB_FUNC( IGIMFLOORVEC2 )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   PHB_ITEM pv = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 v = ImVec2{ _paf( pv, 1 ), _paf( pv, 2 ) };
   igImFloor_Vec2(&pOut,v);
   _ImVec2toA( &pOut, pOutItem );
}

/* float igImFloorSigned(float f) */
HB_FUNC( IGIMFLOORSIGNED )
{
   float f = ( float ) hb_parnd( 1 );
   float ret = igImFloorSigned(f);
   hb_retnd( ( double ) ret );
}

/* void igImFontAtlasBuildFinish(ImFontAtlas* atlas) */
HB_FUNC( IGIMFONTATLASBUILDFINISH )
{
   ImFontAtlas* atlas = ( ImFontAtlas* ) hb_parptr( 1 );
   igImFontAtlasBuildFinish(atlas);
}

/* void igImFontAtlasBuildInit(ImFontAtlas* atlas) */
HB_FUNC( IGIMFONTATLASBUILDINIT )
{
   ImFontAtlas* atlas = ( ImFontAtlas* ) hb_parptr( 1 );
   igImFontAtlasBuildInit(atlas);
}

/* void igImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256],float in_multiply_factor) */
HB_FUNC( IGIMFONTATLASBUILDMULTIPLYCALCLOOKUPTABLE )
{
   unsigned char o_table[256] = { 0 };
   float in_multiply_factor = ( float ) hb_parnd( 2 );
   igImFontAtlasBuildMultiplyCalcLookupTable(o_table,in_multiply_factor);
}

/* void igImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256],unsigned char* pixels,int x,int y,int w,int h,int stride) */
HB_FUNC( IGIMFONTATLASBUILDMULTIPLYRECTALPHA8 )
{
   const unsigned char table[256] = { 0 };
   unsigned char* pixels = ( unsigned char* ) hb_parptr( 2 );
   int x = hb_parni( 3 );
   int y = hb_parni( 4 );
   int w = hb_parni( 5 );
   int h = hb_parni( 6 );
   int stride = hb_parni( 7 );
   igImFontAtlasBuildMultiplyRectAlpha8(table,pixels,x,y,w,h,stride);
}

/* void igImFontAtlasBuildPackCustomRects(ImFontAtlas* atlas,void* stbrp_context_opaque) */
HB_FUNC( IGIMFONTATLASBUILDPACKCUSTOMRECTS )
{
   ImFontAtlas* atlas = ( ImFontAtlas* ) hb_parptr( 1 );
   void* stbrp_context_opaque = ( void* ) hb_parptr( 2 );
   igImFontAtlasBuildPackCustomRects(atlas,stbrp_context_opaque);
}

/* void igImFontAtlasBuildRender32bppRectFromString(ImFontAtlas* atlas,int x,int y,int w,int h,const char* in_str,char in_marker_char,unsigned int in_marker_pixel_value) */
HB_FUNC( IGIMFONTATLASBUILDRENDER32BPPRECTFROMSTRING )
{
   ImFontAtlas* atlas = ( ImFontAtlas* ) hb_parptr( 1 );
   int x = hb_parni( 2 );
   int y = hb_parni( 3 );
   int w = hb_parni( 4 );
   int h = hb_parni( 5 );
   const char* in_str = hb_parcx( 6 );
   char in_marker_char;
   unsigned int in_marker_pixel_value;
   igImFontAtlasBuildRender32bppRectFromString(atlas,x,y,w,h,in_str,in_marker_char,in_marker_pixel_value);
}

/* void igImFontAtlasBuildRender8bppRectFromString(ImFontAtlas* atlas,int x,int y,int w,int h,const char* in_str,char in_marker_char,unsigned char in_marker_pixel_value) */
HB_FUNC( IGIMFONTATLASBUILDRENDER8BPPRECTFROMSTRING )
{
   ImFontAtlas* atlas = ( ImFontAtlas* ) hb_parptr( 1 );
   int x = hb_parni( 2 );
   int y = hb_parni( 3 );
   int w = hb_parni( 4 );
   int h = hb_parni( 5 );
   const char* in_str = hb_parcx( 6 );
   char in_marker_char;
   unsigned char in_marker_pixel_value;
   igImFontAtlasBuildRender8bppRectFromString(atlas,x,y,w,h,in_str,in_marker_char,in_marker_pixel_value);
}

/* void igImFontAtlasBuildSetupFont(ImFontAtlas* atlas,ImFont* font,ImFontConfig* font_config,float ascent,float descent) */
HB_FUNC( IGIMFONTATLASBUILDSETUPFONT )
{
   ImFontAtlas* atlas = ( ImFontAtlas* ) hb_parptr( 1 );
   ImFont* font = ( ImFont* ) hb_parptr( 2 );
   ImFontConfig* font_config = ( ImFontConfig* ) hb_parptr( 3 );
   float ascent = ( float ) hb_parnd( 4 );
   float descent = ( float ) hb_parnd( 5 );
   igImFontAtlasBuildSetupFont(atlas,font,font_config,ascent,descent);
}

/* const ImFontBuilderIO* igImFontAtlasGetBuilderForStbTruetype() */
HB_FUNC( IGIMFONTATLASGETBUILDERFORSTBTRUETYPE )
{
   const ImFontBuilderIO* ret = igImFontAtlasGetBuilderForStbTruetype();
   hb_retptr( ( void * ) ret );
}

/* int igImFormatString(char* buf,size_t buf_size,const char* fmt,...) */
HB_FUNC( IGIMFORMATSTRING )
{
   char* buf = hb_itemGetC( hb_paramError( 1 ) );
   size_t buf_size = ( size_t ) hb_parnl( 2 );
   const char* fmt = hb_parcx( 3 );
   int ret = igImFormatString(buf,buf_size,fmt,NULL);
   hb_itemPutC( hb_paramError( 1 ), buf );
   hb_xfree( buf );
   hb_retni( ret );
}

/* int igImFormatStringV(char* buf,size_t buf_size,const char* fmt,va_list args) */
HB_FUNC( IGIMFORMATSTRINGV )
{
   char* buf = hb_itemGetC( hb_paramError( 1 ) );
   size_t buf_size = ( size_t ) hb_parnl( 2 );
   const char* fmt = hb_parcx( 3 );
   /* unsupported */
}

/* ImGuiDir igImGetDirQuadrantFromDelta(float dx,float dy) */
HB_FUNC( IGIMGETDIRQUADRANTFROMDELTA )
{
   float dx = ( float ) hb_parnd( 1 );
   float dy = ( float ) hb_parnd( 2 );
   ImGuiDir ret = igImGetDirQuadrantFromDelta(dx,dy);
   hb_retni( ( int ) ret );
}

/* ImGuiID igImHashData(const void* data,size_t data_size,ImU32 seed) */
HB_FUNC( IGIMHASHDATA )
{
   const void* data = ( const void* ) hb_parptr( 1 );
   size_t data_size = ( size_t ) hb_parnl( 2 );
   ImU32 seed = ( HB_U32 ) hb_parnl( 3 );
   ImGuiID ret = igImHashData(data,data_size,seed);
   hb_retni( ( int ) ret );
}

/* ImGuiID igImHashStr(const char* data,size_t data_size,ImU32 seed) */
HB_FUNC( IGIMHASHSTR )
{
   const char* data = hb_parcx( 1 );
   size_t data_size = ( size_t ) hb_parnl( 2 );
   ImU32 seed = ( HB_U32 ) hb_parnl( 3 );
   ImGuiID ret = igImHashStr(data,data_size,seed);
   hb_retni( ( int ) ret );
}

/* float igImInvLength(const ImVec2 lhs,float fail_value) */
HB_FUNC( IGIMINVLENGTH )
{
   PHB_ITEM plhs = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 lhs = ImVec2{ _paf( plhs, 1 ), _paf( plhs, 2 ) };
   float fail_value = ( float ) hb_parnd( 2 );
   float ret = igImInvLength(lhs,fail_value);
   hb_retnd( ( double ) ret );
}

/* bool igImIsPowerOfTwo_Int(int v) */
HB_FUNC( IGIMISPOWEROFTWOINT )
{
   int v = hb_parni( 1 );
   bool ret = igImIsPowerOfTwo_Int(v);
   hb_retl( ret );
}

/* bool igImIsPowerOfTwo_U64(ImU64 v) */
HB_FUNC( IGIMISPOWEROFTWOU64 )
{
   ImU64 v;
   bool ret = igImIsPowerOfTwo_U64(v);
   hb_retl( ret );
}

/* float igImLengthSqr_Vec2(const ImVec2 lhs) */
HB_FUNC( IGIMLENGTHSQRVEC2 )
{
   PHB_ITEM plhs = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 lhs = ImVec2{ _paf( plhs, 1 ), _paf( plhs, 2 ) };
   float ret = igImLengthSqr_Vec2(lhs);
   hb_retnd( ( double ) ret );
}

/* float igImLengthSqr_Vec4(const ImVec4 lhs) */
HB_FUNC( IGIMLENGTHSQRVEC4 )
{
   PHB_ITEM plhs = hb_param( 1, HB_IT_ARRAY );
   const ImVec4 lhs = ImVec4{ _paf( plhs, 1 ), _paf( plhs, 2 ), _paf( plhs, 3 ), _paf( plhs, 4 ) };
   float ret = igImLengthSqr_Vec4(lhs);
   hb_retnd( ( double ) ret );
}

/* void igImLerp_Vec2Float(ImVec2 *pOut,const ImVec2 a,const ImVec2 b,float t) */
HB_FUNC( IGIMLERPVEC2FLOAT )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   PHB_ITEM pa = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 a = ImVec2{ _paf( pa, 1 ), _paf( pa, 2 ) };
   PHB_ITEM pb = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 b = ImVec2{ _paf( pb, 1 ), _paf( pb, 2 ) };
   float t = ( float ) hb_parnd( 4 );
   igImLerp_Vec2Float(&pOut,a,b,t);
   _ImVec2toA( &pOut, pOutItem );
}

/* void igImLerp_Vec2Vec2(ImVec2 *pOut,const ImVec2 a,const ImVec2 b,const ImVec2 t) */
HB_FUNC( IGIMLERPVEC2VEC2 )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   PHB_ITEM pa = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 a = ImVec2{ _paf( pa, 1 ), _paf( pa, 2 ) };
   PHB_ITEM pb = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 b = ImVec2{ _paf( pb, 1 ), _paf( pb, 2 ) };
   PHB_ITEM pt = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 t = ImVec2{ _paf( pt, 1 ), _paf( pt, 2 ) };
   igImLerp_Vec2Vec2(&pOut,a,b,t);
   _ImVec2toA( &pOut, pOutItem );
}

/* void igImLerp_Vec4(ImVec4 *pOut,const ImVec4 a,const ImVec4 b,float t) */
HB_FUNC( IGIMLERPVEC4 )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec4 pOut;
   PHB_ITEM pa = hb_param( 2, HB_IT_ARRAY );
   const ImVec4 a = ImVec4{ _paf( pa, 1 ), _paf( pa, 2 ), _paf( pa, 3 ), _paf( pa, 4 ) };
   PHB_ITEM pb = hb_param( 3, HB_IT_ARRAY );
   const ImVec4 b = ImVec4{ _paf( pb, 1 ), _paf( pb, 2 ), _paf( pb, 3 ), _paf( pb, 4 ) };
   float t = ( float ) hb_parnd( 4 );
   igImLerp_Vec4(&pOut,a,b,t);
   _ImVec4toA( &pOut, pOutItem );
}

/* void igImLineClosestPoint(ImVec2 *pOut,const ImVec2 a,const ImVec2 b,const ImVec2 p) */
HB_FUNC( IGIMLINECLOSESTPOINT )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   PHB_ITEM pa = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 a = ImVec2{ _paf( pa, 1 ), _paf( pa, 2 ) };
   PHB_ITEM pb = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 b = ImVec2{ _paf( pb, 1 ), _paf( pb, 2 ) };
   PHB_ITEM pp = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 p = ImVec2{ _paf( pp, 1 ), _paf( pp, 2 ) };
   igImLineClosestPoint(&pOut,a,b,p);
   _ImVec2toA( &pOut, pOutItem );
}

/* float igImLinearSweep(float current,float target,float speed) */
HB_FUNC( IGIMLINEARSWEEP )
{
   float current = ( float ) hb_parnd( 1 );
   float target = ( float ) hb_parnd( 2 );
   float speed = ( float ) hb_parnd( 3 );
   float ret = igImLinearSweep(current,target,speed);
   hb_retnd( ( double ) ret );
}

/* float igImLog_Float(float x) */
HB_FUNC( IGIMLOGFLOAT )
{
   float x = ( float ) hb_parnd( 1 );
   float ret = igImLog_Float(x);
   hb_retnd( ( double ) ret );
}

/* double igImLog_double(double x) */
HB_FUNC( IGIMLOGDOUBLE )
{
   double x = hb_parnd( 1 );
   double ret = igImLog_double(x);
   hb_retnd( ret );
}

/* void igImMax(ImVec2 *pOut,const ImVec2 lhs,const ImVec2 rhs) */
HB_FUNC( IGIMMAX )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   PHB_ITEM plhs = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 lhs = ImVec2{ _paf( plhs, 1 ), _paf( plhs, 2 ) };
   PHB_ITEM prhs = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 rhs = ImVec2{ _paf( prhs, 1 ), _paf( prhs, 2 ) };
   igImMax(&pOut,lhs,rhs);
   _ImVec2toA( &pOut, pOutItem );
}

/* void igImMin(ImVec2 *pOut,const ImVec2 lhs,const ImVec2 rhs) */
HB_FUNC( IGIMMIN )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   PHB_ITEM plhs = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 lhs = ImVec2{ _paf( plhs, 1 ), _paf( plhs, 2 ) };
   PHB_ITEM prhs = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 rhs = ImVec2{ _paf( prhs, 1 ), _paf( prhs, 2 ) };
   igImMin(&pOut,lhs,rhs);
   _ImVec2toA( &pOut, pOutItem );
}

/* int igImModPositive(int a,int b) */
HB_FUNC( IGIMMODPOSITIVE )
{
   int a = hb_parni( 1 );
   int b = hb_parni( 2 );
   int ret = igImModPositive(a,b);
   hb_retni( ret );
}

/* void igImMul(ImVec2 *pOut,const ImVec2 lhs,const ImVec2 rhs) */
HB_FUNC( IGIMMUL )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   PHB_ITEM plhs = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 lhs = ImVec2{ _paf( plhs, 1 ), _paf( plhs, 2 ) };
   PHB_ITEM prhs = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 rhs = ImVec2{ _paf( prhs, 1 ), _paf( prhs, 2 ) };
   igImMul(&pOut,lhs,rhs);
   _ImVec2toA( &pOut, pOutItem );
}

/* const char* igImParseFormatFindEnd(const char* format) */
HB_FUNC( IGIMPARSEFORMATFINDEND )
{
   const char* format = hb_parcx( 1 );
   const char* ret = igImParseFormatFindEnd(format);
   hb_retc( ret );
}

/* const char* igImParseFormatFindStart(const char* format) */
HB_FUNC( IGIMPARSEFORMATFINDSTART )
{
   const char* format = hb_parcx( 1 );
   const char* ret = igImParseFormatFindStart(format);
   hb_retc( ret );
}

/* int igImParseFormatPrecision(const char* format,int default_value) */
HB_FUNC( IGIMPARSEFORMATPRECISION )
{
   const char* format = hb_parcx( 1 );
   int default_value = hb_parni( 2 );
   int ret = igImParseFormatPrecision(format,default_value);
   hb_retni( ret );
}

/* const char* igImParseFormatTrimDecorations(const char* format,char* buf,size_t buf_size) */
HB_FUNC( IGIMPARSEFORMATTRIMDECORATIONS )
{
   const char* format = hb_parcx( 1 );
   char* buf = hb_itemGetC( hb_paramError( 2 ) );
   size_t buf_size = ( size_t ) hb_parnl( 3 );
   const char* ret = igImParseFormatTrimDecorations(format,buf,buf_size);
   hb_itemPutC( hb_paramError( 2 ), buf );
   hb_xfree( buf );
   hb_retc( ret );
}

/* float igImPow_Float(float x,float y) */
HB_FUNC( IGIMPOWFLOAT )
{
   float x = ( float ) hb_parnd( 1 );
   float y = ( float ) hb_parnd( 2 );
   float ret = igImPow_Float(x,y);
   hb_retnd( ( double ) ret );
}

/* double igImPow_double(double x,double y) */
HB_FUNC( IGIMPOWDOUBLE )
{
   double x = hb_parnd( 1 );
   double y = hb_parnd( 2 );
   double ret = igImPow_double(x,y);
   hb_retnd( ret );
}

/* void igImRotate(ImVec2 *pOut,const ImVec2 v,float cos_a,float sin_a) */
HB_FUNC( IGIMROTATE )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   PHB_ITEM pv = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 v = ImVec2{ _paf( pv, 1 ), _paf( pv, 2 ) };
   float cos_a = ( float ) hb_parnd( 3 );
   float sin_a = ( float ) hb_parnd( 4 );
   igImRotate(&pOut,v,cos_a,sin_a);
   _ImVec2toA( &pOut, pOutItem );
}

/* float igImRsqrt_Float(float x) */
HB_FUNC( IGIMRSQRTFLOAT )
{
   float x = ( float ) hb_parnd( 1 );
   float ret = igImRsqrt_Float(x);
   hb_retnd( ( double ) ret );
}

/* double igImRsqrt_double(double x) */
HB_FUNC( IGIMRSQRTDOUBLE )
{
   double x = hb_parnd( 1 );
   double ret = igImRsqrt_double(x);
   hb_retnd( ret );
}

/* float igImSaturate(float f) */
HB_FUNC( IGIMSATURATE )
{
   float f = ( float ) hb_parnd( 1 );
   float ret = igImSaturate(f);
   hb_retnd( ( double ) ret );
}

/* float igImSign_Float(float x) */
HB_FUNC( IGIMSIGNFLOAT )
{
   float x = ( float ) hb_parnd( 1 );
   float ret = igImSign_Float(x);
   hb_retnd( ( double ) ret );
}

/* double igImSign_double(double x) */
HB_FUNC( IGIMSIGNDOUBLE )
{
   double x = hb_parnd( 1 );
   double ret = igImSign_double(x);
   hb_retnd( ret );
}

/* const char* igImStrSkipBlank(const char* str) */
HB_FUNC( IGIMSTRSKIPBLANK )
{
   const char* str = hb_parcx( 1 );
   const char* ret = igImStrSkipBlank(str);
   hb_retc( ret );
}

/* void igImStrTrimBlanks(char* str) */
HB_FUNC( IGIMSTRTRIMBLANKS )
{
   char* str = hb_itemGetC( hb_paramError( 1 ) );
   igImStrTrimBlanks(str);
   hb_itemPutC( hb_paramError( 1 ), str );
   hb_xfree( str );
}

/* const ImWchar* igImStrbolW(const ImWchar* buf_mid_line,const ImWchar* buf_begin) */
HB_FUNC( IGIMSTRBOLW )
{
   const ImWchar* buf_mid_line = ( const ImWchar* ) hb_parptr( 1 );
   const ImWchar* buf_begin = ( const ImWchar* ) hb_parptr( 2 );
   const ImWchar* ret = igImStrbolW(buf_mid_line,buf_begin);
   hb_retptr( ( void * ) ret );
}

/* const char* igImStrchrRange(const char* str_begin,const char* str_end,char c) */
HB_FUNC( IGIMSTRCHRRANGE )
{
   const char* str_begin = hb_parcx( 1 );
   const char* str_end = hb_parcx( 2 );
   char c;
   const char* ret = igImStrchrRange(str_begin,str_end,c);
   hb_retc( ret );
}

/* char* igImStrdup(const char* str) */
HB_FUNC( IGIMSTRDUP )
{
   const char* str = hb_parcx( 1 );
   char* ret = igImStrdup(str);
   hb_retptr( ( void * ) ret );
}

/* char* igImStrdupcpy(char* dst,size_t* p_dst_size,const char* str) */
HB_FUNC( IGIMSTRDUPCPY )
{
   char* dst = hb_itemGetC( hb_paramError( 1 ) );
   size_t /* @ */ _p_dst_size = ( size_t /* @ */ ) hb_parnl( 2 );
   size_t * p_dst_size = &_p_dst_size;
   const char* str = hb_parcx( 3 );
   char* ret = igImStrdupcpy(dst,p_dst_size,str);
   hb_itemPutC( hb_paramError( 1 ), dst );
   hb_xfree( dst );
   hb_itemPutNL( hb_paramError( 2 ), _p_dst_size );
   hb_retptr( ( void * ) ret );
}

/* const char* igImStreolRange(const char* str,const char* str_end) */
HB_FUNC( IGIMSTREOLRANGE )
{
   const char* str = hb_parcx( 1 );
   const char* str_end = hb_parcx( 2 );
   const char* ret = igImStreolRange(str,str_end);
   hb_retc( ret );
}

/* int igImStricmp(const char* str1,const char* str2) */
HB_FUNC( IGIMSTRICMP )
{
   const char* str1 = hb_parcx( 1 );
   const char* str2 = hb_parcx( 2 );
   int ret = igImStricmp(str1,str2);
   hb_retni( ret );
}

/* const char* igImStristr(const char* haystack,const char* haystack_end,const char* needle,const char* needle_end) */
HB_FUNC( IGIMSTRISTR )
{
   const char* haystack = hb_parcx( 1 );
   const char* haystack_end = hb_parcx( 2 );
   const char* needle = hb_parcx( 3 );
   const char* needle_end = hb_parcx( 4 );
   const char* ret = igImStristr(haystack,haystack_end,needle,needle_end);
   hb_retc( ret );
}

/* int igImStrlenW(const ImWchar* str) */
HB_FUNC( IGIMSTRLENW )
{
   const ImWchar* str = ( const ImWchar* ) hb_parptr( 1 );
   int ret = igImStrlenW(str);
   hb_retni( ret );
}

/* void igImStrncpy(char* dst,const char* src,size_t count) */
HB_FUNC( IGIMSTRNCPY )
{
   char* dst = hb_itemGetC( hb_paramError( 1 ) );
   const char* src = hb_parcx( 2 );
   size_t count = ( size_t ) hb_parnl( 3 );
   igImStrncpy(dst,src,count);
   hb_itemPutC( hb_paramError( 1 ), dst );
   hb_xfree( dst );
}

/* int igImStrnicmp(const char* str1,const char* str2,size_t count) */
HB_FUNC( IGIMSTRNICMP )
{
   const char* str1 = hb_parcx( 1 );
   const char* str2 = hb_parcx( 2 );
   size_t count = ( size_t ) hb_parnl( 3 );
   int ret = igImStrnicmp(str1,str2,count);
   hb_retni( ret );
}

/* int igImTextCharFromUtf8(unsigned int* out_char,const char* in_text,const char* in_text_end) */
HB_FUNC( IGIMTEXTCHARFROMUTF8 )
{
   unsigned int _out_char;
   unsigned int* out_char = &_out_char;
   const char* in_text = hb_parcx( 2 );
   const char* in_text_end = hb_parcx( 3 );
   int ret = igImTextCharFromUtf8(out_char,in_text,in_text_end);
   hb_retni( ret );
}

/* const char* igImTextCharToUtf8(char out_buf[5],unsigned int c) */
HB_FUNC( IGIMTEXTCHARTOUTF8 )
{
   char out_buf[5] = { 0 };
   unsigned int c;
   const char* ret = igImTextCharToUtf8(out_buf,c);
   hb_retc( ret );
}

/* int igImTextCountCharsFromUtf8(const char* in_text,const char* in_text_end) */
HB_FUNC( IGIMTEXTCOUNTCHARSFROMUTF8 )
{
   const char* in_text = hb_parcx( 1 );
   const char* in_text_end = hb_parcx( 2 );
   int ret = igImTextCountCharsFromUtf8(in_text,in_text_end);
   hb_retni( ret );
}

/* int igImTextCountUtf8BytesFromChar(const char* in_text,const char* in_text_end) */
HB_FUNC( IGIMTEXTCOUNTUTF8BYTESFROMCHAR )
{
   const char* in_text = hb_parcx( 1 );
   const char* in_text_end = hb_parcx( 2 );
   int ret = igImTextCountUtf8BytesFromChar(in_text,in_text_end);
   hb_retni( ret );
}

/* int igImTextCountUtf8BytesFromStr(const ImWchar* in_text,const ImWchar* in_text_end) */
HB_FUNC( IGIMTEXTCOUNTUTF8BYTESFROMSTR )
{
   const ImWchar* in_text = ( const ImWchar* ) hb_parptr( 1 );
   const ImWchar* in_text_end = ( const ImWchar* ) hb_parptr( 2 );
   int ret = igImTextCountUtf8BytesFromStr(in_text,in_text_end);
   hb_retni( ret );
}

/* int igImTextStrFromUtf8(ImWchar* out_buf,int out_buf_size,const char* in_text,const char* in_text_end,const char** in_remaining) */
HB_FUNC( IGIMTEXTSTRFROMUTF8 )
{
   ImWchar _out_buf;
   ImWchar* out_buf = &_out_buf;
   int out_buf_size = hb_parni( 2 );
   const char* in_text = hb_parcx( 3 );
   const char* in_text_end = hb_parcx( 4 );
   const char** in_remaining = ( const char** ) hb_parptr( 5 );
   int ret = igImTextStrFromUtf8(out_buf,out_buf_size,in_text,in_text_end,in_remaining);
   hb_retni( ret );
}

/* int igImTextStrToUtf8(char* out_buf,int out_buf_size,const ImWchar* in_text,const ImWchar* in_text_end) */
HB_FUNC( IGIMTEXTSTRTOUTF8 )
{
   char _out_buf;
   char* out_buf = &_out_buf;
   int out_buf_size = hb_parni( 2 );
   const ImWchar* in_text = ( const ImWchar* ) hb_parptr( 3 );
   const ImWchar* in_text_end = ( const ImWchar* ) hb_parptr( 4 );
   int ret = igImTextStrToUtf8(out_buf,out_buf_size,in_text,in_text_end);
   hb_itemPutC( hb_paramError( 1 ), out_buf );
   hb_xfree( out_buf );
   hb_retni( ret );
}

/* float igImTriangleArea(const ImVec2 a,const ImVec2 b,const ImVec2 c) */
HB_FUNC( IGIMTRIANGLEAREA )
{
   PHB_ITEM pa = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 a = ImVec2{ _paf( pa, 1 ), _paf( pa, 2 ) };
   PHB_ITEM pb = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 b = ImVec2{ _paf( pb, 1 ), _paf( pb, 2 ) };
   PHB_ITEM pc = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 c = ImVec2{ _paf( pc, 1 ), _paf( pc, 2 ) };
   float ret = igImTriangleArea(a,b,c);
   hb_retnd( ( double ) ret );
}

/* void igImTriangleBarycentricCoords(const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 p,float* out_u,float* out_v,float* out_w) */
HB_FUNC( IGIMTRIANGLEBARYCENTRICCOORDS )
{
   PHB_ITEM pa = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 a = ImVec2{ _paf( pa, 1 ), _paf( pa, 2 ) };
   PHB_ITEM pb = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 b = ImVec2{ _paf( pb, 1 ), _paf( pb, 2 ) };
   PHB_ITEM pc = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 c = ImVec2{ _paf( pc, 1 ), _paf( pc, 2 ) };
   PHB_ITEM pp = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 p = ImVec2{ _paf( pp, 1 ), _paf( pp, 2 ) };
   float _out_u;
   float* out_u = &_out_u;
   float _out_v;
   float* out_v = &_out_v;
   float _out_w;
   float* out_w = &_out_w;
   igImTriangleBarycentricCoords(a,b,c,p,out_u,out_v,out_w);
   hb_itemPutND( hb_paramError( 5 ), ( double ) _out_u );
   hb_itemPutND( hb_paramError( 6 ), ( double ) _out_v );
   hb_itemPutND( hb_paramError( 7 ), ( double ) _out_w );
}

/* void igImTriangleClosestPoint(ImVec2 *pOut,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 p) */
HB_FUNC( IGIMTRIANGLECLOSESTPOINT )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   PHB_ITEM pa = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 a = ImVec2{ _paf( pa, 1 ), _paf( pa, 2 ) };
   PHB_ITEM pb = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 b = ImVec2{ _paf( pb, 1 ), _paf( pb, 2 ) };
   PHB_ITEM pc = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 c = ImVec2{ _paf( pc, 1 ), _paf( pc, 2 ) };
   PHB_ITEM pp = hb_param( 5, HB_IT_ARRAY );
   const ImVec2 p = ImVec2{ _paf( pp, 1 ), _paf( pp, 2 ) };
   igImTriangleClosestPoint(&pOut,a,b,c,p);
   _ImVec2toA( &pOut, pOutItem );
}

/* bool igImTriangleContainsPoint(const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 p) */
HB_FUNC( IGIMTRIANGLECONTAINSPOINT )
{
   PHB_ITEM pa = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 a = ImVec2{ _paf( pa, 1 ), _paf( pa, 2 ) };
   PHB_ITEM pb = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 b = ImVec2{ _paf( pb, 1 ), _paf( pb, 2 ) };
   PHB_ITEM pc = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 c = ImVec2{ _paf( pc, 1 ), _paf( pc, 2 ) };
   PHB_ITEM pp = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 p = ImVec2{ _paf( pp, 1 ), _paf( pp, 2 ) };
   bool ret = igImTriangleContainsPoint(a,b,c,p);
   hb_retl( ret );
}

/* int igImUpperPowerOfTwo(int v) */
HB_FUNC( IGIMUPPERPOWEROFTWO )
{
   int v = hb_parni( 1 );
   int ret = igImUpperPowerOfTwo(v);
   hb_retni( ret );
}

/* void igImage(ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 tint_col,const ImVec4 border_col) */
/* templates only, see hb_sokol_igImage() for real texture usage
HB_FUNC( IGIMAGE )
{
   ImTextureID user_texture_id;
   PHB_ITEM psize = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   PHB_ITEM puv0 = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 uv0 = ImVec2{ _paf( puv0, 1 ), _paf( puv0, 2 ) };
   PHB_ITEM puv1 = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 uv1 = ImVec2{ _paf( puv1, 1 ), _paf( puv1, 2 ) };
   PHB_ITEM ptint_col = hb_param( 5, HB_IT_ARRAY );
   const ImVec4 tint_col = ImVec4{ _paf( ptint_col, 1 ), _paf( ptint_col, 2 ), _paf( ptint_col, 3 ), _paf( ptint_col, 4 ) };
   PHB_ITEM pborder_col = hb_param( 6, HB_IT_ARRAY );
   const ImVec4 border_col = ImVec4{ _paf( pborder_col, 1 ), _paf( pborder_col, 2 ), _paf( pborder_col, 3 ), _paf( pborder_col, 4 ) };
   igImage(user_texture_id,size,uv0,uv1,tint_col,border_col);
}
*/

/* bool igImageButton(ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,int frame_padding,const ImVec4 bg_col,const ImVec4 tint_col) */
/* templates only, see hb_sokol_igImage() for real texture usage
HB_FUNC( IGIMAGEBUTTON )
{
   ImTextureID user_texture_id;
   PHB_ITEM psize = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   PHB_ITEM puv0 = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 uv0 = ImVec2{ _paf( puv0, 1 ), _paf( puv0, 2 ) };
   PHB_ITEM puv1 = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 uv1 = ImVec2{ _paf( puv1, 1 ), _paf( puv1, 2 ) };
   int frame_padding = hb_parni( 5 );
   PHB_ITEM pbg_col = hb_param( 6, HB_IT_ARRAY );
   const ImVec4 bg_col = ImVec4{ _paf( pbg_col, 1 ), _paf( pbg_col, 2 ), _paf( pbg_col, 3 ), _paf( pbg_col, 4 ) };
   PHB_ITEM ptint_col = hb_param( 7, HB_IT_ARRAY );
   const ImVec4 tint_col = ImVec4{ _paf( ptint_col, 1 ), _paf( ptint_col, 2 ), _paf( ptint_col, 3 ), _paf( ptint_col, 4 ) };
   bool ret = igImageButton(user_texture_id,size,uv0,uv1,frame_padding,bg_col,tint_col);
   hb_retl( ret );
}
*/

/* bool igImageButtonEx(ImGuiID id,ImTextureID texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,const ImVec2 padding,const ImVec4 bg_col,const ImVec4 tint_col) */
HB_FUNC( IGIMAGEBUTTONEX )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   ImTextureID texture_id;
   PHB_ITEM psize = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   PHB_ITEM puv0 = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 uv0 = ImVec2{ _paf( puv0, 1 ), _paf( puv0, 2 ) };
   PHB_ITEM puv1 = hb_param( 5, HB_IT_ARRAY );
   const ImVec2 uv1 = ImVec2{ _paf( puv1, 1 ), _paf( puv1, 2 ) };
   PHB_ITEM ppadding = hb_param( 6, HB_IT_ARRAY );
   const ImVec2 padding = ImVec2{ _paf( ppadding, 1 ), _paf( ppadding, 2 ) };
   PHB_ITEM pbg_col = hb_param( 7, HB_IT_ARRAY );
   const ImVec4 bg_col = ImVec4{ _paf( pbg_col, 1 ), _paf( pbg_col, 2 ), _paf( pbg_col, 3 ), _paf( pbg_col, 4 ) };
   PHB_ITEM ptint_col = hb_param( 8, HB_IT_ARRAY );
   const ImVec4 tint_col = ImVec4{ _paf( ptint_col, 1 ), _paf( ptint_col, 2 ), _paf( ptint_col, 3 ), _paf( ptint_col, 4 ) };
   bool ret = igImageButtonEx(id,texture_id,size,uv0,uv1,padding,bg_col,tint_col);
   hb_retl( ret );
}

/* void igIndent(float indent_w) */
HB_FUNC( IGINDENT )
{
   float indent_w = ( float ) hb_parnd( 1 );
   igIndent(indent_w);
}

/* void igInitialize(ImGuiContext* context) */
HB_FUNC( IGINITIALIZE )
{
   ImGuiContext* context = ( ImGuiContext* ) hb_parptr( 1 );
   igInitialize(context);
}

/* bool igInputDouble(const char* label,double* v,double step,double step_fast,const char* format,ImGuiInputTextFlags flags) */
HB_FUNC( IGINPUTDOUBLE )
{
   const char* label = hb_parcx( 1 );
   double /* @ */ _v = hb_parnd( 2 );
   double * v = &_v;
   double step = hb_parnd( 3 );
   double step_fast = hb_parnd( 4 );
   const char* format = hb_parcx( 5 );
   ImGuiInputTextFlags flags = ( ImGuiInputTextFlags ) hb_parni( 6 );
   bool ret = igInputDouble(label,v,step,step_fast,format,flags);
   hb_itemPutND( hb_paramError( 2 ), _v );
   hb_retl( ret );
}

/* bool igInputFloat(const char* label,float* v,float step,float step_fast,const char* format,ImGuiInputTextFlags flags) */
HB_FUNC( IGINPUTFLOAT )
{
   const char* label = hb_parcx( 1 );
   float /* @ */ _v = ( float ) hb_parnd( 2 );
   float * v = &_v;
   float step = ( float ) hb_parnd( 3 );
   float step_fast = ( float ) hb_parnd( 4 );
   const char* format = hb_parcx( 5 );
   ImGuiInputTextFlags flags = ( ImGuiInputTextFlags ) hb_parni( 6 );
   bool ret = igInputFloat(label,v,step,step_fast,format,flags);
   hb_itemPutND( hb_paramError( 2 ), ( double ) _v );
   hb_retl( ret );
}

/* bool igInputFloat2(const char* label,float v[2],const char* format,ImGuiInputTextFlags flags) */
HB_FUNC( IGINPUTFLOAT2 )
{
   const char* label = hb_parcx( 1 );
   float * v;
   PHB_IG_FLOATS _v = hb_ig_floats_par( 2 );
   const char* format = hb_parcx( 3 );
   ImGuiInputTextFlags flags = ( ImGuiInputTextFlags ) hb_parni( 4 );
   static float s_v[2] = { 0,0 };
   if( _v && _v->nSize >= 2 )
      v = _v->pBuf;
   else
      v = &s_v[0];
   bool ret = igInputFloat2(label,v,format,flags);
   hb_retl( ret );
}

/* bool igInputFloat3(const char* label,float v[3],const char* format,ImGuiInputTextFlags flags) */
HB_FUNC( IGINPUTFLOAT3 )
{
   const char* label = hb_parcx( 1 );
   float * v;
   PHB_IG_FLOATS _v = hb_ig_floats_par( 2 );
   const char* format = hb_parcx( 3 );
   ImGuiInputTextFlags flags = ( ImGuiInputTextFlags ) hb_parni( 4 );
   static float s_v[3] = { 0,0,0 };
   if( _v && _v->nSize >= 3 )
      v = _v->pBuf;
   else
      v = &s_v[0];
   bool ret = igInputFloat3(label,v,format,flags);
   hb_retl( ret );
}

/* bool igInputFloat4(const char* label,float v[4],const char* format,ImGuiInputTextFlags flags) */
HB_FUNC( IGINPUTFLOAT4 )
{
   const char* label = hb_parcx( 1 );
   float * v;
   PHB_IG_FLOATS _v = hb_ig_floats_par( 2 );
   const char* format = hb_parcx( 3 );
   ImGuiInputTextFlags flags = ( ImGuiInputTextFlags ) hb_parni( 4 );
   static float s_v[4] = { 0,0,0,0 };
   if( _v && _v->nSize >= 4 )
      v = _v->pBuf;
   else
      v = &s_v[0];
   bool ret = igInputFloat4(label,v,format,flags);
   hb_retl( ret );
}

/* bool igInputInt(const char* label,int* v,int step,int step_fast,ImGuiInputTextFlags flags) */
HB_FUNC( IGINPUTINT )
{
   const char* label = hb_parcx( 1 );
   int /* @ */ _v = hb_parni( 2 );
   int * v = &_v;
   int step = hb_parni( 3 );
   int step_fast = hb_parni( 4 );
   ImGuiInputTextFlags flags = ( ImGuiInputTextFlags ) hb_parni( 5 );
   bool ret = igInputInt(label,v,step,step_fast,flags);
   hb_itemPutNI( hb_paramError( 2 ), _v );
   hb_retl( ret );
}

/* bool igInputInt2(const char* label,int v[2],ImGuiInputTextFlags flags) */
HB_FUNC( IGINPUTINT2 )
{
   const char* label = hb_parcx( 1 );
   int * v;
   PHB_IG_INTS _v = hb_ig_ints_par( 2 );
   ImGuiInputTextFlags flags = ( ImGuiInputTextFlags ) hb_parni( 3 );
   static int s_v[2] = { 0,0 };
   if( _v && _v->nSize >= 2 )
      v = _v->pBuf;
   else
      v = &s_v[0];
   bool ret = igInputInt2(label,v,flags);
   hb_retl( ret );
}

/* bool igInputInt3(const char* label,int v[3],ImGuiInputTextFlags flags) */
HB_FUNC( IGINPUTINT3 )
{
   const char* label = hb_parcx( 1 );
   int * v;
   PHB_IG_INTS _v = hb_ig_ints_par( 2 );
   ImGuiInputTextFlags flags = ( ImGuiInputTextFlags ) hb_parni( 3 );
   static int s_v[3] = { 0,0,0 };
   if( _v && _v->nSize >= 3 )
      v = _v->pBuf;
   else
      v = &s_v[0];
   bool ret = igInputInt3(label,v,flags);
   hb_retl( ret );
}

/* bool igInputInt4(const char* label,int v[4],ImGuiInputTextFlags flags) */
HB_FUNC( IGINPUTINT4 )
{
   const char* label = hb_parcx( 1 );
   int * v;
   PHB_IG_INTS _v = hb_ig_ints_par( 2 );
   ImGuiInputTextFlags flags = ( ImGuiInputTextFlags ) hb_parni( 3 );
   static int s_v[4] = { 0,0,0,0 };
   if( _v && _v->nSize >= 4 )
      v = _v->pBuf;
   else
      v = &s_v[0];
   bool ret = igInputInt4(label,v,flags);
   hb_retl( ret );
}

/* bool igInputScalar(const char* label,ImGuiDataType data_type,void* p_data,const void* p_step,const void* p_step_fast,const char* format,ImGuiInputTextFlags flags) */
HB_FUNC( IGINPUTSCALAR )
{
   const char* label = hb_parcx( 1 );
   ImGuiDataType data_type = ( ImGuiDataType ) hb_parni( 2 );
   void* p_data = ( void* ) hb_parptr( 3 );
   const void* p_step = ( const void* ) hb_parptr( 4 );
   const void* p_step_fast = ( const void* ) hb_parptr( 5 );
   const char* format = hb_parcx( 6 );
   ImGuiInputTextFlags flags = ( ImGuiInputTextFlags ) hb_parni( 7 );
   bool ret = igInputScalar(label,data_type,p_data,p_step,p_step_fast,format,flags);
   hb_retl( ret );
}

/* bool igInputScalarN(const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_step,const void* p_step_fast,const char* format,ImGuiInputTextFlags flags) */
HB_FUNC( IGINPUTSCALARN )
{
   const char* label = hb_parcx( 1 );
   ImGuiDataType data_type = ( ImGuiDataType ) hb_parni( 2 );
   void* p_data = ( void* ) hb_parptr( 3 );
   int components = hb_parni( 4 );
   const void* p_step = ( const void* ) hb_parptr( 5 );
   const void* p_step_fast = ( const void* ) hb_parptr( 6 );
   const char* format = hb_parcx( 7 );
   ImGuiInputTextFlags flags = ( ImGuiInputTextFlags ) hb_parni( 8 );
   bool ret = igInputScalarN(label,data_type,p_data,components,p_step,p_step_fast,format,flags);
   hb_retl( ret );
}

/* bool igInputText(const char* label,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data) */
HB_FUNC( IGINPUTTEXT )
{
   const char* label = hb_parcx( 1 );
   HB_SIZE item_size = hb_parclen( 2 );
   char* buf = hb_itemGetC( hb_paramError( 2 ) );
   size_t buf_size = ( size_t ) hb_parnl( 3 );
   ImGuiInputTextFlags flags = ( ImGuiInputTextFlags ) hb_parni( 4 );
   ImGuiInputTextCallback callback;
   void* user_data = ( void* ) hb_parptr( 6 );
   HB_BOOL bResizable = ( flags & ImGuiInputTextFlags_CallbackResize ) != 0;
   HB_IG_TEXT_DATA text_data;
   if( item_size < buf_size )
      buf = ( char * ) hb_xrealloc( buf, buf_size + 1 );
   else if( buf_size <= 0 )
      buf_size = item_size;
   buf_size++;
   if( bResizable )
   {
      text_data.pNewBuf = NULL;
      text_data.nBufSize = buf_size;
      user_data = &text_data;
      callback = &hb_ig_text_cb;
   }
   else
   {
      /* make this behaviour a flag(?), don't remove spaces on PICTURE-d inputs */
      HB_SIZE n = buf_size - 1;
      while( n >= 1 && buf[ n - 1 ] == ' ' )
         n--;
      buf[ n ] = '\0';
   }
   bool ret = igInputText(label,buf,buf_size,flags,callback,user_data);
   if( bResizable && text_data.pNewBuf )
   {
      buf = text_data.pNewBuf;
      if( HB_ISBYREF( 3 ) )
         hb_itemPutNI( hb_param( 3, HB_IT_ANY ), text_data.nBufSize - 1 );
   }
   if( igIsItemEdited() )
   {
      if( ! bResizable )
      {
         HB_SIZE n = strlen( buf );
         while( n < buf_size - 1 )
            buf[ n++ ] = ' ';
         buf[ n ] = '\0';
      }
      hb_itemPutC( hb_paramError( 2 ), buf );
   }
   hb_xfree( buf );
   hb_retl( ret );
}

/* bool igInputTextEx(const char* label,const char* hint,char* buf,int buf_size,const ImVec2 size_arg,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data) */
HB_FUNC( IGINPUTTEXTEX )
{
   const char* label = hb_parcx( 1 );
   const char* hint = hb_parcx( 2 );
   HB_SIZE item_size = hb_parclen( 3 );
   char* buf = hb_itemGetC( hb_paramError( 3 ) );
   int buf_size = hb_parni( 4 );
   PHB_ITEM psize_arg = hb_param( 5, HB_IT_ARRAY );
   const ImVec2 size_arg = ImVec2{ _paf( psize_arg, 1 ), _paf( psize_arg, 2 ) };
   ImGuiInputTextFlags flags = ( ImGuiInputTextFlags ) hb_parni( 6 );
   ImGuiInputTextCallback callback;
   void* user_data = ( void* ) hb_parptr( 8 );
   HB_BOOL bResizable = ( flags & ImGuiInputTextFlags_CallbackResize ) != 0;
   HB_IG_TEXT_DATA text_data;
   if( item_size < buf_size )
      buf = ( char * ) hb_xrealloc( buf, buf_size + 1 );
   else if( buf_size <= 0 )
      buf_size = item_size;
   buf_size++;
   if( bResizable )
   {
      text_data.pNewBuf = NULL;
      text_data.nBufSize = buf_size;
      user_data = &text_data;
      callback = &hb_ig_text_cb;
   }
   else
   {
      /* make this behaviour a flag(?), don't remove spaces on PICTURE-d inputs */
      HB_SIZE n = buf_size - 1;
      while( n >= 1 && buf[ n - 1 ] == ' ' )
         n--;
      buf[ n ] = '\0';
   }
   bool ret = igInputTextEx(label,hint,buf,buf_size,size_arg,flags,callback,user_data);
   if( bResizable && text_data.pNewBuf )
   {
      buf = text_data.pNewBuf;
      if( HB_ISBYREF( 4 ) )
         hb_itemPutNI( hb_param( 4, HB_IT_ANY ), text_data.nBufSize - 1 );
   }
   if( igIsItemEdited() )
   {
      if( ! bResizable )
      {
         HB_SIZE n = strlen( buf );
         while( n < buf_size - 1 )
            buf[ n++ ] = ' ';
         buf[ n ] = '\0';
      }
      hb_itemPutC( hb_paramError( 3 ), buf );
   }
   hb_xfree( buf );
   hb_retl( ret );
}

/* bool igInputTextMultiline(const char* label,char* buf,size_t buf_size,const ImVec2 size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data) */
HB_FUNC( IGINPUTTEXTMULTILINE )
{
   const char* label = hb_parcx( 1 );
   HB_SIZE item_size = hb_parclen( 2 );
   char* buf = hb_itemGetC( hb_paramError( 2 ) );
   size_t buf_size = ( size_t ) hb_parnl( 3 );
   PHB_ITEM psize = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   ImGuiInputTextFlags flags = ( ImGuiInputTextFlags ) hb_parni( 5 );
   ImGuiInputTextCallback callback;
   void* user_data = ( void* ) hb_parptr( 7 );
   HB_BOOL bResizable = ( flags & ImGuiInputTextFlags_CallbackResize ) != 0;
   HB_IG_TEXT_DATA text_data;
   if( item_size < buf_size )
      buf = ( char * ) hb_xrealloc( buf, buf_size + 1 );
   else if( buf_size <= 0 )
      buf_size = item_size;
   buf_size++;
   if( bResizable )
   {
      text_data.pNewBuf = NULL;
      text_data.nBufSize = buf_size;
      user_data = &text_data;
      callback = &hb_ig_text_cb;
   }
   else
   {
      /* make this behaviour a flag(?), don't remove spaces on PICTURE-d inputs */
      HB_SIZE n = buf_size - 1;
      while( n >= 1 && buf[ n - 1 ] == ' ' )
         n--;
      buf[ n ] = '\0';
   }
   bool ret = igInputTextMultiline(label,buf,buf_size,size,flags,callback,user_data);
   if( bResizable && text_data.pNewBuf )
   {
      buf = text_data.pNewBuf;
      if( HB_ISBYREF( 3 ) )
         hb_itemPutNI( hb_param( 3, HB_IT_ANY ), text_data.nBufSize - 1 );
   }
   if( igIsItemEdited() )
   {
      if( ! bResizable )
      {
         HB_SIZE n = strlen( buf );
         while( n < buf_size - 1 )
            buf[ n++ ] = ' ';
         buf[ n ] = '\0';
      }
      hb_itemPutC( hb_paramError( 2 ), buf );
   }
   hb_xfree( buf );
   hb_retl( ret );
}

/* bool igInputTextWithHint(const char* label,const char* hint,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data) */
HB_FUNC( IGINPUTTEXTWITHHINT )
{
   const char* label = hb_parcx( 1 );
   const char* hint = hb_parcx( 2 );
   HB_SIZE item_size = hb_parclen( 3 );
   char* buf = hb_itemGetC( hb_paramError( 3 ) );
   size_t buf_size = ( size_t ) hb_parnl( 4 );
   ImGuiInputTextFlags flags = ( ImGuiInputTextFlags ) hb_parni( 5 );
   ImGuiInputTextCallback callback;
   void* user_data = ( void* ) hb_parptr( 7 );
   HB_BOOL bResizable = ( flags & ImGuiInputTextFlags_CallbackResize ) != 0;
   HB_IG_TEXT_DATA text_data;
   if( item_size < buf_size )
      buf = ( char * ) hb_xrealloc( buf, buf_size + 1 );
   else if( buf_size <= 0 )
      buf_size = item_size;
   buf_size++;
   if( bResizable )
   {
      text_data.pNewBuf = NULL;
      text_data.nBufSize = buf_size;
      user_data = &text_data;
      callback = &hb_ig_text_cb;
   }
   else
   {
      /* make this behaviour a flag(?), don't remove spaces on PICTURE-d inputs */
      HB_SIZE n = buf_size - 1;
      while( n >= 1 && buf[ n - 1 ] == ' ' )
         n--;
      buf[ n ] = '\0';
   }
   bool ret = igInputTextWithHint(label,hint,buf,buf_size,flags,callback,user_data);
   if( bResizable && text_data.pNewBuf )
   {
      buf = text_data.pNewBuf;
      if( HB_ISBYREF( 4 ) )
         hb_itemPutNI( hb_param( 4, HB_IT_ANY ), text_data.nBufSize - 1 );
   }
   if( igIsItemEdited() )
   {
      if( ! bResizable )
      {
         HB_SIZE n = strlen( buf );
         while( n < buf_size - 1 )
            buf[ n++ ] = ' ';
         buf[ n ] = '\0';
      }
      hb_itemPutC( hb_paramError( 3 ), buf );
   }
   hb_xfree( buf );
   hb_retl( ret );
}

/* bool igInvisibleButton(const char* str_id,const ImVec2 size,ImGuiButtonFlags flags) */
HB_FUNC( IGINVISIBLEBUTTON )
{
   const char* str_id = hb_parcx( 1 );
   PHB_ITEM psize = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   ImGuiButtonFlags flags = ( ImGuiButtonFlags ) hb_parni( 3 );
   bool ret = igInvisibleButton(str_id,size,flags);
   hb_retl( ret );
}

/* bool igIsActiveIdUsingKey(ImGuiKey key) */
HB_FUNC( IGISACTIVEIDUSINGKEY )
{
   ImGuiKey key = ( ImGuiKey ) hb_parni( 1 );
   bool ret = igIsActiveIdUsingKey(key);
   hb_retl( ret );
}

/* bool igIsActiveIdUsingNavDir(ImGuiDir dir) */
HB_FUNC( IGISACTIVEIDUSINGNAVDIR )
{
   ImGuiDir dir = ( ImGuiDir ) hb_parni( 1 );
   bool ret = igIsActiveIdUsingNavDir(dir);
   hb_retl( ret );
}

/* bool igIsActiveIdUsingNavInput(ImGuiNavInput input) */
HB_FUNC( IGISACTIVEIDUSINGNAVINPUT )
{
   ImGuiNavInput input = ( ImGuiNavInput ) hb_parni( 1 );
   bool ret = igIsActiveIdUsingNavInput(input);
   hb_retl( ret );
}

/* bool igIsAnyItemActive() */
HB_FUNC( IGISANYITEMACTIVE )
{
   bool ret = igIsAnyItemActive();
   hb_retl( ret );
}

/* bool igIsAnyItemFocused() */
HB_FUNC( IGISANYITEMFOCUSED )
{
   bool ret = igIsAnyItemFocused();
   hb_retl( ret );
}

/* bool igIsAnyItemHovered() */
HB_FUNC( IGISANYITEMHOVERED )
{
   bool ret = igIsAnyItemHovered();
   hb_retl( ret );
}

/* bool igIsAnyMouseDown() */
HB_FUNC( IGISANYMOUSEDOWN )
{
   bool ret = igIsAnyMouseDown();
   hb_retl( ret );
}

/* bool igIsClippedEx(const ImRect bb,ImGuiID id) */
HB_FUNC( IGISCLIPPEDEX )
{
   PHB_ITEM pbb = hb_param( 1, HB_IT_ARRAY );
   const ImRect bb = ImRect{ ImVec2{ _paf( pbb, 1 ), _paf( pbb, 2 ) }, ImVec2{ _paf( pbb, 3 ), _paf( pbb, 4 ) } };
   ImGuiID id = ( ImGuiID ) hb_parni( 2 );
   bool ret = igIsClippedEx(bb,id);
   hb_retl( ret );
}

/* bool igIsDragDropPayloadBeingAccepted() */
HB_FUNC( IGISDRAGDROPPAYLOADBEINGACCEPTED )
{
   bool ret = igIsDragDropPayloadBeingAccepted();
   hb_retl( ret );
}

/* bool igIsItemActivated() */
HB_FUNC( IGISITEMACTIVATED )
{
   bool ret = igIsItemActivated();
   hb_retl( ret );
}

/* bool igIsItemActive() */
HB_FUNC( IGISITEMACTIVE )
{
   bool ret = igIsItemActive();
   hb_retl( ret );
}

/* bool igIsItemClicked(ImGuiMouseButton mouse_button) */
HB_FUNC( IGISITEMCLICKED )
{
   ImGuiMouseButton mouse_button = ( ImGuiMouseButton ) hb_parni( 1 );
   bool ret = igIsItemClicked(mouse_button);
   hb_retl( ret );
}

/* bool igIsItemDeactivated() */
HB_FUNC( IGISITEMDEACTIVATED )
{
   bool ret = igIsItemDeactivated();
   hb_retl( ret );
}

/* bool igIsItemDeactivatedAfterEdit() */
HB_FUNC( IGISITEMDEACTIVATEDAFTEREDIT )
{
   bool ret = igIsItemDeactivatedAfterEdit();
   hb_retl( ret );
}

/* bool igIsItemEdited() */
HB_FUNC( IGISITEMEDITED )
{
   bool ret = igIsItemEdited();
   hb_retl( ret );
}

/* bool igIsItemFocused() */
HB_FUNC( IGISITEMFOCUSED )
{
   bool ret = igIsItemFocused();
   hb_retl( ret );
}

/* bool igIsItemHovered(ImGuiHoveredFlags flags) */
HB_FUNC( IGISITEMHOVERED )
{
   ImGuiHoveredFlags flags = ( ImGuiHoveredFlags ) hb_parni( 1 );
   bool ret = igIsItemHovered(flags);
   hb_retl( ret );
}

/* bool igIsItemToggledOpen() */
HB_FUNC( IGISITEMTOGGLEDOPEN )
{
   bool ret = igIsItemToggledOpen();
   hb_retl( ret );
}

/* bool igIsItemToggledSelection() */
HB_FUNC( IGISITEMTOGGLEDSELECTION )
{
   bool ret = igIsItemToggledSelection();
   hb_retl( ret );
}

/* bool igIsItemVisible() */
HB_FUNC( IGISITEMVISIBLE )
{
   bool ret = igIsItemVisible();
   hb_retl( ret );
}

/* bool igIsKeyDown(int user_key_index) */
HB_FUNC( IGISKEYDOWN )
{
   int user_key_index = hb_parni( 1 );
   bool ret = igIsKeyDown(user_key_index);
   hb_retl( ret );
}

/* bool igIsKeyPressed(int user_key_index,bool repeat) */
HB_FUNC( IGISKEYPRESSED )
{
   int user_key_index = hb_parni( 1 );
   bool repeat = hb_parldef( 2, 1 );
   bool ret = igIsKeyPressed(user_key_index,repeat);
   hb_retl( ret );
}

/* bool igIsKeyPressedMap(ImGuiKey key,bool repeat) */
HB_FUNC( IGISKEYPRESSEDMAP )
{
   ImGuiKey key = ( ImGuiKey ) hb_parni( 1 );
   bool repeat = hb_parldef( 2, 1 );
   bool ret = igIsKeyPressedMap(key,repeat);
   hb_retl( ret );
}

/* bool igIsKeyReleased(int user_key_index) */
HB_FUNC( IGISKEYRELEASED )
{
   int user_key_index = hb_parni( 1 );
   bool ret = igIsKeyReleased(user_key_index);
   hb_retl( ret );
}

/* bool igIsMouseClicked(ImGuiMouseButton button,bool repeat) */
HB_FUNC( IGISMOUSECLICKED )
{
   ImGuiMouseButton button = ( ImGuiMouseButton ) hb_parni( 1 );
   bool repeat = hb_parldef( 2, 0 );
   bool ret = igIsMouseClicked(button,repeat);
   hb_retl( ret );
}

/* bool igIsMouseDoubleClicked(ImGuiMouseButton button) */
HB_FUNC( IGISMOUSEDOUBLECLICKED )
{
   ImGuiMouseButton button = ( ImGuiMouseButton ) hb_parni( 1 );
   bool ret = igIsMouseDoubleClicked(button);
   hb_retl( ret );
}

/* bool igIsMouseDown(ImGuiMouseButton button) */
HB_FUNC( IGISMOUSEDOWN )
{
   ImGuiMouseButton button = ( ImGuiMouseButton ) hb_parni( 1 );
   bool ret = igIsMouseDown(button);
   hb_retl( ret );
}

/* bool igIsMouseDragPastThreshold(ImGuiMouseButton button,float lock_threshold) */
HB_FUNC( IGISMOUSEDRAGPASTTHRESHOLD )
{
   ImGuiMouseButton button = ( ImGuiMouseButton ) hb_parni( 1 );
   float lock_threshold = ( float ) hb_parnd( 2 );
   bool ret = igIsMouseDragPastThreshold(button,lock_threshold);
   hb_retl( ret );
}

/* bool igIsMouseDragging(ImGuiMouseButton button,float lock_threshold) */
HB_FUNC( IGISMOUSEDRAGGING )
{
   ImGuiMouseButton button = ( ImGuiMouseButton ) hb_parni( 1 );
   float lock_threshold = ( float ) hb_parnd( 2 );
   bool ret = igIsMouseDragging(button,lock_threshold);
   hb_retl( ret );
}

/* bool igIsMouseHoveringRect(const ImVec2 r_min,const ImVec2 r_max,bool clip) */
HB_FUNC( IGISMOUSEHOVERINGRECT )
{
   PHB_ITEM pr_min = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 r_min = ImVec2{ _paf( pr_min, 1 ), _paf( pr_min, 2 ) };
   PHB_ITEM pr_max = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 r_max = ImVec2{ _paf( pr_max, 1 ), _paf( pr_max, 2 ) };
   bool clip = hb_parldef( 3, 1 );
   bool ret = igIsMouseHoveringRect(r_min,r_max,clip);
   hb_retl( ret );
}

/* bool igIsMousePosValid(const ImVec2* mouse_pos) */
HB_FUNC( IGISMOUSEPOSVALID )
{
   const ImVec2* mouse_pos = ( const ImVec2* ) hb_parptr( 1 );
   bool ret = igIsMousePosValid(mouse_pos);
   hb_retl( ret );
}

/* bool igIsMouseReleased(ImGuiMouseButton button) */
HB_FUNC( IGISMOUSERELEASED )
{
   ImGuiMouseButton button = ( ImGuiMouseButton ) hb_parni( 1 );
   bool ret = igIsMouseReleased(button);
   hb_retl( ret );
}

/* bool igIsNavInputDown(ImGuiNavInput n) */
HB_FUNC( IGISNAVINPUTDOWN )
{
   ImGuiNavInput n = ( ImGuiNavInput ) hb_parni( 1 );
   bool ret = igIsNavInputDown(n);
   hb_retl( ret );
}

/* bool igIsNavInputTest(ImGuiNavInput n,ImGuiInputReadMode rm) */
HB_FUNC( IGISNAVINPUTTEST )
{
   ImGuiNavInput n = ( ImGuiNavInput ) hb_parni( 1 );
   ImGuiInputReadMode rm = ( ImGuiInputReadMode ) hb_parni( 2 );
   bool ret = igIsNavInputTest(n,rm);
   hb_retl( ret );
}

/* bool igIsPopupOpen_Str(const char* str_id,ImGuiPopupFlags flags) */
HB_FUNC( IGISPOPUPOPENSTR )
{
   const char* str_id = hb_parcx( 1 );
   ImGuiPopupFlags flags = ( ImGuiPopupFlags ) hb_parni( 2 );
   bool ret = igIsPopupOpen_Str(str_id,flags);
   hb_retl( ret );
}

/* bool igIsPopupOpen_ID(ImGuiID id,ImGuiPopupFlags popup_flags) */
HB_FUNC( IGISPOPUPOPENID )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   ImGuiPopupFlags popup_flags = ( ImGuiPopupFlags ) hb_parni( 2 );
   bool ret = igIsPopupOpen_ID(id,popup_flags);
   hb_retl( ret );
}

/* bool igIsRectVisible_Nil(const ImVec2 size) */
HB_FUNC( IGISRECTVISIBLENIL )
{
   PHB_ITEM psize = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   bool ret = igIsRectVisible_Nil(size);
   hb_retl( ret );
}

/* bool igIsRectVisible_Vec2(const ImVec2 rect_min,const ImVec2 rect_max) */
HB_FUNC( IGISRECTVISIBLEVEC2 )
{
   PHB_ITEM prect_min = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 rect_min = ImVec2{ _paf( prect_min, 1 ), _paf( prect_min, 2 ) };
   PHB_ITEM prect_max = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 rect_max = ImVec2{ _paf( prect_max, 1 ), _paf( prect_max, 2 ) };
   bool ret = igIsRectVisible_Vec2(rect_min,rect_max);
   hb_retl( ret );
}

/* bool igIsWindowAbove(ImGuiWindow* potential_above,ImGuiWindow* potential_below) */
HB_FUNC( IGISWINDOWABOVE )
{
   ImGuiWindow* potential_above = ( ImGuiWindow* ) hb_parptr( 1 );
   ImGuiWindow* potential_below = ( ImGuiWindow* ) hb_parptr( 2 );
   bool ret = igIsWindowAbove(potential_above,potential_below);
   hb_retl( ret );
}

/* bool igIsWindowAppearing() */
HB_FUNC( IGISWINDOWAPPEARING )
{
   bool ret = igIsWindowAppearing();
   hb_retl( ret );
}

/* bool igIsWindowChildOf(ImGuiWindow* window,ImGuiWindow* potential_parent,bool popup_hierarchy,bool dock_hierarchy) */
HB_FUNC( IGISWINDOWCHILDOF )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   ImGuiWindow* potential_parent = ( ImGuiWindow* ) hb_parptr( 2 );
   bool popup_hierarchy = hb_parl( 3 );
   bool dock_hierarchy = hb_parl( 4 );
   bool ret = igIsWindowChildOf(window,potential_parent,popup_hierarchy,dock_hierarchy);
   hb_retl( ret );
}

/* bool igIsWindowCollapsed() */
HB_FUNC( IGISWINDOWCOLLAPSED )
{
   bool ret = igIsWindowCollapsed();
   hb_retl( ret );
}

/* bool igIsWindowDocked() */
HB_FUNC( IGISWINDOWDOCKED )
{
   bool ret = igIsWindowDocked();
   hb_retl( ret );
}

/* bool igIsWindowFocused(ImGuiFocusedFlags flags) */
HB_FUNC( IGISWINDOWFOCUSED )
{
   ImGuiFocusedFlags flags = ( ImGuiFocusedFlags ) hb_parni( 1 );
   bool ret = igIsWindowFocused(flags);
   hb_retl( ret );
}

/* bool igIsWindowHovered(ImGuiHoveredFlags flags) */
HB_FUNC( IGISWINDOWHOVERED )
{
   ImGuiHoveredFlags flags = ( ImGuiHoveredFlags ) hb_parni( 1 );
   bool ret = igIsWindowHovered(flags);
   hb_retl( ret );
}

/* bool igIsWindowNavFocusable(ImGuiWindow* window) */
HB_FUNC( IGISWINDOWNAVFOCUSABLE )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   bool ret = igIsWindowNavFocusable(window);
   hb_retl( ret );
}

/* bool igItemAdd(const ImRect bb,ImGuiID id,const ImRect* nav_bb,ImGuiItemFlags extra_flags) */
HB_FUNC( IGITEMADD )
{
   PHB_ITEM pbb = hb_param( 1, HB_IT_ARRAY );
   const ImRect bb = ImRect{ ImVec2{ _paf( pbb, 1 ), _paf( pbb, 2 ) }, ImVec2{ _paf( pbb, 3 ), _paf( pbb, 4 ) } };
   ImGuiID id = ( ImGuiID ) hb_parni( 2 );
   const ImRect* nav_bb = ( const ImRect* ) hb_parptr( 3 );
   ImGuiItemFlags extra_flags = ( ImGuiItemFlags ) hb_parni( 4 );
   bool ret = igItemAdd(bb,id,nav_bb,extra_flags);
   hb_retl( ret );
}

/* bool igItemHoverable(const ImRect bb,ImGuiID id) */
HB_FUNC( IGITEMHOVERABLE )
{
   PHB_ITEM pbb = hb_param( 1, HB_IT_ARRAY );
   const ImRect bb = ImRect{ ImVec2{ _paf( pbb, 1 ), _paf( pbb, 2 ) }, ImVec2{ _paf( pbb, 3 ), _paf( pbb, 4 ) } };
   ImGuiID id = ( ImGuiID ) hb_parni( 2 );
   bool ret = igItemHoverable(bb,id);
   hb_retl( ret );
}

/* void igItemInputable(ImGuiWindow* window,ImGuiID id) */
HB_FUNC( IGITEMINPUTABLE )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   ImGuiID id = ( ImGuiID ) hb_parni( 2 );
   igItemInputable(window,id);
}

/* void igItemSize_Vec2(const ImVec2 size,float text_baseline_y) */
HB_FUNC( IGITEMSIZEVEC2 )
{
   PHB_ITEM psize = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   float text_baseline_y = ( float ) hb_parnd( 2 );
   igItemSize_Vec2(size,text_baseline_y);
}

/* void igItemSize_Rect(const ImRect bb,float text_baseline_y) */
HB_FUNC( IGITEMSIZERECT )
{
   PHB_ITEM pbb = hb_param( 1, HB_IT_ARRAY );
   const ImRect bb = ImRect{ ImVec2{ _paf( pbb, 1 ), _paf( pbb, 2 ) }, ImVec2{ _paf( pbb, 3 ), _paf( pbb, 4 ) } };
   float text_baseline_y = ( float ) hb_parnd( 2 );
   igItemSize_Rect(bb,text_baseline_y);
}

/* void igKeepAliveID(ImGuiID id) */
HB_FUNC( IGKEEPALIVEID )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   igKeepAliveID(id);
}

/* void igLabelText(const char* label,const char* fmt,...) */
HB_FUNC( IGLABELTEXT )
{
   const char* label = hb_parcx( 1 );
   const char* fmt = hb_parcx( 2 );
   igLabelText(label,fmt,NULL);
}

/* void igLabelTextV(const char* label,const char* fmt,va_list args) */
HB_FUNC( IGLABELTEXTV )
{
   const char* label = hb_parcx( 1 );
   const char* fmt = hb_parcx( 2 );
   /* unsupported */
}

/* bool igListBox_Str_arr(const char* label,int* current_item,const char* const items[],int items_count,int height_in_items) */
HB_FUNC( IGLISTBOX_STRARR )
{
   const char* label = hb_parcx( 1 );
   int /* @ */ _current_item = hb_parni( 2 );
   int * current_item = &_current_item;
   const char* const items[] = { 0 };
   int items_count = hb_parni( 4 );
   int height_in_items = hb_parni( 5 );
   bool ret = igListBox_Str_arr(label,current_item,items,items_count,height_in_items);
   hb_itemPutNI( hb_paramError( 2 ), _current_item );
   hb_retl( ret );
}

/* bool igListBox_FnBoolPtr(const char* label,int* current_item,bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int height_in_items) */
HB_FUNC( IGLISTBOXFNBOOLPTR )
{
   const char* label = hb_parcx( 1 );
   int /* @ */ _current_item = hb_parni( 2 );
   int * current_item = &_current_item;
   void* data = ( void* ) hb_parptr( 4 );
   int items_count = hb_parni( 5 );
   int height_in_items = hb_parni( 6 );
   bool ret = igListBox_FnBoolPtr(label,current_item,&hb_ig_items_getter,data,items_count,height_in_items);
   hb_itemPutNI( hb_paramError( 2 ), _current_item );
   hb_retl( ret );
}

/* void igLoadIniSettingsFromDisk(const char* ini_filename) */
HB_FUNC( IGLOADINISETTINGSFROMDISK )
{
   const char* ini_filename = hb_parcx( 1 );
   igLoadIniSettingsFromDisk(ini_filename);
}

/* void igLoadIniSettingsFromMemory(const char* ini_data,size_t ini_size) */
HB_FUNC( IGLOADINISETTINGSFROMMEMORY )
{
   const char* ini_data = hb_parcx( 1 );
   size_t ini_size = ( size_t ) hb_parnl( 2 );
   igLoadIniSettingsFromMemory(ini_data,ini_size);
}

/* void igLogBegin(ImGuiLogType type,int auto_open_depth) */
HB_FUNC( IGLOGBEGIN )
{
   ImGuiLogType type = ( ImGuiLogType ) hb_parni( 1 );
   int auto_open_depth = hb_parni( 2 );
   igLogBegin(type,auto_open_depth);
}

/* void igLogButtons() */
HB_FUNC( IGLOGBUTTONS )
{
   igLogButtons();
}

/* void igLogFinish() */
HB_FUNC( IGLOGFINISH )
{
   igLogFinish();
}

/* void igLogRenderedText(const ImVec2* ref_pos,const char* text,const char* text_end) */
HB_FUNC( IGLOGRENDEREDTEXT )
{
   const ImVec2* ref_pos = ( const ImVec2* ) hb_parptr( 1 );
   const char* text = hb_parcx( 2 );
   const char* text_end = NULL;
   igLogRenderedText(ref_pos,text,text_end);
}

/* void igLogSetNextTextDecoration(const char* prefix,const char* suffix) */
HB_FUNC( IGLOGSETNEXTTEXTDECORATION )
{
   const char* prefix = hb_parcx( 1 );
   const char* suffix = hb_parcx( 2 );
   igLogSetNextTextDecoration(prefix,suffix);
}

/* void igLogText(const char* fmt,...) */
HB_FUNC( IGLOGTEXT )
{
   const char* fmt = hb_parcx( 1 );
   igLogText(fmt,NULL);
}

/* void igLogTextV(const char* fmt,va_list args) */
HB_FUNC( IGLOGTEXTV )
{
   const char* fmt = hb_parcx( 1 );
   /* unsupported */
}

/* void igLogToBuffer(int auto_open_depth) */
HB_FUNC( IGLOGTOBUFFER )
{
   int auto_open_depth = hb_parni( 1 );
   igLogToBuffer(auto_open_depth);
}

/* void igLogToClipboard(int auto_open_depth) */
HB_FUNC( IGLOGTOCLIPBOARD )
{
   int auto_open_depth = hb_parni( 1 );
   igLogToClipboard(auto_open_depth);
}

/* void igLogToFile(int auto_open_depth,const char* filename) */
HB_FUNC( IGLOGTOFILE )
{
   int auto_open_depth = hb_parni( 1 );
   const char* filename = hb_parcx( 2 );
   igLogToFile(auto_open_depth,filename);
}

/* void igLogToTTY(int auto_open_depth) */
HB_FUNC( IGLOGTOTTY )
{
   int auto_open_depth = hb_parni( 1 );
   igLogToTTY(auto_open_depth);
}

/* void igMarkIniSettingsDirty_Nil() */
HB_FUNC( IGMARKINISETTINGSDIRTYNIL )
{
   igMarkIniSettingsDirty_Nil();
}

/* void igMarkIniSettingsDirty_WindowPtr(ImGuiWindow* window) */
HB_FUNC( IGMARKINISETTINGSDIRTYWINDOWPTR )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   igMarkIniSettingsDirty_WindowPtr(window);
}

/* void igMarkItemEdited(ImGuiID id) */
HB_FUNC( IGMARKITEMEDITED )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   igMarkItemEdited(id);
}

/* void* igMemAlloc(size_t size) */
HB_FUNC( IGMEMALLOC )
{
   size_t size = ( size_t ) hb_parnl( 1 );
   void* ret = igMemAlloc(size);
   hb_retptr( ( void * ) ret );
}

/* void igMemFree(void* ptr) */
HB_FUNC( IGMEMFREE )
{
   void* ptr = ( void* ) hb_parptr( 1 );
   igMemFree(ptr);
}

/* bool igMenuItem_Bool(const char* label,const char* shortcut,bool selected,bool enabled) */
HB_FUNC( IGMENUITEMBOOL )
{
   const char* label = hb_parcx( 1 );
   const char* shortcut = hb_parcx( 2 );
   bool selected = hb_parldef( 3, 0 );
   bool enabled = hb_parldef( 4, 1 );
   bool ret = igMenuItem_Bool(label,shortcut,selected,enabled);
   hb_retl( ret );
}

/* bool igMenuItem_BoolPtr(const char* label,const char* shortcut,bool* p_selected,bool enabled) */
HB_FUNC( IGMENUITEMBOOLPTR )
{
   const char* label = hb_parcx( 1 );
   const char* shortcut = hb_parcx( 2 );
   bool /* @ */ _p_selected = hb_parl( 3 );
   bool * p_selected = &_p_selected;
   bool enabled = hb_parldef( 4, 1 );
   bool ret = igMenuItem_BoolPtr(label,shortcut,p_selected,enabled);
   hb_itemPutL( hb_paramError( 3 ), _p_selected );
   hb_retl( ret );
}

/* bool igMenuItemEx(const char* label,const char* icon,const char* shortcut,bool selected,bool enabled) */
HB_FUNC( IGMENUITEMEX )
{
   const char* label = hb_parcx( 1 );
   const char* icon = hb_parcx( 2 );
   const char* shortcut = hb_parcx( 3 );
   bool selected = hb_parldef( 4, 0 );
   bool enabled = hb_parldef( 5, 1 );
   bool ret = igMenuItemEx(label,icon,shortcut,selected,enabled);
   hb_retl( ret );
}

/* void igNavInitRequestApplyResult() */
HB_FUNC( IGNAVINITREQUESTAPPLYRESULT )
{
   igNavInitRequestApplyResult();
}

/* void igNavInitWindow(ImGuiWindow* window,bool force_reinit) */
HB_FUNC( IGNAVINITWINDOW )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   bool force_reinit = hb_parl( 2 );
   igNavInitWindow(window,force_reinit);
}

/* void igNavMoveRequestApplyResult() */
HB_FUNC( IGNAVMOVEREQUESTAPPLYRESULT )
{
   igNavMoveRequestApplyResult();
}

/* bool igNavMoveRequestButNoResultYet() */
HB_FUNC( IGNAVMOVEREQUESTBUTNORESULTYET )
{
   bool ret = igNavMoveRequestButNoResultYet();
   hb_retl( ret );
}

/* void igNavMoveRequestCancel() */
HB_FUNC( IGNAVMOVEREQUESTCANCEL )
{
   igNavMoveRequestCancel();
}

/* void igNavMoveRequestForward(ImGuiDir move_dir,ImGuiDir clip_dir,ImGuiNavMoveFlags move_flags,ImGuiScrollFlags scroll_flags) */
HB_FUNC( IGNAVMOVEREQUESTFORWARD )
{
   ImGuiDir move_dir = ( ImGuiDir ) hb_parni( 1 );
   ImGuiDir clip_dir = ( ImGuiDir ) hb_parni( 2 );
   ImGuiNavMoveFlags move_flags = ( ImGuiNavMoveFlags ) hb_parni( 3 );
   ImGuiScrollFlags scroll_flags = ( ImGuiScrollFlags ) hb_parni( 4 );
   igNavMoveRequestForward(move_dir,clip_dir,move_flags,scroll_flags);
}

/* void igNavMoveRequestResolveWithLastItem() */
HB_FUNC( IGNAVMOVEREQUESTRESOLVEWITHLASTITEM )
{
   igNavMoveRequestResolveWithLastItem();
}

/* void igNavMoveRequestSubmit(ImGuiDir move_dir,ImGuiDir clip_dir,ImGuiNavMoveFlags move_flags,ImGuiScrollFlags scroll_flags) */
HB_FUNC( IGNAVMOVEREQUESTSUBMIT )
{
   ImGuiDir move_dir = ( ImGuiDir ) hb_parni( 1 );
   ImGuiDir clip_dir = ( ImGuiDir ) hb_parni( 2 );
   ImGuiNavMoveFlags move_flags = ( ImGuiNavMoveFlags ) hb_parni( 3 );
   ImGuiScrollFlags scroll_flags = ( ImGuiScrollFlags ) hb_parni( 4 );
   igNavMoveRequestSubmit(move_dir,clip_dir,move_flags,scroll_flags);
}

/* void igNavMoveRequestTryWrapping(ImGuiWindow* window,ImGuiNavMoveFlags move_flags) */
HB_FUNC( IGNAVMOVEREQUESTTRYWRAPPING )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   ImGuiNavMoveFlags move_flags = ( ImGuiNavMoveFlags ) hb_parni( 2 );
   igNavMoveRequestTryWrapping(window,move_flags);
}

/* void igNewFrame() */
HB_FUNC( IGNEWFRAME )
{
   igNewFrame();
}

/* void igNewLine() */
HB_FUNC( IGNEWLINE )
{
   igNewLine();
}

/* void igNextColumn() */
HB_FUNC( IGNEXTCOLUMN )
{
   igNextColumn();
}

/* void igOpenPopup_Str(const char* str_id,ImGuiPopupFlags popup_flags) */
HB_FUNC( IGOPENPOPUPSTR )
{
   const char* str_id = hb_parcx( 1 );
   ImGuiPopupFlags popup_flags = ( ImGuiPopupFlags ) hb_parni( 2 );
   igOpenPopup_Str(str_id,popup_flags);
}

/* void igOpenPopup_ID(ImGuiID id,ImGuiPopupFlags popup_flags) */
HB_FUNC( IGOPENPOPUPID )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   ImGuiPopupFlags popup_flags = ( ImGuiPopupFlags ) hb_parni( 2 );
   igOpenPopup_ID(id,popup_flags);
}

/* void igOpenPopupEx(ImGuiID id,ImGuiPopupFlags popup_flags) */
HB_FUNC( IGOPENPOPUPEX )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   ImGuiPopupFlags popup_flags = ( ImGuiPopupFlags ) hb_parni( 2 );
   igOpenPopupEx(id,popup_flags);
}

/* void igOpenPopupOnItemClick(const char* str_id,ImGuiPopupFlags popup_flags) */
HB_FUNC( IGOPENPOPUPONITEMCLICK )
{
   const char* str_id = hb_parcx( 1 );
   ImGuiPopupFlags popup_flags = ( ImGuiPopupFlags ) hb_parni( 2 );
   igOpenPopupOnItemClick(str_id,popup_flags);
}

/* int igPlotEx(ImGuiPlotType plot_type,const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 frame_size) */
HB_FUNC( IGPLOTEX )
{
   ImGuiPlotType plot_type = ( ImGuiPlotType ) hb_parni( 1 );
   const char* label = hb_parcx( 2 );
   void* data = ( void* ) hb_parptr( 4 );
   int values_count = hb_parni( 5 );
   int values_offset = hb_parni( 6 );
   const char* overlay_text = hb_parcx( 7 );
   float scale_min = ( float ) hb_parnd( 8 );
   float scale_max = ( float ) hb_parnd( 9 );
   PHB_ITEM pframe_size = hb_param( 10, HB_IT_ARRAY );
   ImVec2 frame_size = ImVec2{ _paf( pframe_size, 1 ), _paf( pframe_size, 2 ) };
   int ret = igPlotEx(plot_type,label,&hb_ig_values_getter,data,values_count,values_offset,overlay_text,scale_min,scale_max,frame_size);
   hb_retni( ret );
}

/* void igPlotHistogram_FloatPtr(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride) */
HB_FUNC( IGPLOTHISTOGRAMFLOATPTR )
{
   const char* label = hb_parcx( 1 );
   const float* values = ( const float* ) hb_parptr( 2 );
   int values_count = hb_parni( 3 );
   int values_offset = hb_parni( 4 );
   const char* overlay_text = hb_parcx( 5 );
   float scale_min = ( float ) hb_parnd( 6 );
   float scale_max = ( float ) hb_parnd( 7 );
   PHB_ITEM pgraph_size = hb_param( 8, HB_IT_ARRAY );
   ImVec2 graph_size = ImVec2{ _paf( pgraph_size, 1 ), _paf( pgraph_size, 2 ) };
   int stride = hb_parni( 9 );
   igPlotHistogram_FloatPtr(label,values,values_count,values_offset,overlay_text,scale_min,scale_max,graph_size,stride);
}

/* void igPlotHistogram_FnFloatPtr(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size) */
HB_FUNC( IGPLOTHISTOGRAMFNFLOATPTR )
{
   const char* label = hb_parcx( 1 );
   void* data = ( void* ) hb_parptr( 3 );
   int values_count = hb_parni( 4 );
   int values_offset = hb_parni( 5 );
   const char* overlay_text = hb_parcx( 6 );
   float scale_min = ( float ) hb_parnd( 7 );
   float scale_max = ( float ) hb_parnd( 8 );
   PHB_ITEM pgraph_size = hb_param( 9, HB_IT_ARRAY );
   ImVec2 graph_size = ImVec2{ _paf( pgraph_size, 1 ), _paf( pgraph_size, 2 ) };
   igPlotHistogram_FnFloatPtr(label,&hb_ig_values_getter,data,values_count,values_offset,overlay_text,scale_min,scale_max,graph_size);
}

/* void igPlotLines_FloatPtr(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride) */
HB_FUNC( IGPLOTLINESFLOATPTR )
{
   const char* label = hb_parcx( 1 );
   const float* values = ( const float* ) hb_parptr( 2 );
   int values_count = hb_parni( 3 );
   int values_offset = hb_parni( 4 );
   const char* overlay_text = hb_parcx( 5 );
   float scale_min = ( float ) hb_parnd( 6 );
   float scale_max = ( float ) hb_parnd( 7 );
   PHB_ITEM pgraph_size = hb_param( 8, HB_IT_ARRAY );
   ImVec2 graph_size = ImVec2{ _paf( pgraph_size, 1 ), _paf( pgraph_size, 2 ) };
   int stride = hb_parni( 9 );
   igPlotLines_FloatPtr(label,values,values_count,values_offset,overlay_text,scale_min,scale_max,graph_size,stride);
}

/* void igPlotLines_FnFloatPtr(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size) */
HB_FUNC( IGPLOTLINESFNFLOATPTR )
{
   const char* label = hb_parcx( 1 );
   void* data = ( void* ) hb_parptr( 3 );
   int values_count = hb_parni( 4 );
   int values_offset = hb_parni( 5 );
   const char* overlay_text = hb_parcx( 6 );
   float scale_min = ( float ) hb_parnd( 7 );
   float scale_max = ( float ) hb_parnd( 8 );
   PHB_ITEM pgraph_size = hb_param( 9, HB_IT_ARRAY );
   ImVec2 graph_size = ImVec2{ _paf( pgraph_size, 1 ), _paf( pgraph_size, 2 ) };
   igPlotLines_FnFloatPtr(label,&hb_ig_values_getter,data,values_count,values_offset,overlay_text,scale_min,scale_max,graph_size);
}

/* void igPopAllowKeyboardFocus() */
HB_FUNC( IGPOPALLOWKEYBOARDFOCUS )
{
   igPopAllowKeyboardFocus();
}

/* void igPopButtonRepeat() */
HB_FUNC( IGPOPBUTTONREPEAT )
{
   igPopButtonRepeat();
}

/* void igPopClipRect() */
HB_FUNC( IGPOPCLIPRECT )
{
   igPopClipRect();
}

/* void igPopColumnsBackground() */
HB_FUNC( IGPOPCOLUMNSBACKGROUND )
{
   igPopColumnsBackground();
}

/* void igPopFocusScope() */
HB_FUNC( IGPOPFOCUSSCOPE )
{
   igPopFocusScope();
}

/* void igPopFont() */
HB_FUNC( IGPOPFONT )
{
   igPopFont();
}

/* void igPopID() */
HB_FUNC( IGPOPID )
{
   igPopID();
}

/* void igPopItemFlag() */
HB_FUNC( IGPOPITEMFLAG )
{
   igPopItemFlag();
}

/* void igPopItemWidth() */
HB_FUNC( IGPOPITEMWIDTH )
{
   igPopItemWidth();
}

/* void igPopStyleColor(int count) */
HB_FUNC( IGPOPSTYLECOLOR )
{
   int count = hb_parni( 1 );
   igPopStyleColor(count);
}

/* void igPopStyleVar(int count) */
HB_FUNC( IGPOPSTYLEVAR )
{
   int count = hb_parni( 1 );
   igPopStyleVar(count);
}

/* void igPopTextWrapPos() */
HB_FUNC( IGPOPTEXTWRAPPOS )
{
   igPopTextWrapPos();
}

/* void igProgressBar(float fraction,const ImVec2 size_arg,const char* overlay) */
HB_FUNC( IGPROGRESSBAR )
{
   float fraction = ( float ) hb_parnd( 1 );
   PHB_ITEM psize_arg = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 size_arg = ImVec2{ _paf( psize_arg, 1 ), _paf( psize_arg, 2 ) };
   const char* overlay = hb_parcx( 3 );
   igProgressBar(fraction,size_arg,overlay);
}

/* void igPushAllowKeyboardFocus(bool allow_keyboard_focus) */
HB_FUNC( IGPUSHALLOWKEYBOARDFOCUS )
{
   bool allow_keyboard_focus = hb_parl( 1 );
   igPushAllowKeyboardFocus(allow_keyboard_focus);
}

/* void igPushButtonRepeat(bool repeat) */
HB_FUNC( IGPUSHBUTTONREPEAT )
{
   bool repeat = hb_parl( 1 );
   igPushButtonRepeat(repeat);
}

/* void igPushClipRect(const ImVec2 clip_rect_min,const ImVec2 clip_rect_max,bool intersect_with_current_clip_rect) */
HB_FUNC( IGPUSHCLIPRECT )
{
   PHB_ITEM pclip_rect_min = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 clip_rect_min = ImVec2{ _paf( pclip_rect_min, 1 ), _paf( pclip_rect_min, 2 ) };
   PHB_ITEM pclip_rect_max = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 clip_rect_max = ImVec2{ _paf( pclip_rect_max, 1 ), _paf( pclip_rect_max, 2 ) };
   bool intersect_with_current_clip_rect = hb_parl( 3 );
   igPushClipRect(clip_rect_min,clip_rect_max,intersect_with_current_clip_rect);
}

/* void igPushColumnClipRect(int column_index) */
HB_FUNC( IGPUSHCOLUMNCLIPRECT )
{
   int column_index = hb_parni( 1 );
   igPushColumnClipRect(column_index);
}

/* void igPushColumnsBackground() */
HB_FUNC( IGPUSHCOLUMNSBACKGROUND )
{
   igPushColumnsBackground();
}

/* void igPushFocusScope(ImGuiID id) */
HB_FUNC( IGPUSHFOCUSSCOPE )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   igPushFocusScope(id);
}

/* void igPushFont(ImFont* font) */
HB_FUNC( IGPUSHFONT )
{
   ImFont* font = ( ImFont* ) hb_parptr( 1 );
   igPushFont(font);
}

/* void igPushID_Str(const char* str_id) */
HB_FUNC( IGPUSHIDSTR )
{
   const char* str_id = hb_parcx( 1 );
   igPushID_Str(str_id);
}

/* void igPushID_StrStr(const char* str_id_begin,const char* str_id_end) */
HB_FUNC( IGPUSHIDSTRSTR )
{
   const char* str_id_begin = hb_parcx( 1 );
   const char* str_id_end = hb_parcx( 2 );
   igPushID_StrStr(str_id_begin,str_id_end);
}

/* void igPushID_Ptr(const void* ptr_id) */
HB_FUNC( IGPUSHIDPTR )
{
   const void* ptr_id = ( const void* ) hb_parptr( 1 );
   igPushID_Ptr(ptr_id);
}

/* void igPushID_Int(int int_id) */
HB_FUNC( IGPUSHIDINT )
{
   int int_id = hb_parni( 1 );
   igPushID_Int(int_id);
}

/* void igPushItemFlag(ImGuiItemFlags option,bool enabled) */
HB_FUNC( IGPUSHITEMFLAG )
{
   ImGuiItemFlags option = ( ImGuiItemFlags ) hb_parni( 1 );
   bool enabled = hb_parl( 2 );
   igPushItemFlag(option,enabled);
}

/* void igPushItemWidth(float item_width) */
HB_FUNC( IGPUSHITEMWIDTH )
{
   float item_width = ( float ) hb_parnd( 1 );
   igPushItemWidth(item_width);
}

/* void igPushMultiItemsWidths(int components,float width_full) */
HB_FUNC( IGPUSHMULTIITEMSWIDTHS )
{
   int components = hb_parni( 1 );
   float width_full = ( float ) hb_parnd( 2 );
   igPushMultiItemsWidths(components,width_full);
}

/* void igPushOverrideID(ImGuiID id) */
HB_FUNC( IGPUSHOVERRIDEID )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   igPushOverrideID(id);
}

/* void igPushStyleColor_U32(ImGuiCol idx,ImU32 col) */
HB_FUNC( IGPUSHSTYLECOLORU32 )
{
   ImGuiCol idx = ( ImGuiCol ) hb_parni( 1 );
   ImU32 col = ( HB_U32 ) hb_parnl( 2 );
   igPushStyleColor_U32(idx,col);
}

/* void igPushStyleColor_Vec4(ImGuiCol idx,const ImVec4 col) */
HB_FUNC( IGPUSHSTYLECOLORVEC4 )
{
   ImGuiCol idx = ( ImGuiCol ) hb_parni( 1 );
   PHB_ITEM pcol = hb_param( 2, HB_IT_ARRAY );
   const ImVec4 col = ImVec4{ _paf( pcol, 1 ), _paf( pcol, 2 ), _paf( pcol, 3 ), _paf( pcol, 4 ) };
   igPushStyleColor_Vec4(idx,col);
}

/* void igPushStyleVar_Float(ImGuiStyleVar idx,float val) */
HB_FUNC( IGPUSHSTYLEVARFLOAT )
{
   ImGuiStyleVar idx = ( ImGuiStyleVar ) hb_parni( 1 );
   float val = ( float ) hb_parnd( 2 );
   igPushStyleVar_Float(idx,val);
}

/* void igPushStyleVar_Vec2(ImGuiStyleVar idx,const ImVec2 val) */
HB_FUNC( IGPUSHSTYLEVARVEC2 )
{
   ImGuiStyleVar idx = ( ImGuiStyleVar ) hb_parni( 1 );
   PHB_ITEM pval = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 val = ImVec2{ _paf( pval, 1 ), _paf( pval, 2 ) };
   igPushStyleVar_Vec2(idx,val);
}

/* void igPushTextWrapPos(float wrap_local_pos_x) */
HB_FUNC( IGPUSHTEXTWRAPPOS )
{
   float wrap_local_pos_x = ( float ) hb_parnd( 1 );
   igPushTextWrapPos(wrap_local_pos_x);
}

/* bool igRadioButton_Bool(const char* label,bool active) */
HB_FUNC( IGRADIOBUTTONBOOL )
{
   const char* label = hb_parcx( 1 );
   bool active = hb_parl( 2 );
   bool ret = igRadioButton_Bool(label,active);
   hb_retl( ret );
}

/* bool igRadioButton_IntPtr(const char* label,int* v,int v_button) */
HB_FUNC( IGRADIOBUTTONINTPTR )
{
   const char* label = hb_parcx( 1 );
   int /* @ */ _v = hb_parni( 2 );
   int * v = &_v;
   int v_button = hb_parni( 3 );
   bool ret = igRadioButton_IntPtr(label,v,v_button);
   hb_itemPutNI( hb_paramError( 2 ), _v );
   hb_retl( ret );
}

/* void igRemoveContextHook(ImGuiContext* context,ImGuiID hook_to_remove) */
HB_FUNC( IGREMOVECONTEXTHOOK )
{
   ImGuiContext* context = ( ImGuiContext* ) hb_parptr( 1 );
   ImGuiID hook_to_remove = ( ImGuiID ) hb_parni( 2 );
   igRemoveContextHook(context,hook_to_remove);
}

/* void igRender() */
HB_FUNC( IGRENDER )
{
   igRender();
}

/* void igRenderArrow(ImDrawList* draw_list,ImVec2 pos,ImU32 col,ImGuiDir dir,float scale) */
HB_FUNC( IGRENDERARROW )
{
   ImDrawList* draw_list = ( ImDrawList* ) hb_parptr( 1 );
   PHB_ITEM ppos = hb_param( 2, HB_IT_ARRAY );
   ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   ImU32 col = ( HB_U32 ) hb_parnl( 3 );
   ImGuiDir dir = ( ImGuiDir ) hb_parni( 4 );
   float scale = ( float ) hb_parnd( 5 );
   igRenderArrow(draw_list,pos,col,dir,scale);
}

/* void igRenderArrowDockMenu(ImDrawList* draw_list,ImVec2 p_min,float sz,ImU32 col) */
HB_FUNC( IGRENDERARROWDOCKMENU )
{
   ImDrawList* draw_list = ( ImDrawList* ) hb_parptr( 1 );
   PHB_ITEM pp_min = hb_param( 2, HB_IT_ARRAY );
   ImVec2 p_min = ImVec2{ _paf( pp_min, 1 ), _paf( pp_min, 2 ) };
   float sz = ( float ) hb_parnd( 3 );
   ImU32 col = ( HB_U32 ) hb_parnl( 4 );
   igRenderArrowDockMenu(draw_list,p_min,sz,col);
}

/* void igRenderArrowPointingAt(ImDrawList* draw_list,ImVec2 pos,ImVec2 half_sz,ImGuiDir direction,ImU32 col) */
HB_FUNC( IGRENDERARROWPOINTINGAT )
{
   ImDrawList* draw_list = ( ImDrawList* ) hb_parptr( 1 );
   PHB_ITEM ppos = hb_param( 2, HB_IT_ARRAY );
   ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   PHB_ITEM phalf_sz = hb_param( 3, HB_IT_ARRAY );
   ImVec2 half_sz = ImVec2{ _paf( phalf_sz, 1 ), _paf( phalf_sz, 2 ) };
   ImGuiDir direction = ( ImGuiDir ) hb_parni( 4 );
   ImU32 col = ( HB_U32 ) hb_parnl( 5 );
   igRenderArrowPointingAt(draw_list,pos,half_sz,direction,col);
}

/* void igRenderBullet(ImDrawList* draw_list,ImVec2 pos,ImU32 col) */
HB_FUNC( IGRENDERBULLET )
{
   ImDrawList* draw_list = ( ImDrawList* ) hb_parptr( 1 );
   PHB_ITEM ppos = hb_param( 2, HB_IT_ARRAY );
   ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   ImU32 col = ( HB_U32 ) hb_parnl( 3 );
   igRenderBullet(draw_list,pos,col);
}

/* void igRenderCheckMark(ImDrawList* draw_list,ImVec2 pos,ImU32 col,float sz) */
HB_FUNC( IGRENDERCHECKMARK )
{
   ImDrawList* draw_list = ( ImDrawList* ) hb_parptr( 1 );
   PHB_ITEM ppos = hb_param( 2, HB_IT_ARRAY );
   ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   ImU32 col = ( HB_U32 ) hb_parnl( 3 );
   float sz = ( float ) hb_parnd( 4 );
   igRenderCheckMark(draw_list,pos,col,sz);
}

/* void igRenderColorRectWithAlphaCheckerboard(ImDrawList* draw_list,ImVec2 p_min,ImVec2 p_max,ImU32 fill_col,float grid_step,ImVec2 grid_off,float rounding,ImDrawFlags flags) */
HB_FUNC( IGRENDERCOLORRECTWITHALPHACHECKERBOARD )
{
   ImDrawList* draw_list = ( ImDrawList* ) hb_parptr( 1 );
   PHB_ITEM pp_min = hb_param( 2, HB_IT_ARRAY );
   ImVec2 p_min = ImVec2{ _paf( pp_min, 1 ), _paf( pp_min, 2 ) };
   PHB_ITEM pp_max = hb_param( 3, HB_IT_ARRAY );
   ImVec2 p_max = ImVec2{ _paf( pp_max, 1 ), _paf( pp_max, 2 ) };
   ImU32 fill_col = ( HB_U32 ) hb_parnl( 4 );
   float grid_step = ( float ) hb_parnd( 5 );
   PHB_ITEM pgrid_off = hb_param( 6, HB_IT_ARRAY );
   ImVec2 grid_off = ImVec2{ _paf( pgrid_off, 1 ), _paf( pgrid_off, 2 ) };
   float rounding = ( float ) hb_parnd( 7 );
   ImDrawFlags flags = ( ImDrawFlags ) hb_parni( 8 );
   igRenderColorRectWithAlphaCheckerboard(draw_list,p_min,p_max,fill_col,grid_step,grid_off,rounding,flags);
}

/* void igRenderFrame(ImVec2 p_min,ImVec2 p_max,ImU32 fill_col,bool border,float rounding) */
HB_FUNC( IGRENDERFRAME )
{
   PHB_ITEM pp_min = hb_param( 1, HB_IT_ARRAY );
   ImVec2 p_min = ImVec2{ _paf( pp_min, 1 ), _paf( pp_min, 2 ) };
   PHB_ITEM pp_max = hb_param( 2, HB_IT_ARRAY );
   ImVec2 p_max = ImVec2{ _paf( pp_max, 1 ), _paf( pp_max, 2 ) };
   ImU32 fill_col = ( HB_U32 ) hb_parnl( 3 );
   bool border = hb_parldef( 4, 1 );
   float rounding = ( float ) hb_parnd( 5 );
   igRenderFrame(p_min,p_max,fill_col,border,rounding);
}

/* void igRenderFrameBorder(ImVec2 p_min,ImVec2 p_max,float rounding) */
HB_FUNC( IGRENDERFRAMEBORDER )
{
   PHB_ITEM pp_min = hb_param( 1, HB_IT_ARRAY );
   ImVec2 p_min = ImVec2{ _paf( pp_min, 1 ), _paf( pp_min, 2 ) };
   PHB_ITEM pp_max = hb_param( 2, HB_IT_ARRAY );
   ImVec2 p_max = ImVec2{ _paf( pp_max, 1 ), _paf( pp_max, 2 ) };
   float rounding = ( float ) hb_parnd( 3 );
   igRenderFrameBorder(p_min,p_max,rounding);
}

/* void igRenderMouseCursor(ImDrawList* draw_list,ImVec2 pos,float scale,ImGuiMouseCursor mouse_cursor,ImU32 col_fill,ImU32 col_border,ImU32 col_shadow) */
HB_FUNC( IGRENDERMOUSECURSOR )
{
   ImDrawList* draw_list = ( ImDrawList* ) hb_parptr( 1 );
   PHB_ITEM ppos = hb_param( 2, HB_IT_ARRAY );
   ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   float scale = ( float ) hb_parnd( 3 );
   ImGuiMouseCursor mouse_cursor = ( ImGuiMouseCursor ) hb_parni( 4 );
   ImU32 col_fill = ( HB_U32 ) hb_parnl( 5 );
   ImU32 col_border = ( HB_U32 ) hb_parnl( 6 );
   ImU32 col_shadow = ( HB_U32 ) hb_parnl( 7 );
   igRenderMouseCursor(draw_list,pos,scale,mouse_cursor,col_fill,col_border,col_shadow);
}

/* void igRenderNavHighlight(const ImRect bb,ImGuiID id,ImGuiNavHighlightFlags flags) */
HB_FUNC( IGRENDERNAVHIGHLIGHT )
{
   PHB_ITEM pbb = hb_param( 1, HB_IT_ARRAY );
   const ImRect bb = ImRect{ ImVec2{ _paf( pbb, 1 ), _paf( pbb, 2 ) }, ImVec2{ _paf( pbb, 3 ), _paf( pbb, 4 ) } };
   ImGuiID id = ( ImGuiID ) hb_parni( 2 );
   ImGuiNavHighlightFlags flags = ( ImGuiNavHighlightFlags ) hb_parni( 3 );
   igRenderNavHighlight(bb,id,flags);
}

/* void igRenderPlatformWindowsDefault(void* platform_render_arg,void* renderer_render_arg) */
HB_FUNC( IGRENDERPLATFORMWINDOWSDEFAULT )
{
   void* platform_render_arg = ( void* ) hb_parptr( 1 );
   void* renderer_render_arg = ( void* ) hb_parptr( 2 );
   igRenderPlatformWindowsDefault(platform_render_arg,renderer_render_arg);
}

/* void igRenderRectFilledRangeH(ImDrawList* draw_list,const ImRect rect,ImU32 col,float x_start_norm,float x_end_norm,float rounding) */
HB_FUNC( IGRENDERRECTFILLEDRANGEH )
{
   ImDrawList* draw_list = ( ImDrawList* ) hb_parptr( 1 );
   PHB_ITEM prect = hb_param( 2, HB_IT_ARRAY );
   const ImRect rect = ImRect{ ImVec2{ _paf( prect, 1 ), _paf( prect, 2 ) }, ImVec2{ _paf( prect, 3 ), _paf( prect, 4 ) } };
   ImU32 col = ( HB_U32 ) hb_parnl( 3 );
   float x_start_norm = ( float ) hb_parnd( 4 );
   float x_end_norm = ( float ) hb_parnd( 5 );
   float rounding = ( float ) hb_parnd( 6 );
   igRenderRectFilledRangeH(draw_list,rect,col,x_start_norm,x_end_norm,rounding);
}

/* void igRenderRectFilledWithHole(ImDrawList* draw_list,ImRect outer,ImRect inner,ImU32 col,float rounding) */
HB_FUNC( IGRENDERRECTFILLEDWITHHOLE )
{
   ImDrawList* draw_list = ( ImDrawList* ) hb_parptr( 1 );
   PHB_ITEM pouter = hb_param( 2, HB_IT_ARRAY );
   ImRect outer = ImRect{ ImVec2{ _paf( pouter, 1 ), _paf( pouter, 2 ) }, ImVec2{ _paf( pouter, 3 ), _paf( pouter, 4 ) } };
   PHB_ITEM pinner = hb_param( 3, HB_IT_ARRAY );
   ImRect inner = ImRect{ ImVec2{ _paf( pinner, 1 ), _paf( pinner, 2 ) }, ImVec2{ _paf( pinner, 3 ), _paf( pinner, 4 ) } };
   ImU32 col = ( HB_U32 ) hb_parnl( 4 );
   float rounding = ( float ) hb_parnd( 5 );
   igRenderRectFilledWithHole(draw_list,outer,inner,col,rounding);
}

/* void igRenderText(ImVec2 pos,const char* text,const char* text_end,bool hide_text_after_hash) */
HB_FUNC( IGRENDERTEXT )
{
   PHB_ITEM ppos = hb_param( 1, HB_IT_ARRAY );
   ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   const char* text = hb_parcx( 2 );
   const char* text_end = NULL;
   bool hide_text_after_hash = hb_parldef( 3, 1 );
   igRenderText(pos,text,text_end,hide_text_after_hash);
}

/* void igRenderTextClipped(const ImVec2 pos_min,const ImVec2 pos_max,const char* text,const char* text_end,const ImVec2* text_size_if_known,const ImVec2 align,const ImRect* clip_rect) */
HB_FUNC( IGRENDERTEXTCLIPPED )
{
   PHB_ITEM ppos_min = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 pos_min = ImVec2{ _paf( ppos_min, 1 ), _paf( ppos_min, 2 ) };
   PHB_ITEM ppos_max = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 pos_max = ImVec2{ _paf( ppos_max, 1 ), _paf( ppos_max, 2 ) };
   const char* text = hb_parcx( 3 );
   const char* text_end = NULL;
   const ImVec2* text_size_if_known = ( const ImVec2* ) hb_parptr( 4 );
   PHB_ITEM palign = hb_param( 5, HB_IT_ARRAY );
   const ImVec2 align = ImVec2{ _paf( palign, 1 ), _paf( palign, 2 ) };
   const ImRect* clip_rect = ( const ImRect* ) hb_parptr( 6 );
   igRenderTextClipped(pos_min,pos_max,text,text_end,text_size_if_known,align,clip_rect);
}

/* void igRenderTextClippedEx(ImDrawList* draw_list,const ImVec2 pos_min,const ImVec2 pos_max,const char* text,const char* text_end,const ImVec2* text_size_if_known,const ImVec2 align,const ImRect* clip_rect) */
HB_FUNC( IGRENDERTEXTCLIPPEDEX )
{
   ImDrawList* draw_list = ( ImDrawList* ) hb_parptr( 1 );
   PHB_ITEM ppos_min = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 pos_min = ImVec2{ _paf( ppos_min, 1 ), _paf( ppos_min, 2 ) };
   PHB_ITEM ppos_max = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 pos_max = ImVec2{ _paf( ppos_max, 1 ), _paf( ppos_max, 2 ) };
   const char* text = hb_parcx( 4 );
   const char* text_end = NULL;
   const ImVec2* text_size_if_known = ( const ImVec2* ) hb_parptr( 5 );
   PHB_ITEM palign = hb_param( 6, HB_IT_ARRAY );
   const ImVec2 align = ImVec2{ _paf( palign, 1 ), _paf( palign, 2 ) };
   const ImRect* clip_rect = ( const ImRect* ) hb_parptr( 7 );
   igRenderTextClippedEx(draw_list,pos_min,pos_max,text,text_end,text_size_if_known,align,clip_rect);
}

/* void igRenderTextEllipsis(ImDrawList* draw_list,const ImVec2 pos_min,const ImVec2 pos_max,float clip_max_x,float ellipsis_max_x,const char* text,const char* text_end,const ImVec2* text_size_if_known) */
HB_FUNC( IGRENDERTEXTELLIPSIS )
{
   ImDrawList* draw_list = ( ImDrawList* ) hb_parptr( 1 );
   PHB_ITEM ppos_min = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 pos_min = ImVec2{ _paf( ppos_min, 1 ), _paf( ppos_min, 2 ) };
   PHB_ITEM ppos_max = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 pos_max = ImVec2{ _paf( ppos_max, 1 ), _paf( ppos_max, 2 ) };
   float clip_max_x = ( float ) hb_parnd( 4 );
   float ellipsis_max_x = ( float ) hb_parnd( 5 );
   const char* text = hb_parcx( 6 );
   const char* text_end = NULL;
   const ImVec2* text_size_if_known = ( const ImVec2* ) hb_parptr( 7 );
   igRenderTextEllipsis(draw_list,pos_min,pos_max,clip_max_x,ellipsis_max_x,text,text_end,text_size_if_known);
}

/* void igRenderTextWrapped(ImVec2 pos,const char* text,const char* text_end,float wrap_width) */
HB_FUNC( IGRENDERTEXTWRAPPED )
{
   PHB_ITEM ppos = hb_param( 1, HB_IT_ARRAY );
   ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   const char* text = hb_parcx( 2 );
   const char* text_end = NULL;
   float wrap_width = ( float ) hb_parnd( 3 );
   igRenderTextWrapped(pos,text,text_end,wrap_width);
}

/* void igResetMouseDragDelta(ImGuiMouseButton button) */
HB_FUNC( IGRESETMOUSEDRAGDELTA )
{
   ImGuiMouseButton button = ( ImGuiMouseButton ) hb_parni( 1 );
   igResetMouseDragDelta(button);
}

/* void igSameLine(float offset_from_start_x,float spacing) */
HB_FUNC( IGSAMELINE )
{
   float offset_from_start_x = ( float ) hb_parnd( 1 );
   float spacing = ( float ) hb_parnd( 2 );
   igSameLine(offset_from_start_x,spacing);
}

/* void igSaveIniSettingsToDisk(const char* ini_filename) */
HB_FUNC( IGSAVEINISETTINGSTODISK )
{
   const char* ini_filename = hb_parcx( 1 );
   igSaveIniSettingsToDisk(ini_filename);
}

/* const char* igSaveIniSettingsToMemory(size_t* out_ini_size) */
HB_FUNC( IGSAVEINISETTINGSTOMEMORY )
{
   size_t _out_ini_size;
   size_t* out_ini_size = &_out_ini_size;
   const char* ret = igSaveIniSettingsToMemory(out_ini_size);
   hb_itemPutNL( hb_paramError( 1 ), _out_ini_size );
   hb_retclen( ret, _out_ini_size );
}

/* void igScaleWindowsInViewport(ImGuiViewportP* viewport,float scale) */
HB_FUNC( IGSCALEWINDOWSINVIEWPORT )
{
   ImGuiViewportP* viewport = ( ImGuiViewportP* ) hb_parptr( 1 );
   float scale = ( float ) hb_parnd( 2 );
   igScaleWindowsInViewport(viewport,scale);
}

/* void igScrollToBringRectIntoView(ImGuiWindow* window,const ImRect rect) */
HB_FUNC( IGSCROLLTOBRINGRECTINTOVIEW )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   PHB_ITEM prect = hb_param( 2, HB_IT_ARRAY );
   const ImRect rect = ImRect{ ImVec2{ _paf( prect, 1 ), _paf( prect, 2 ) }, ImVec2{ _paf( prect, 3 ), _paf( prect, 4 ) } };
   igScrollToBringRectIntoView(window,rect);
}

/* void igScrollToItem(ImGuiScrollFlags flags) */
HB_FUNC( IGSCROLLTOITEM )
{
   ImGuiScrollFlags flags = ( ImGuiScrollFlags ) hb_parni( 1 );
   igScrollToItem(flags);
}

/* void igScrollToRect(ImGuiWindow* window,const ImRect rect,ImGuiScrollFlags flags) */
HB_FUNC( IGSCROLLTORECT )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   PHB_ITEM prect = hb_param( 2, HB_IT_ARRAY );
   const ImRect rect = ImRect{ ImVec2{ _paf( prect, 1 ), _paf( prect, 2 ) }, ImVec2{ _paf( prect, 3 ), _paf( prect, 4 ) } };
   ImGuiScrollFlags flags = ( ImGuiScrollFlags ) hb_parni( 3 );
   igScrollToRect(window,rect,flags);
}

/* void igScrollToRectEx(ImVec2 *pOut,ImGuiWindow* window,const ImRect rect,ImGuiScrollFlags flags) */
HB_FUNC( IGSCROLLTORECTEX )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 2 );
   PHB_ITEM prect = hb_param( 3, HB_IT_ARRAY );
   const ImRect rect = ImRect{ ImVec2{ _paf( prect, 1 ), _paf( prect, 2 ) }, ImVec2{ _paf( prect, 3 ), _paf( prect, 4 ) } };
   ImGuiScrollFlags flags = ( ImGuiScrollFlags ) hb_parni( 4 );
   igScrollToRectEx(&pOut,window,rect,flags);
   _ImVec2toA( &pOut, pOutItem );
}

/* void igScrollbar(ImGuiAxis axis) */
HB_FUNC( IGSCROLLBAR )
{
   ImGuiAxis axis = ( ImGuiAxis ) hb_parni( 1 );
   igScrollbar(axis);
}

/* bool igScrollbarEx(const ImRect bb,ImGuiID id,ImGuiAxis axis,float* p_scroll_v,float avail_v,float contents_v,ImDrawFlags flags) */
HB_FUNC( IGSCROLLBAREX )
{
   PHB_ITEM pbb = hb_param( 1, HB_IT_ARRAY );
   const ImRect bb = ImRect{ ImVec2{ _paf( pbb, 1 ), _paf( pbb, 2 ) }, ImVec2{ _paf( pbb, 3 ), _paf( pbb, 4 ) } };
   ImGuiID id = ( ImGuiID ) hb_parni( 2 );
   ImGuiAxis axis = ( ImGuiAxis ) hb_parni( 3 );
   float /* @ */ _p_scroll_v = ( float ) hb_parnd( 4 );
   float * p_scroll_v = &_p_scroll_v;
   float avail_v = ( float ) hb_parnd( 5 );
   float contents_v = ( float ) hb_parnd( 6 );
   ImDrawFlags flags = ( ImDrawFlags ) hb_parni( 7 );
   bool ret = igScrollbarEx(bb,id,axis,p_scroll_v,avail_v,contents_v,flags);
   hb_itemPutND( hb_paramError( 4 ), ( double ) _p_scroll_v );
   hb_retl( ret );
}

/* bool igSelectable_Bool(const char* label,bool selected,ImGuiSelectableFlags flags,const ImVec2 size) */
HB_FUNC( IGSELECTABLEBOOL )
{
   const char* label = hb_parcx( 1 );
   bool selected = hb_parldef( 2, 0 );
   ImGuiSelectableFlags flags = ( ImGuiSelectableFlags ) hb_parni( 3 );
   PHB_ITEM psize = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   bool ret = igSelectable_Bool(label,selected,flags,size);
   hb_retl( ret );
}

/* bool igSelectable_BoolPtr(const char* label,bool* p_selected,ImGuiSelectableFlags flags,const ImVec2 size) */
HB_FUNC( IGSELECTABLEBOOLPTR )
{
   const char* label = hb_parcx( 1 );
   bool /* @ */ _p_selected = hb_parl( 2 );
   bool * p_selected = &_p_selected;
   ImGuiSelectableFlags flags = ( ImGuiSelectableFlags ) hb_parni( 3 );
   PHB_ITEM psize = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   bool ret = igSelectable_BoolPtr(label,p_selected,flags,size);
   hb_itemPutL( hb_paramError( 2 ), _p_selected );
   hb_retl( ret );
}

/* void igSeparator() */
HB_FUNC( IGSEPARATOR )
{
   igSeparator();
}

/* void igSeparatorEx(ImGuiSeparatorFlags flags) */
HB_FUNC( IGSEPARATOREX )
{
   ImGuiSeparatorFlags flags = ( ImGuiSeparatorFlags ) hb_parni( 1 );
   igSeparatorEx(flags);
}

/* void igSetActiveID(ImGuiID id,ImGuiWindow* window) */
HB_FUNC( IGSETACTIVEID )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 2 );
   igSetActiveID(id,window);
}

/* void igSetActiveIdUsingNavAndKeys() */
HB_FUNC( IGSETACTIVEIDUSINGNAVANDKEYS )
{
   igSetActiveIdUsingNavAndKeys();
}

/* void igSetAllocatorFunctions(ImGuiMemAllocFunc alloc_func,ImGuiMemFreeFunc free_func,void* user_data) */
HB_FUNC( IGSETALLOCATORFUNCTIONS )
{
   ImGuiMemAllocFunc alloc_func;
   ImGuiMemFreeFunc free_func;
   void* user_data = ( void* ) hb_parptr( 3 );
   igSetAllocatorFunctions(alloc_func,free_func,user_data);
}

/* void igSetClipboardText(const char* text) */
HB_FUNC( IGSETCLIPBOARDTEXT )
{
   const char* text = hb_parcx( 1 );
   igSetClipboardText(text);
}

/* void igSetColorEditOptions(ImGuiColorEditFlags flags) */
HB_FUNC( IGSETCOLOREDITOPTIONS )
{
   ImGuiColorEditFlags flags = ( ImGuiColorEditFlags ) hb_parni( 1 );
   igSetColorEditOptions(flags);
}

/* void igSetColumnOffset(int column_index,float offset_x) */
HB_FUNC( IGSETCOLUMNOFFSET )
{
   int column_index = hb_parni( 1 );
   float offset_x = ( float ) hb_parnd( 2 );
   igSetColumnOffset(column_index,offset_x);
}

/* void igSetColumnWidth(int column_index,float width) */
HB_FUNC( IGSETCOLUMNWIDTH )
{
   int column_index = hb_parni( 1 );
   float width = ( float ) hb_parnd( 2 );
   igSetColumnWidth(column_index,width);
}

/* void igSetCurrentContext(ImGuiContext* ctx) */
HB_FUNC( IGSETCURRENTCONTEXT )
{
   ImGuiContext* ctx = ( ImGuiContext* ) hb_parptr( 1 );
   igSetCurrentContext(ctx);
}

/* void igSetCurrentFont(ImFont* font) */
HB_FUNC( IGSETCURRENTFONT )
{
   ImFont* font = ( ImFont* ) hb_parptr( 1 );
   igSetCurrentFont(font);
}

/* void igSetCurrentViewport(ImGuiWindow* window,ImGuiViewportP* viewport) */
HB_FUNC( IGSETCURRENTVIEWPORT )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   ImGuiViewportP* viewport = ( ImGuiViewportP* ) hb_parptr( 2 );
   igSetCurrentViewport(window,viewport);
}

/* void igSetCursorPos(const ImVec2 local_pos) */
HB_FUNC( IGSETCURSORPOS )
{
   PHB_ITEM plocal_pos = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 local_pos = ImVec2{ _paf( plocal_pos, 1 ), _paf( plocal_pos, 2 ) };
   igSetCursorPos(local_pos);
}

/* void igSetCursorPosX(float local_x) */
HB_FUNC( IGSETCURSORPOSX )
{
   float local_x = ( float ) hb_parnd( 1 );
   igSetCursorPosX(local_x);
}

/* void igSetCursorPosY(float local_y) */
HB_FUNC( IGSETCURSORPOSY )
{
   float local_y = ( float ) hb_parnd( 1 );
   igSetCursorPosY(local_y);
}

/* void igSetCursorScreenPos(const ImVec2 pos) */
HB_FUNC( IGSETCURSORSCREENPOS )
{
   PHB_ITEM ppos = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   igSetCursorScreenPos(pos);
}

/* bool igSetDragDropPayload(const char* type,const void* data,size_t sz,ImGuiCond cond) */
HB_FUNC( IGSETDRAGDROPPAYLOAD )
{
   const char* type = hb_parcx( 1 );
   const void* data = ( const void* ) hb_parptr( 2 );
   size_t sz = ( size_t ) hb_parnl( 3 );
   ImGuiCond cond = ( ImGuiCond ) hb_parni( 4 );
   bool ret = igSetDragDropPayload(type,data,sz,cond);
   hb_retl( ret );
}

/* void igSetFocusID(ImGuiID id,ImGuiWindow* window) */
HB_FUNC( IGSETFOCUSID )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 2 );
   igSetFocusID(id,window);
}

/* void igSetHoveredID(ImGuiID id) */
HB_FUNC( IGSETHOVEREDID )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   igSetHoveredID(id);
}

/* void igSetItemAllowOverlap() */
HB_FUNC( IGSETITEMALLOWOVERLAP )
{
   igSetItemAllowOverlap();
}

/* void igSetItemDefaultFocus() */
HB_FUNC( IGSETITEMDEFAULTFOCUS )
{
   igSetItemDefaultFocus();
}

/* void igSetItemUsingMouseWheel() */
HB_FUNC( IGSETITEMUSINGMOUSEWHEEL )
{
   igSetItemUsingMouseWheel();
}

/* void igSetKeyboardFocusHere(int offset) */
HB_FUNC( IGSETKEYBOARDFOCUSHERE )
{
   int offset = hb_parni( 1 );
   igSetKeyboardFocusHere(offset);
}

/* void igSetLastItemData(ImGuiID item_id,ImGuiItemFlags in_flags,ImGuiItemStatusFlags status_flags,const ImRect item_rect) */
HB_FUNC( IGSETLASTITEMDATA )
{
   ImGuiID item_id = ( ImGuiID ) hb_parni( 1 );
   ImGuiItemFlags in_flags = ( ImGuiItemFlags ) hb_parni( 2 );
   ImGuiItemStatusFlags status_flags = ( ImGuiItemStatusFlags ) hb_parni( 3 );
   PHB_ITEM pitem_rect = hb_param( 4, HB_IT_ARRAY );
   const ImRect item_rect = ImRect{ ImVec2{ _paf( pitem_rect, 1 ), _paf( pitem_rect, 2 ) }, ImVec2{ _paf( pitem_rect, 3 ), _paf( pitem_rect, 4 ) } };
   igSetLastItemData(item_id,in_flags,status_flags,item_rect);
}

/* void igSetMouseCursor(ImGuiMouseCursor cursor_type) */
HB_FUNC( IGSETMOUSECURSOR )
{
   ImGuiMouseCursor cursor_type = ( ImGuiMouseCursor ) hb_parni( 1 );
   igSetMouseCursor(cursor_type);
}

/* void igSetNavID(ImGuiID id,ImGuiNavLayer nav_layer,ImGuiID focus_scope_id,const ImRect rect_rel) */
HB_FUNC( IGSETNAVID )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   ImGuiNavLayer nav_layer = ( ImGuiNavLayer ) hb_parni( 2 );
   ImGuiID focus_scope_id = ( ImGuiID ) hb_parni( 3 );
   PHB_ITEM prect_rel = hb_param( 4, HB_IT_ARRAY );
   const ImRect rect_rel = ImRect{ ImVec2{ _paf( prect_rel, 1 ), _paf( prect_rel, 2 ) }, ImVec2{ _paf( prect_rel, 3 ), _paf( prect_rel, 4 ) } };
   igSetNavID(id,nav_layer,focus_scope_id,rect_rel);
}

/* void igSetNextItemOpen(bool is_open,ImGuiCond cond) */
HB_FUNC( IGSETNEXTITEMOPEN )
{
   bool is_open = hb_parl( 1 );
   ImGuiCond cond = ( ImGuiCond ) hb_parni( 2 );
   igSetNextItemOpen(is_open,cond);
}

/* void igSetNextItemWidth(float item_width) */
HB_FUNC( IGSETNEXTITEMWIDTH )
{
   float item_width = ( float ) hb_parnd( 1 );
   igSetNextItemWidth(item_width);
}

/* void igSetNextWindowBgAlpha(float alpha) */
HB_FUNC( IGSETNEXTWINDOWBGALPHA )
{
   float alpha = ( float ) hb_parnd( 1 );
   igSetNextWindowBgAlpha(alpha);
}

/* void igSetNextWindowClass(const ImGuiWindowClass* window_class) */
HB_FUNC( IGSETNEXTWINDOWCLASS )
{
   const ImGuiWindowClass* window_class = ( const ImGuiWindowClass* ) hb_parptr( 1 );
   igSetNextWindowClass(window_class);
}

/* void igSetNextWindowCollapsed(bool collapsed,ImGuiCond cond) */
HB_FUNC( IGSETNEXTWINDOWCOLLAPSED )
{
   bool collapsed = hb_parl( 1 );
   ImGuiCond cond = ( ImGuiCond ) hb_parni( 2 );
   igSetNextWindowCollapsed(collapsed,cond);
}

/* void igSetNextWindowContentSize(const ImVec2 size) */
HB_FUNC( IGSETNEXTWINDOWCONTENTSIZE )
{
   PHB_ITEM psize = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   igSetNextWindowContentSize(size);
}

/* void igSetNextWindowDockID(ImGuiID dock_id,ImGuiCond cond) */
HB_FUNC( IGSETNEXTWINDOWDOCKID )
{
   ImGuiID dock_id = ( ImGuiID ) hb_parni( 1 );
   ImGuiCond cond = ( ImGuiCond ) hb_parni( 2 );
   igSetNextWindowDockID(dock_id,cond);
}

/* void igSetNextWindowFocus() */
HB_FUNC( IGSETNEXTWINDOWFOCUS )
{
   igSetNextWindowFocus();
}

/* void igSetNextWindowPos(const ImVec2 pos,ImGuiCond cond,const ImVec2 pivot) */
HB_FUNC( IGSETNEXTWINDOWPOS )
{
   PHB_ITEM ppos = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   ImGuiCond cond = ( ImGuiCond ) hb_parni( 2 );
   PHB_ITEM ppivot = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 pivot = ImVec2{ _paf( ppivot, 1 ), _paf( ppivot, 2 ) };
   igSetNextWindowPos(pos,cond,pivot);
}

/* void igSetNextWindowScroll(const ImVec2 scroll) */
HB_FUNC( IGSETNEXTWINDOWSCROLL )
{
   PHB_ITEM pscroll = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 scroll = ImVec2{ _paf( pscroll, 1 ), _paf( pscroll, 2 ) };
   igSetNextWindowScroll(scroll);
}

/* void igSetNextWindowSize(const ImVec2 size,ImGuiCond cond) */
HB_FUNC( IGSETNEXTWINDOWSIZE )
{
   PHB_ITEM psize = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   ImGuiCond cond = ( ImGuiCond ) hb_parni( 2 );
   igSetNextWindowSize(size,cond);
}

/* void igSetNextWindowSizeConstraints(const ImVec2 size_min,const ImVec2 size_max,ImGuiSizeCallback custom_callback,void* custom_callback_data) */
HB_FUNC( IGSETNEXTWINDOWSIZECONSTRAINTS )
{
   PHB_ITEM psize_min = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 size_min = ImVec2{ _paf( psize_min, 1 ), _paf( psize_min, 2 ) };
   PHB_ITEM psize_max = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 size_max = ImVec2{ _paf( psize_max, 1 ), _paf( psize_max, 2 ) };
   ImGuiSizeCallback custom_callback;
   void* custom_callback_data = ( void* ) hb_parptr( 4 );
   igSetNextWindowSizeConstraints(size_min,size_max,custom_callback,custom_callback_data);
}

/* void igSetNextWindowViewport(ImGuiID viewport_id) */
HB_FUNC( IGSETNEXTWINDOWVIEWPORT )
{
   ImGuiID viewport_id = ( ImGuiID ) hb_parni( 1 );
   igSetNextWindowViewport(viewport_id);
}

/* void igSetScrollFromPosX_Float(float local_x,float center_x_ratio) */
HB_FUNC( IGSETSCROLLFROMPOSXFLOAT )
{
   float local_x = ( float ) hb_parnd( 1 );
   float center_x_ratio = ( float ) hb_parnd( 2 );
   igSetScrollFromPosX_Float(local_x,center_x_ratio);
}

/* void igSetScrollFromPosX_WindowPtr(ImGuiWindow* window,float local_x,float center_x_ratio) */
HB_FUNC( IGSETSCROLLFROMPOSXWINDOWPTR )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   float local_x = ( float ) hb_parnd( 2 );
   float center_x_ratio = ( float ) hb_parnd( 3 );
   igSetScrollFromPosX_WindowPtr(window,local_x,center_x_ratio);
}

/* void igSetScrollFromPosY_Float(float local_y,float center_y_ratio) */
HB_FUNC( IGSETSCROLLFROMPOSYFLOAT )
{
   float local_y = ( float ) hb_parnd( 1 );
   float center_y_ratio = ( float ) hb_parnd( 2 );
   igSetScrollFromPosY_Float(local_y,center_y_ratio);
}

/* void igSetScrollFromPosY_WindowPtr(ImGuiWindow* window,float local_y,float center_y_ratio) */
HB_FUNC( IGSETSCROLLFROMPOSYWINDOWPTR )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   float local_y = ( float ) hb_parnd( 2 );
   float center_y_ratio = ( float ) hb_parnd( 3 );
   igSetScrollFromPosY_WindowPtr(window,local_y,center_y_ratio);
}

/* void igSetScrollHereX(float center_x_ratio) */
HB_FUNC( IGSETSCROLLHEREX )
{
   float center_x_ratio = ( float ) hb_parnd( 1 );
   igSetScrollHereX(center_x_ratio);
}

/* void igSetScrollHereY(float center_y_ratio) */
HB_FUNC( IGSETSCROLLHEREY )
{
   float center_y_ratio = ( float ) hb_parnd( 1 );
   igSetScrollHereY(center_y_ratio);
}

/* void igSetScrollX_Float(float scroll_x) */
HB_FUNC( IGSETSCROLLXFLOAT )
{
   float scroll_x = ( float ) hb_parnd( 1 );
   igSetScrollX_Float(scroll_x);
}

/* void igSetScrollX_WindowPtr(ImGuiWindow* window,float scroll_x) */
HB_FUNC( IGSETSCROLLXWINDOWPTR )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   float scroll_x = ( float ) hb_parnd( 2 );
   igSetScrollX_WindowPtr(window,scroll_x);
}

/* void igSetScrollY_Float(float scroll_y) */
HB_FUNC( IGSETSCROLLYFLOAT )
{
   float scroll_y = ( float ) hb_parnd( 1 );
   igSetScrollY_Float(scroll_y);
}

/* void igSetScrollY_WindowPtr(ImGuiWindow* window,float scroll_y) */
HB_FUNC( IGSETSCROLLYWINDOWPTR )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   float scroll_y = ( float ) hb_parnd( 2 );
   igSetScrollY_WindowPtr(window,scroll_y);
}

/* void igSetStateStorage(ImGuiStorage* storage) */
HB_FUNC( IGSETSTATESTORAGE )
{
   ImGuiStorage* storage = ( ImGuiStorage* ) hb_parptr( 1 );
   igSetStateStorage(storage);
}

/* void igSetTabItemClosed(const char* tab_or_docked_window_label) */
HB_FUNC( IGSETTABITEMCLOSED )
{
   const char* tab_or_docked_window_label = hb_parcx( 1 );
   igSetTabItemClosed(tab_or_docked_window_label);
}

/* void igSetTooltip(const char* fmt,...) */
HB_FUNC( IGSETTOOLTIP )
{
   const char* fmt = hb_parcx( 1 );
   igSetTooltip(fmt,NULL);
}

/* void igSetTooltipV(const char* fmt,va_list args) */
HB_FUNC( IGSETTOOLTIPV )
{
   const char* fmt = hb_parcx( 1 );
   /* unsupported */
}

/* void igSetWindowClipRectBeforeSetChannel(ImGuiWindow* window,const ImRect clip_rect) */
HB_FUNC( IGSETWINDOWCLIPRECTBEFORESETCHANNEL )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   PHB_ITEM pclip_rect = hb_param( 2, HB_IT_ARRAY );
   const ImRect clip_rect = ImRect{ ImVec2{ _paf( pclip_rect, 1 ), _paf( pclip_rect, 2 ) }, ImVec2{ _paf( pclip_rect, 3 ), _paf( pclip_rect, 4 ) } };
   igSetWindowClipRectBeforeSetChannel(window,clip_rect);
}

/* void igSetWindowCollapsed_Bool(bool collapsed,ImGuiCond cond) */
HB_FUNC( IGSETWINDOWCOLLAPSEDBOOL )
{
   bool collapsed = hb_parl( 1 );
   ImGuiCond cond = ( ImGuiCond ) hb_parni( 2 );
   igSetWindowCollapsed_Bool(collapsed,cond);
}

/* void igSetWindowCollapsed_Str(const char* name,bool collapsed,ImGuiCond cond) */
HB_FUNC( IGSETWINDOWCOLLAPSEDSTR )
{
   const char* name = hb_parcx( 1 );
   bool collapsed = hb_parl( 2 );
   ImGuiCond cond = ( ImGuiCond ) hb_parni( 3 );
   igSetWindowCollapsed_Str(name,collapsed,cond);
}

/* void igSetWindowCollapsed_WindowPtr(ImGuiWindow* window,bool collapsed,ImGuiCond cond) */
HB_FUNC( IGSETWINDOWCOLLAPSEDWINDOWPTR )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   bool collapsed = hb_parl( 2 );
   ImGuiCond cond = ( ImGuiCond ) hb_parni( 3 );
   igSetWindowCollapsed_WindowPtr(window,collapsed,cond);
}

/* void igSetWindowDock(ImGuiWindow* window,ImGuiID dock_id,ImGuiCond cond) */
HB_FUNC( IGSETWINDOWDOCK )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   ImGuiID dock_id = ( ImGuiID ) hb_parni( 2 );
   ImGuiCond cond = ( ImGuiCond ) hb_parni( 3 );
   igSetWindowDock(window,dock_id,cond);
}

/* void igSetWindowFocus_Nil() */
HB_FUNC( IGSETWINDOWFOCUSNIL )
{
   igSetWindowFocus_Nil();
}

/* void igSetWindowFocus_Str(const char* name) */
HB_FUNC( IGSETWINDOWFOCUSSTR )
{
   const char* name = hb_parcx( 1 );
   igSetWindowFocus_Str(name);
}

/* void igSetWindowFontScale(float scale) */
HB_FUNC( IGSETWINDOWFONTSCALE )
{
   float scale = ( float ) hb_parnd( 1 );
   igSetWindowFontScale(scale);
}

/* void igSetWindowHitTestHole(ImGuiWindow* window,const ImVec2 pos,const ImVec2 size) */
HB_FUNC( IGSETWINDOWHITTESTHOLE )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   PHB_ITEM ppos = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   PHB_ITEM psize = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   igSetWindowHitTestHole(window,pos,size);
}

/* void igSetWindowPos_Vec2(const ImVec2 pos,ImGuiCond cond) */
HB_FUNC( IGSETWINDOWPOSVEC2 )
{
   PHB_ITEM ppos = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   ImGuiCond cond = ( ImGuiCond ) hb_parni( 2 );
   igSetWindowPos_Vec2(pos,cond);
}

/* void igSetWindowPos_Str(const char* name,const ImVec2 pos,ImGuiCond cond) */
HB_FUNC( IGSETWINDOWPOSSTR )
{
   const char* name = hb_parcx( 1 );
   PHB_ITEM ppos = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   ImGuiCond cond = ( ImGuiCond ) hb_parni( 3 );
   igSetWindowPos_Str(name,pos,cond);
}

/* void igSetWindowPos_WindowPtr(ImGuiWindow* window,const ImVec2 pos,ImGuiCond cond) */
HB_FUNC( IGSETWINDOWPOSWINDOWPTR )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   PHB_ITEM ppos = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   ImGuiCond cond = ( ImGuiCond ) hb_parni( 3 );
   igSetWindowPos_WindowPtr(window,pos,cond);
}

/* void igSetWindowSize_Vec2(const ImVec2 size,ImGuiCond cond) */
HB_FUNC( IGSETWINDOWSIZEVEC2 )
{
   PHB_ITEM psize = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   ImGuiCond cond = ( ImGuiCond ) hb_parni( 2 );
   igSetWindowSize_Vec2(size,cond);
}

/* void igSetWindowSize_Str(const char* name,const ImVec2 size,ImGuiCond cond) */
HB_FUNC( IGSETWINDOWSIZESTR )
{
   const char* name = hb_parcx( 1 );
   PHB_ITEM psize = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   ImGuiCond cond = ( ImGuiCond ) hb_parni( 3 );
   igSetWindowSize_Str(name,size,cond);
}

/* void igSetWindowSize_WindowPtr(ImGuiWindow* window,const ImVec2 size,ImGuiCond cond) */
HB_FUNC( IGSETWINDOWSIZEWINDOWPTR )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   PHB_ITEM psize = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   ImGuiCond cond = ( ImGuiCond ) hb_parni( 3 );
   igSetWindowSize_WindowPtr(window,size,cond);
}

/* void igShadeVertsLinearColorGradientKeepAlpha(ImDrawList* draw_list,int vert_start_idx,int vert_end_idx,ImVec2 gradient_p0,ImVec2 gradient_p1,ImU32 col0,ImU32 col1) */
HB_FUNC( IGSHADEVERTSLINEARCOLORGRADIENTKEEPALPHA )
{
   ImDrawList* draw_list = ( ImDrawList* ) hb_parptr( 1 );
   int vert_start_idx = hb_parni( 2 );
   int vert_end_idx = hb_parni( 3 );
   PHB_ITEM pgradient_p0 = hb_param( 4, HB_IT_ARRAY );
   ImVec2 gradient_p0 = ImVec2{ _paf( pgradient_p0, 1 ), _paf( pgradient_p0, 2 ) };
   PHB_ITEM pgradient_p1 = hb_param( 5, HB_IT_ARRAY );
   ImVec2 gradient_p1 = ImVec2{ _paf( pgradient_p1, 1 ), _paf( pgradient_p1, 2 ) };
   ImU32 col0 = ( HB_U32 ) hb_parnl( 6 );
   ImU32 col1 = ( HB_U32 ) hb_parnl( 7 );
   igShadeVertsLinearColorGradientKeepAlpha(draw_list,vert_start_idx,vert_end_idx,gradient_p0,gradient_p1,col0,col1);
}

/* void igShadeVertsLinearUV(ImDrawList* draw_list,int vert_start_idx,int vert_end_idx,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,bool clamp) */
HB_FUNC( IGSHADEVERTSLINEARUV )
{
   ImDrawList* draw_list = ( ImDrawList* ) hb_parptr( 1 );
   int vert_start_idx = hb_parni( 2 );
   int vert_end_idx = hb_parni( 3 );
   PHB_ITEM pa = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 a = ImVec2{ _paf( pa, 1 ), _paf( pa, 2 ) };
   PHB_ITEM pb = hb_param( 5, HB_IT_ARRAY );
   const ImVec2 b = ImVec2{ _paf( pb, 1 ), _paf( pb, 2 ) };
   PHB_ITEM puv_a = hb_param( 6, HB_IT_ARRAY );
   const ImVec2 uv_a = ImVec2{ _paf( puv_a, 1 ), _paf( puv_a, 2 ) };
   PHB_ITEM puv_b = hb_param( 7, HB_IT_ARRAY );
   const ImVec2 uv_b = ImVec2{ _paf( puv_b, 1 ), _paf( puv_b, 2 ) };
   bool clamp = hb_parl( 8 );
   igShadeVertsLinearUV(draw_list,vert_start_idx,vert_end_idx,a,b,uv_a,uv_b,clamp);
}

/* void igShowAboutWindow(bool* p_open) */
HB_FUNC( IGSHOWABOUTWINDOW )
{
   bool /* @ */ _p_open = hb_parl( 1 );
   bool * p_open = ( HB_ISNIL( 1 ) ? NULL : &_p_open );
   igShowAboutWindow(p_open);
   hb_itemPutL( hb_paramError( 1 ), _p_open );
}

/* void igShowDemoWindow(bool* p_open) */
HB_FUNC( IGSHOWDEMOWINDOW )
{
   bool /* @ */ _p_open = hb_parl( 1 );
   bool * p_open = ( HB_ISNIL( 1 ) ? NULL : &_p_open );
   igShowDemoWindow(p_open);
   hb_itemPutL( hb_paramError( 1 ), _p_open );
}

/* void igShowFontAtlas(ImFontAtlas* atlas) */
HB_FUNC( IGSHOWFONTATLAS )
{
   ImFontAtlas* atlas = ( ImFontAtlas* ) hb_parptr( 1 );
   igShowFontAtlas(atlas);
}

/* void igShowFontSelector(const char* label) */
HB_FUNC( IGSHOWFONTSELECTOR )
{
   const char* label = hb_parcx( 1 );
   igShowFontSelector(label);
}

/* void igShowMetricsWindow(bool* p_open) */
HB_FUNC( IGSHOWMETRICSWINDOW )
{
   bool /* @ */ _p_open = hb_parl( 1 );
   bool * p_open = ( HB_ISNIL( 1 ) ? NULL : &_p_open );
   igShowMetricsWindow(p_open);
   hb_itemPutL( hb_paramError( 1 ), _p_open );
}

/* void igShowStackToolWindow(bool* p_open) */
HB_FUNC( IGSHOWSTACKTOOLWINDOW )
{
   bool /* @ */ _p_open = hb_parl( 1 );
   bool * p_open = ( HB_ISNIL( 1 ) ? NULL : &_p_open );
   igShowStackToolWindow(p_open);
   hb_itemPutL( hb_paramError( 1 ), _p_open );
}

/* void igShowStyleEditor(ImGuiStyle* ref) */
HB_FUNC( IGSHOWSTYLEEDITOR )
{
   ImGuiStyle* ref = ( ImGuiStyle* ) hb_parptr( 1 );
   igShowStyleEditor(ref);
}

/* bool igShowStyleSelector(const char* label) */
HB_FUNC( IGSHOWSTYLESELECTOR )
{
   const char* label = hb_parcx( 1 );
   bool ret = igShowStyleSelector(label);
   hb_retl( ret );
}

/* void igShowUserGuide() */
HB_FUNC( IGSHOWUSERGUIDE )
{
   igShowUserGuide();
}

/* void igShrinkWidths(ImGuiShrinkWidthItem* items,int count,float width_excess) */
HB_FUNC( IGSHRINKWIDTHS )
{
   ImGuiShrinkWidthItem* items = ( ImGuiShrinkWidthItem* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   float width_excess = ( float ) hb_parnd( 3 );
   igShrinkWidths(items,count,width_excess);
}

/* void igShutdown(ImGuiContext* context) */
HB_FUNC( IGSHUTDOWN )
{
   ImGuiContext* context = ( ImGuiContext* ) hb_parptr( 1 );
   igShutdown(context);
}

/* bool igSliderAngle(const char* label,float* v_rad,float v_degrees_min,float v_degrees_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGSLIDERANGLE )
{
   const char* label = hb_parcx( 1 );
   float /* @ */ _v_rad = ( float ) hb_parnd( 2 );
   float * v_rad = &_v_rad;
   float v_degrees_min = ( float ) hb_parnd( 3 );
   float v_degrees_max = ( float ) hb_parnd( 4 );
   const char* format = hb_parcx( 5 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 6 );
   bool ret = igSliderAngle(label,v_rad,v_degrees_min,v_degrees_max,format,flags);
   hb_itemPutND( hb_paramError( 2 ), ( double ) _v_rad );
   hb_retl( ret );
}

/* bool igSliderBehavior(const ImRect bb,ImGuiID id,ImGuiDataType data_type,void* p_v,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags,ImRect* out_grab_bb) */
HB_FUNC( IGSLIDERBEHAVIOR )
{
   PHB_ITEM pbb = hb_param( 1, HB_IT_ARRAY );
   const ImRect bb = ImRect{ ImVec2{ _paf( pbb, 1 ), _paf( pbb, 2 ) }, ImVec2{ _paf( pbb, 3 ), _paf( pbb, 4 ) } };
   ImGuiID id = ( ImGuiID ) hb_parni( 2 );
   ImGuiDataType data_type = ( ImGuiDataType ) hb_parni( 3 );
   void* p_v = ( void* ) hb_parptr( 4 );
   const void* p_min = ( const void* ) hb_parptr( 5 );
   const void* p_max = ( const void* ) hb_parptr( 6 );
   const char* format = hb_parcx( 7 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 8 );
   ImRect _out_grab_bb;
   ImRect* out_grab_bb = &_out_grab_bb;
   bool ret = igSliderBehavior(bb,id,data_type,p_v,p_min,p_max,format,flags,out_grab_bb);
   hb_retl( ret );
}

/* bool igSliderFloat(const char* label,float* v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGSLIDERFLOAT )
{
   const char* label = hb_parcx( 1 );
   float /* @ */ _v = ( float ) hb_parnd( 2 );
   float * v = &_v;
   float v_min = ( float ) hb_parnd( 3 );
   float v_max = ( float ) hb_parnd( 4 );
   const char* format = hb_parcx( 5 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 6 );
   bool ret = igSliderFloat(label,v,v_min,v_max,format,flags);
   hb_itemPutND( hb_paramError( 2 ), ( double ) _v );
   hb_retl( ret );
}

/* bool igSliderFloat2(const char* label,float v[2],float v_min,float v_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGSLIDERFLOAT2 )
{
   const char* label = hb_parcx( 1 );
   float * v;
   PHB_IG_FLOATS _v = hb_ig_floats_par( 2 );
   float v_min = ( float ) hb_parnd( 3 );
   float v_max = ( float ) hb_parnd( 4 );
   const char* format = hb_parcx( 5 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 6 );
   static float s_v[2] = { 0,0 };
   if( _v && _v->nSize >= 2 )
      v = _v->pBuf;
   else
      v = &s_v[0];
   bool ret = igSliderFloat2(label,v,v_min,v_max,format,flags);
   hb_retl( ret );
}

/* bool igSliderFloat3(const char* label,float v[3],float v_min,float v_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGSLIDERFLOAT3 )
{
   const char* label = hb_parcx( 1 );
   float * v;
   PHB_IG_FLOATS _v = hb_ig_floats_par( 2 );
   float v_min = ( float ) hb_parnd( 3 );
   float v_max = ( float ) hb_parnd( 4 );
   const char* format = hb_parcx( 5 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 6 );
   static float s_v[3] = { 0,0,0 };
   if( _v && _v->nSize >= 3 )
      v = _v->pBuf;
   else
      v = &s_v[0];
   bool ret = igSliderFloat3(label,v,v_min,v_max,format,flags);
   hb_retl( ret );
}

/* bool igSliderFloat4(const char* label,float v[4],float v_min,float v_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGSLIDERFLOAT4 )
{
   const char* label = hb_parcx( 1 );
   float * v;
   PHB_IG_FLOATS _v = hb_ig_floats_par( 2 );
   float v_min = ( float ) hb_parnd( 3 );
   float v_max = ( float ) hb_parnd( 4 );
   const char* format = hb_parcx( 5 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 6 );
   static float s_v[4] = { 0,0,0,0 };
   if( _v && _v->nSize >= 4 )
      v = _v->pBuf;
   else
      v = &s_v[0];
   bool ret = igSliderFloat4(label,v,v_min,v_max,format,flags);
   hb_retl( ret );
}

/* bool igSliderInt(const char* label,int* v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGSLIDERINT )
{
   const char* label = hb_parcx( 1 );
   int /* @ */ _v = hb_parni( 2 );
   int * v = &_v;
   int v_min = hb_parni( 3 );
   int v_max = hb_parni( 4 );
   const char* format = hb_parcx( 5 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 6 );
   bool ret = igSliderInt(label,v,v_min,v_max,format,flags);
   hb_itemPutNI( hb_paramError( 2 ), _v );
   hb_retl( ret );
}

/* bool igSliderInt2(const char* label,int v[2],int v_min,int v_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGSLIDERINT2 )
{
   const char* label = hb_parcx( 1 );
   int * v;
   PHB_IG_INTS _v = hb_ig_ints_par( 2 );
   int v_min = hb_parni( 3 );
   int v_max = hb_parni( 4 );
   const char* format = hb_parcx( 5 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 6 );
   static int s_v[2] = { 0,0 };
   if( _v && _v->nSize >= 2 )
      v = _v->pBuf;
   else
      v = &s_v[0];
   bool ret = igSliderInt2(label,v,v_min,v_max,format,flags);
   hb_retl( ret );
}

/* bool igSliderInt3(const char* label,int v[3],int v_min,int v_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGSLIDERINT3 )
{
   const char* label = hb_parcx( 1 );
   int * v;
   PHB_IG_INTS _v = hb_ig_ints_par( 2 );
   int v_min = hb_parni( 3 );
   int v_max = hb_parni( 4 );
   const char* format = hb_parcx( 5 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 6 );
   static int s_v[3] = { 0,0,0 };
   if( _v && _v->nSize >= 3 )
      v = _v->pBuf;
   else
      v = &s_v[0];
   bool ret = igSliderInt3(label,v,v_min,v_max,format,flags);
   hb_retl( ret );
}

/* bool igSliderInt4(const char* label,int v[4],int v_min,int v_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGSLIDERINT4 )
{
   const char* label = hb_parcx( 1 );
   int * v;
   PHB_IG_INTS _v = hb_ig_ints_par( 2 );
   int v_min = hb_parni( 3 );
   int v_max = hb_parni( 4 );
   const char* format = hb_parcx( 5 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 6 );
   static int s_v[4] = { 0,0,0,0 };
   if( _v && _v->nSize >= 4 )
      v = _v->pBuf;
   else
      v = &s_v[0];
   bool ret = igSliderInt4(label,v,v_min,v_max,format,flags);
   hb_retl( ret );
}

/* bool igSliderScalar(const char* label,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGSLIDERSCALAR )
{
   const char* label = hb_parcx( 1 );
   ImGuiDataType data_type = ( ImGuiDataType ) hb_parni( 2 );
   void* p_data = ( void* ) hb_parptr( 3 );
   const void* p_min = ( const void* ) hb_parptr( 4 );
   const void* p_max = ( const void* ) hb_parptr( 5 );
   const char* format = hb_parcx( 6 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 7 );
   bool ret = igSliderScalar(label,data_type,p_data,p_min,p_max,format,flags);
   hb_retl( ret );
}

/* bool igSliderScalarN(const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGSLIDERSCALARN )
{
   const char* label = hb_parcx( 1 );
   ImGuiDataType data_type = ( ImGuiDataType ) hb_parni( 2 );
   void* p_data = ( void* ) hb_parptr( 3 );
   int components = hb_parni( 4 );
   const void* p_min = ( const void* ) hb_parptr( 5 );
   const void* p_max = ( const void* ) hb_parptr( 6 );
   const char* format = hb_parcx( 7 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 8 );
   bool ret = igSliderScalarN(label,data_type,p_data,components,p_min,p_max,format,flags);
   hb_retl( ret );
}

/* bool igSmallButton(const char* label) */
HB_FUNC( IGSMALLBUTTON )
{
   const char* label = hb_parcx( 1 );
   bool ret = igSmallButton(label);
   hb_retl( ret );
}

/* void igSpacing() */
HB_FUNC( IGSPACING )
{
   igSpacing();
}

/* bool igSplitterBehavior(const ImRect bb,ImGuiID id,ImGuiAxis axis,float* size1,float* size2,float min_size1,float min_size2,float hover_extend,float hover_visibility_delay) */
HB_FUNC( IGSPLITTERBEHAVIOR )
{
   PHB_ITEM pbb = hb_param( 1, HB_IT_ARRAY );
   const ImRect bb = ImRect{ ImVec2{ _paf( pbb, 1 ), _paf( pbb, 2 ) }, ImVec2{ _paf( pbb, 3 ), _paf( pbb, 4 ) } };
   ImGuiID id = ( ImGuiID ) hb_parni( 2 );
   ImGuiAxis axis = ( ImGuiAxis ) hb_parni( 3 );
   float /* @ */ _size1 = ( float ) hb_parnd( 4 );
   float * size1 = &_size1;
   float /* @ */ _size2 = ( float ) hb_parnd( 5 );
   float * size2 = &_size2;
   float min_size1 = ( float ) hb_parnd( 6 );
   float min_size2 = ( float ) hb_parnd( 7 );
   float hover_extend = ( float ) hb_parnd( 8 );
   float hover_visibility_delay = ( float ) hb_parnd( 9 );
   bool ret = igSplitterBehavior(bb,id,axis,size1,size2,min_size1,min_size2,hover_extend,hover_visibility_delay);
   hb_itemPutND( hb_paramError( 4 ), ( double ) _size1 );
   hb_itemPutND( hb_paramError( 5 ), ( double ) _size2 );
   hb_retl( ret );
}

/* void igStartMouseMovingWindow(ImGuiWindow* window) */
HB_FUNC( IGSTARTMOUSEMOVINGWINDOW )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   igStartMouseMovingWindow(window);
}

/* void igStartMouseMovingWindowOrNode(ImGuiWindow* window,ImGuiDockNode* node,bool undock_floating_node) */
HB_FUNC( IGSTARTMOUSEMOVINGWINDOWORNODE )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   ImGuiDockNode* node = ( ImGuiDockNode* ) hb_parptr( 2 );
   bool undock_floating_node = hb_parl( 3 );
   igStartMouseMovingWindowOrNode(window,node,undock_floating_node);
}

/* void igStyleColorsClassic(ImGuiStyle* dst) */
HB_FUNC( IGSTYLECOLORSCLASSIC )
{
   ImGuiStyle* dst = ( ImGuiStyle* ) hb_parptr( 1 );
   igStyleColorsClassic(dst);
}

/* void igStyleColorsDark(ImGuiStyle* dst) */
HB_FUNC( IGSTYLECOLORSDARK )
{
   ImGuiStyle* dst = ( ImGuiStyle* ) hb_parptr( 1 );
   igStyleColorsDark(dst);
}

/* void igStyleColorsLight(ImGuiStyle* dst) */
HB_FUNC( IGSTYLECOLORSLIGHT )
{
   ImGuiStyle* dst = ( ImGuiStyle* ) hb_parptr( 1 );
   igStyleColorsLight(dst);
}

/* void igTabBarAddTab(ImGuiTabBar* tab_bar,ImGuiTabItemFlags tab_flags,ImGuiWindow* window) */
HB_FUNC( IGTABBARADDTAB )
{
   ImGuiTabBar* tab_bar = ( ImGuiTabBar* ) hb_parptr( 1 );
   ImGuiTabItemFlags tab_flags = ( ImGuiTabItemFlags ) hb_parni( 2 );
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 3 );
   igTabBarAddTab(tab_bar,tab_flags,window);
}

/* void igTabBarCloseTab(ImGuiTabBar* tab_bar,ImGuiTabItem* tab) */
HB_FUNC( IGTABBARCLOSETAB )
{
   ImGuiTabBar* tab_bar = ( ImGuiTabBar* ) hb_parptr( 1 );
   ImGuiTabItem* tab = ( ImGuiTabItem* ) hb_parptr( 2 );
   igTabBarCloseTab(tab_bar,tab);
}

/* ImGuiTabItem* igTabBarFindMostRecentlySelectedTabForActiveWindow(ImGuiTabBar* tab_bar) */
HB_FUNC( IGTABBARFINDMOSTRECENTLYSELECTEDTABFORACTIVEWINDOW )
{
   ImGuiTabBar* tab_bar = ( ImGuiTabBar* ) hb_parptr( 1 );
   ImGuiTabItem* ret = igTabBarFindMostRecentlySelectedTabForActiveWindow(tab_bar);
   hb_retptr( ( void * ) ret );
}

/* ImGuiTabItem* igTabBarFindTabByID(ImGuiTabBar* tab_bar,ImGuiID tab_id) */
HB_FUNC( IGTABBARFINDTABBYID )
{
   ImGuiTabBar* tab_bar = ( ImGuiTabBar* ) hb_parptr( 1 );
   ImGuiID tab_id = ( ImGuiID ) hb_parni( 2 );
   ImGuiTabItem* ret = igTabBarFindTabByID(tab_bar,tab_id);
   hb_retptr( ( void * ) ret );
}

/* bool igTabBarProcessReorder(ImGuiTabBar* tab_bar) */
HB_FUNC( IGTABBARPROCESSREORDER )
{
   ImGuiTabBar* tab_bar = ( ImGuiTabBar* ) hb_parptr( 1 );
   bool ret = igTabBarProcessReorder(tab_bar);
   hb_retl( ret );
}

/* void igTabBarQueueReorder(ImGuiTabBar* tab_bar,const ImGuiTabItem* tab,int offset) */
HB_FUNC( IGTABBARQUEUEREORDER )
{
   ImGuiTabBar* tab_bar = ( ImGuiTabBar* ) hb_parptr( 1 );
   const ImGuiTabItem* tab = ( const ImGuiTabItem* ) hb_parptr( 2 );
   int offset = hb_parni( 3 );
   igTabBarQueueReorder(tab_bar,tab,offset);
}

/* void igTabBarQueueReorderFromMousePos(ImGuiTabBar* tab_bar,const ImGuiTabItem* tab,ImVec2 mouse_pos) */
HB_FUNC( IGTABBARQUEUEREORDERFROMMOUSEPOS )
{
   ImGuiTabBar* tab_bar = ( ImGuiTabBar* ) hb_parptr( 1 );
   const ImGuiTabItem* tab = ( const ImGuiTabItem* ) hb_parptr( 2 );
   PHB_ITEM pmouse_pos = hb_param( 3, HB_IT_ARRAY );
   ImVec2 mouse_pos = ImVec2{ _paf( pmouse_pos, 1 ), _paf( pmouse_pos, 2 ) };
   igTabBarQueueReorderFromMousePos(tab_bar,tab,mouse_pos);
}

/* void igTabBarRemoveTab(ImGuiTabBar* tab_bar,ImGuiID tab_id) */
HB_FUNC( IGTABBARREMOVETAB )
{
   ImGuiTabBar* tab_bar = ( ImGuiTabBar* ) hb_parptr( 1 );
   ImGuiID tab_id = ( ImGuiID ) hb_parni( 2 );
   igTabBarRemoveTab(tab_bar,tab_id);
}

/* void igTabItemBackground(ImDrawList* draw_list,const ImRect bb,ImGuiTabItemFlags flags,ImU32 col) */
HB_FUNC( IGTABITEMBACKGROUND )
{
   ImDrawList* draw_list = ( ImDrawList* ) hb_parptr( 1 );
   PHB_ITEM pbb = hb_param( 2, HB_IT_ARRAY );
   const ImRect bb = ImRect{ ImVec2{ _paf( pbb, 1 ), _paf( pbb, 2 ) }, ImVec2{ _paf( pbb, 3 ), _paf( pbb, 4 ) } };
   ImGuiTabItemFlags flags = ( ImGuiTabItemFlags ) hb_parni( 3 );
   ImU32 col = ( HB_U32 ) hb_parnl( 4 );
   igTabItemBackground(draw_list,bb,flags,col);
}

/* bool igTabItemButton(const char* label,ImGuiTabItemFlags flags) */
HB_FUNC( IGTABITEMBUTTON )
{
   const char* label = hb_parcx( 1 );
   ImGuiTabItemFlags flags = ( ImGuiTabItemFlags ) hb_parni( 2 );
   bool ret = igTabItemButton(label,flags);
   hb_retl( ret );
}

/* void igTabItemCalcSize(ImVec2 *pOut,const char* label,bool has_close_button) */
HB_FUNC( IGTABITEMCALCSIZE )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImVec2 pOut;
   const char* label = hb_parcx( 2 );
   bool has_close_button = hb_parl( 3 );
   igTabItemCalcSize(&pOut,label,has_close_button);
   _ImVec2toA( &pOut, pOutItem );
}

/* bool igTabItemEx(ImGuiTabBar* tab_bar,const char* label,bool* p_open,ImGuiTabItemFlags flags,ImGuiWindow* docked_window) */
HB_FUNC( IGTABITEMEX )
{
   ImGuiTabBar* tab_bar = ( ImGuiTabBar* ) hb_parptr( 1 );
   const char* label = hb_parcx( 2 );
   bool /* @ */ _p_open = hb_parl( 3 );
   bool * p_open = ( HB_ISNIL( 3 ) ? NULL : &_p_open );
   ImGuiTabItemFlags flags = ( ImGuiTabItemFlags ) hb_parni( 4 );
   ImGuiWindow* docked_window = ( ImGuiWindow* ) hb_parptr( 5 );
   bool ret = igTabItemEx(tab_bar,label,p_open,flags,docked_window);
   hb_itemPutL( hb_paramError( 3 ), _p_open );
   hb_retl( ret );
}

/* void igTabItemLabelAndCloseButton(ImDrawList* draw_list,const ImRect bb,ImGuiTabItemFlags flags,ImVec2 frame_padding,const char* label,ImGuiID tab_id,ImGuiID close_button_id,bool is_contents_visible,bool* out_just_closed,bool* out_text_clipped) */
HB_FUNC( IGTABITEMLABELANDCLOSEBUTTON )
{
   ImDrawList* draw_list = ( ImDrawList* ) hb_parptr( 1 );
   PHB_ITEM pbb = hb_param( 2, HB_IT_ARRAY );
   const ImRect bb = ImRect{ ImVec2{ _paf( pbb, 1 ), _paf( pbb, 2 ) }, ImVec2{ _paf( pbb, 3 ), _paf( pbb, 4 ) } };
   ImGuiTabItemFlags flags = ( ImGuiTabItemFlags ) hb_parni( 3 );
   PHB_ITEM pframe_padding = hb_param( 4, HB_IT_ARRAY );
   ImVec2 frame_padding = ImVec2{ _paf( pframe_padding, 1 ), _paf( pframe_padding, 2 ) };
   const char* label = hb_parcx( 5 );
   ImGuiID tab_id = ( ImGuiID ) hb_parni( 6 );
   ImGuiID close_button_id = ( ImGuiID ) hb_parni( 7 );
   bool is_contents_visible = hb_parl( 8 );
   bool _out_just_closed;
   bool* out_just_closed = &_out_just_closed;
   bool _out_text_clipped;
   bool* out_text_clipped = &_out_text_clipped;
   igTabItemLabelAndCloseButton(draw_list,bb,flags,frame_padding,label,tab_id,close_button_id,is_contents_visible,out_just_closed,out_text_clipped);
   hb_itemPutL( hb_paramError( 9 ), _out_just_closed );
   hb_itemPutL( hb_paramError( 10 ), _out_text_clipped );
}

/* void igTableBeginApplyRequests(ImGuiTable* table) */
HB_FUNC( IGTABLEBEGINAPPLYREQUESTS )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableBeginApplyRequests(table);
}

/* void igTableBeginCell(ImGuiTable* table,int column_n) */
HB_FUNC( IGTABLEBEGINCELL )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   int column_n = hb_parni( 2 );
   igTableBeginCell(table,column_n);
}

/* void igTableBeginInitMemory(ImGuiTable* table,int columns_count) */
HB_FUNC( IGTABLEBEGININITMEMORY )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   int columns_count = hb_parni( 2 );
   igTableBeginInitMemory(table,columns_count);
}

/* void igTableBeginRow(ImGuiTable* table) */
HB_FUNC( IGTABLEBEGINROW )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableBeginRow(table);
}

/* void igTableDrawBorders(ImGuiTable* table) */
HB_FUNC( IGTABLEDRAWBORDERS )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableDrawBorders(table);
}

/* void igTableDrawContextMenu(ImGuiTable* table) */
HB_FUNC( IGTABLEDRAWCONTEXTMENU )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableDrawContextMenu(table);
}

/* void igTableEndCell(ImGuiTable* table) */
HB_FUNC( IGTABLEENDCELL )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableEndCell(table);
}

/* void igTableEndRow(ImGuiTable* table) */
HB_FUNC( IGTABLEENDROW )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableEndRow(table);
}

/* ImGuiTable* igTableFindByID(ImGuiID id) */
HB_FUNC( IGTABLEFINDBYID )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   ImGuiTable* ret = igTableFindByID(id);
   hb_retptr( ( void * ) ret );
}

/* void igTableFixColumnSortDirection(ImGuiTable* table,ImGuiTableColumn* column) */
HB_FUNC( IGTABLEFIXCOLUMNSORTDIRECTION )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   ImGuiTableColumn* column = ( ImGuiTableColumn* ) hb_parptr( 2 );
   igTableFixColumnSortDirection(table,column);
}

/* void igTableGcCompactSettings() */
HB_FUNC( IGTABLEGCCOMPACTSETTINGS )
{
   igTableGcCompactSettings();
}

/* void igTableGcCompactTransientBuffers_TablePtr(ImGuiTable* table) */
HB_FUNC( IGTABLEGCCOMPACTTRANSIENTBUFFERSTABLEPTR )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableGcCompactTransientBuffers_TablePtr(table);
}

/* void igTableGcCompactTransientBuffers_TableTempDataPtr(ImGuiTableTempData* table) */
HB_FUNC( IGTABLEGCCOMPACTTRANSIENTBUFFERSTABLETEMPDATAPTR )
{
   ImGuiTableTempData* table = ( ImGuiTableTempData* ) hb_parptr( 1 );
   igTableGcCompactTransientBuffers_TableTempDataPtr(table);
}

/* ImGuiTableSettings* igTableGetBoundSettings(ImGuiTable* table) */
HB_FUNC( IGTABLEGETBOUNDSETTINGS )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   ImGuiTableSettings* ret = igTableGetBoundSettings(table);
   hb_retptr( ( void * ) ret );
}

/* void igTableGetCellBgRect(ImRect *pOut,const ImGuiTable* table,int column_n) */
HB_FUNC( IGTABLEGETCELLBGRECT )
{
   PHB_ITEM pOutItem = hb_param( 1, HB_IT_ANY );
   ImRect pOut;
   const ImGuiTable* table = ( const ImGuiTable* ) hb_parptr( 2 );
   int column_n = hb_parni( 3 );
   igTableGetCellBgRect(&pOut,table,column_n);
   _ImRecttoA( &pOut, pOutItem );
}

/* int igTableGetColumnCount() */
HB_FUNC( IGTABLEGETCOLUMNCOUNT )
{
   int ret = igTableGetColumnCount();
   hb_retni( ret );
}

/* ImGuiTableColumnFlags igTableGetColumnFlags(int column_n) */
HB_FUNC( IGTABLEGETCOLUMNFLAGS )
{
   int column_n = hb_parni( 1 );
   ImGuiTableColumnFlags ret = igTableGetColumnFlags(column_n);
   hb_retni( ( int ) ret );
}

/* int igTableGetColumnIndex() */
HB_FUNC( IGTABLEGETCOLUMNINDEX )
{
   int ret = igTableGetColumnIndex();
   hb_retni( ret );
}

/* const char* igTableGetColumnName_Int(int column_n) */
HB_FUNC( IGTABLEGETCOLUMNNAMEINT )
{
   int column_n = hb_parni( 1 );
   const char* ret = igTableGetColumnName_Int(column_n);
   hb_retc( ret );
}

/* const char* igTableGetColumnName_TablePtr(const ImGuiTable* table,int column_n) */
HB_FUNC( IGTABLEGETCOLUMNNAMETABLEPTR )
{
   const ImGuiTable* table = ( const ImGuiTable* ) hb_parptr( 1 );
   int column_n = hb_parni( 2 );
   const char* ret = igTableGetColumnName_TablePtr(table,column_n);
   hb_retc( ret );
}

/* ImGuiSortDirection igTableGetColumnNextSortDirection(ImGuiTableColumn* column) */
HB_FUNC( IGTABLEGETCOLUMNNEXTSORTDIRECTION )
{
   ImGuiTableColumn* column = ( ImGuiTableColumn* ) hb_parptr( 1 );
   ImGuiSortDirection ret = igTableGetColumnNextSortDirection(column);
   hb_retni( ( int ) ret );
}

/* ImGuiID igTableGetColumnResizeID(const ImGuiTable* table,int column_n,int instance_no) */
HB_FUNC( IGTABLEGETCOLUMNRESIZEID )
{
   const ImGuiTable* table = ( const ImGuiTable* ) hb_parptr( 1 );
   int column_n = hb_parni( 2 );
   int instance_no = hb_parni( 3 );
   ImGuiID ret = igTableGetColumnResizeID(table,column_n,instance_no);
   hb_retni( ( int ) ret );
}

/* float igTableGetColumnWidthAuto(ImGuiTable* table,ImGuiTableColumn* column) */
HB_FUNC( IGTABLEGETCOLUMNWIDTHAUTO )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   ImGuiTableColumn* column = ( ImGuiTableColumn* ) hb_parptr( 2 );
   float ret = igTableGetColumnWidthAuto(table,column);
   hb_retnd( ( double ) ret );
}

/* float igTableGetHeaderRowHeight() */
HB_FUNC( IGTABLEGETHEADERROWHEIGHT )
{
   float ret = igTableGetHeaderRowHeight();
   hb_retnd( ( double ) ret );
}

/* int igTableGetHoveredColumn() */
HB_FUNC( IGTABLEGETHOVEREDCOLUMN )
{
   int ret = igTableGetHoveredColumn();
   hb_retni( ret );
}

/* float igTableGetMaxColumnWidth(const ImGuiTable* table,int column_n) */
HB_FUNC( IGTABLEGETMAXCOLUMNWIDTH )
{
   const ImGuiTable* table = ( const ImGuiTable* ) hb_parptr( 1 );
   int column_n = hb_parni( 2 );
   float ret = igTableGetMaxColumnWidth(table,column_n);
   hb_retnd( ( double ) ret );
}

/* int igTableGetRowIndex() */
HB_FUNC( IGTABLEGETROWINDEX )
{
   int ret = igTableGetRowIndex();
   hb_retni( ret );
}

/* ImGuiTableSortSpecs* igTableGetSortSpecs() */
HB_FUNC( IGTABLEGETSORTSPECS )
{
   ImGuiTableSortSpecs* ret = igTableGetSortSpecs();
   hb_retptr( ( void * ) ret );
}

/* void igTableHeader(const char* label) */
HB_FUNC( IGTABLEHEADER )
{
   const char* label = hb_parcx( 1 );
   igTableHeader(label);
}

/* void igTableHeadersRow() */
HB_FUNC( IGTABLEHEADERSROW )
{
   igTableHeadersRow();
}

/* void igTableLoadSettings(ImGuiTable* table) */
HB_FUNC( IGTABLELOADSETTINGS )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableLoadSettings(table);
}

/* void igTableMergeDrawChannels(ImGuiTable* table) */
HB_FUNC( IGTABLEMERGEDRAWCHANNELS )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableMergeDrawChannels(table);
}

/* bool igTableNextColumn() */
HB_FUNC( IGTABLENEXTCOLUMN )
{
   bool ret = igTableNextColumn();
   hb_retl( ret );
}

/* void igTableNextRow(ImGuiTableRowFlags row_flags,float min_row_height) */
HB_FUNC( IGTABLENEXTROW )
{
   ImGuiTableRowFlags row_flags = ( ImGuiTableRowFlags ) hb_parni( 1 );
   float min_row_height = ( float ) hb_parnd( 2 );
   igTableNextRow(row_flags,min_row_height);
}

/* void igTableOpenContextMenu(int column_n) */
HB_FUNC( IGTABLEOPENCONTEXTMENU )
{
   int column_n = hb_parni( 1 );
   igTableOpenContextMenu(column_n);
}

/* void igTablePopBackgroundChannel() */
HB_FUNC( IGTABLEPOPBACKGROUNDCHANNEL )
{
   igTablePopBackgroundChannel();
}

/* void igTablePushBackgroundChannel() */
HB_FUNC( IGTABLEPUSHBACKGROUNDCHANNEL )
{
   igTablePushBackgroundChannel();
}

/* void igTableRemove(ImGuiTable* table) */
HB_FUNC( IGTABLEREMOVE )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableRemove(table);
}

/* void igTableResetSettings(ImGuiTable* table) */
HB_FUNC( IGTABLERESETSETTINGS )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableResetSettings(table);
}

/* void igTableSaveSettings(ImGuiTable* table) */
HB_FUNC( IGTABLESAVESETTINGS )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableSaveSettings(table);
}

/* void igTableSetBgColor(ImGuiTableBgTarget target,ImU32 color,int column_n) */
HB_FUNC( IGTABLESETBGCOLOR )
{
   ImGuiTableBgTarget target = ( ImGuiTableBgTarget ) hb_parni( 1 );
   ImU32 color = ( HB_U32 ) hb_parnl( 2 );
   int column_n = hb_parni( 3 );
   igTableSetBgColor(target,color,column_n);
}

/* void igTableSetColumnEnabled(int column_n,bool v) */
HB_FUNC( IGTABLESETCOLUMNENABLED )
{
   int column_n = hb_parni( 1 );
   bool v = hb_parl( 2 );
   igTableSetColumnEnabled(column_n,v);
}

/* bool igTableSetColumnIndex(int column_n) */
HB_FUNC( IGTABLESETCOLUMNINDEX )
{
   int column_n = hb_parni( 1 );
   bool ret = igTableSetColumnIndex(column_n);
   hb_retl( ret );
}

/* void igTableSetColumnSortDirection(int column_n,ImGuiSortDirection sort_direction,bool append_to_sort_specs) */
HB_FUNC( IGTABLESETCOLUMNSORTDIRECTION )
{
   int column_n = hb_parni( 1 );
   ImGuiSortDirection sort_direction = ( ImGuiSortDirection ) hb_parni( 2 );
   bool append_to_sort_specs = hb_parl( 3 );
   igTableSetColumnSortDirection(column_n,sort_direction,append_to_sort_specs);
}

/* void igTableSetColumnWidth(int column_n,float width) */
HB_FUNC( IGTABLESETCOLUMNWIDTH )
{
   int column_n = hb_parni( 1 );
   float width = ( float ) hb_parnd( 2 );
   igTableSetColumnWidth(column_n,width);
}

/* void igTableSetColumnWidthAutoAll(ImGuiTable* table) */
HB_FUNC( IGTABLESETCOLUMNWIDTHAUTOALL )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableSetColumnWidthAutoAll(table);
}

/* void igTableSetColumnWidthAutoSingle(ImGuiTable* table,int column_n) */
HB_FUNC( IGTABLESETCOLUMNWIDTHAUTOSINGLE )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   int column_n = hb_parni( 2 );
   igTableSetColumnWidthAutoSingle(table,column_n);
}

/* ImGuiTableSettings* igTableSettingsCreate(ImGuiID id,int columns_count) */
HB_FUNC( IGTABLESETTINGSCREATE )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   int columns_count = hb_parni( 2 );
   ImGuiTableSettings* ret = igTableSettingsCreate(id,columns_count);
   hb_retptr( ( void * ) ret );
}

/* ImGuiTableSettings* igTableSettingsFindByID(ImGuiID id) */
HB_FUNC( IGTABLESETTINGSFINDBYID )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   ImGuiTableSettings* ret = igTableSettingsFindByID(id);
   hb_retptr( ( void * ) ret );
}

/* void igTableSettingsInstallHandler(ImGuiContext* context) */
HB_FUNC( IGTABLESETTINGSINSTALLHANDLER )
{
   ImGuiContext* context = ( ImGuiContext* ) hb_parptr( 1 );
   igTableSettingsInstallHandler(context);
}

/* void igTableSetupColumn(const char* label,ImGuiTableColumnFlags flags,float init_width_or_weight,ImGuiID user_id) */
HB_FUNC( IGTABLESETUPCOLUMN )
{
   const char* label = hb_parcx( 1 );
   ImGuiTableColumnFlags flags = ( ImGuiTableColumnFlags ) hb_parni( 2 );
   float init_width_or_weight = ( float ) hb_parnd( 3 );
   ImGuiID user_id = ( ImGuiID ) hb_parni( 4 );
   igTableSetupColumn(label,flags,init_width_or_weight,user_id);
}

/* void igTableSetupDrawChannels(ImGuiTable* table) */
HB_FUNC( IGTABLESETUPDRAWCHANNELS )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableSetupDrawChannels(table);
}

/* void igTableSetupScrollFreeze(int cols,int rows) */
HB_FUNC( IGTABLESETUPSCROLLFREEZE )
{
   int cols = hb_parni( 1 );
   int rows = hb_parni( 2 );
   igTableSetupScrollFreeze(cols,rows);
}

/* void igTableSortSpecsBuild(ImGuiTable* table) */
HB_FUNC( IGTABLESORTSPECSBUILD )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableSortSpecsBuild(table);
}

/* void igTableSortSpecsSanitize(ImGuiTable* table) */
HB_FUNC( IGTABLESORTSPECSSANITIZE )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableSortSpecsSanitize(table);
}

/* void igTableUpdateBorders(ImGuiTable* table) */
HB_FUNC( IGTABLEUPDATEBORDERS )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableUpdateBorders(table);
}

/* void igTableUpdateColumnsWeightFromWidth(ImGuiTable* table) */
HB_FUNC( IGTABLEUPDATECOLUMNSWEIGHTFROMWIDTH )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableUpdateColumnsWeightFromWidth(table);
}

/* void igTableUpdateLayout(ImGuiTable* table) */
HB_FUNC( IGTABLEUPDATELAYOUT )
{
   ImGuiTable* table = ( ImGuiTable* ) hb_parptr( 1 );
   igTableUpdateLayout(table);
}

/* bool igTempInputIsActive(ImGuiID id) */
HB_FUNC( IGTEMPINPUTISACTIVE )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   bool ret = igTempInputIsActive(id);
   hb_retl( ret );
}

/* bool igTempInputScalar(const ImRect bb,ImGuiID id,const char* label,ImGuiDataType data_type,void* p_data,const char* format,const void* p_clamp_min,const void* p_clamp_max) */
HB_FUNC( IGTEMPINPUTSCALAR )
{
   PHB_ITEM pbb = hb_param( 1, HB_IT_ARRAY );
   const ImRect bb = ImRect{ ImVec2{ _paf( pbb, 1 ), _paf( pbb, 2 ) }, ImVec2{ _paf( pbb, 3 ), _paf( pbb, 4 ) } };
   ImGuiID id = ( ImGuiID ) hb_parni( 2 );
   const char* label = hb_parcx( 3 );
   ImGuiDataType data_type = ( ImGuiDataType ) hb_parni( 4 );
   void* p_data = ( void* ) hb_parptr( 5 );
   const char* format = hb_parcx( 6 );
   const void* p_clamp_min = ( const void* ) hb_parptr( 7 );
   const void* p_clamp_max = ( const void* ) hb_parptr( 8 );
   bool ret = igTempInputScalar(bb,id,label,data_type,p_data,format,p_clamp_min,p_clamp_max);
   hb_retl( ret );
}

/* bool igTempInputText(const ImRect bb,ImGuiID id,const char* label,char* buf,int buf_size,ImGuiInputTextFlags flags) */
HB_FUNC( IGTEMPINPUTTEXT )
{
   PHB_ITEM pbb = hb_param( 1, HB_IT_ARRAY );
   const ImRect bb = ImRect{ ImVec2{ _paf( pbb, 1 ), _paf( pbb, 2 ) }, ImVec2{ _paf( pbb, 3 ), _paf( pbb, 4 ) } };
   ImGuiID id = ( ImGuiID ) hb_parni( 2 );
   const char* label = hb_parcx( 3 );
   char* buf = hb_itemGetC( hb_paramError( 4 ) );
   int buf_size = hb_parni( 5 );
   ImGuiInputTextFlags flags = ( ImGuiInputTextFlags ) hb_parni( 6 );
   bool ret = igTempInputText(bb,id,label,buf,buf_size,flags);
   hb_itemPutC( hb_paramError( 4 ), buf );
   hb_xfree( buf );
   hb_retl( ret );
}

/* void igText(const char* fmt,...) */
/* redirected to igTextUnformatted, randomly passing text with %'s is unsafe, can't practically use C varargs as well
HB_FUNC( IGTEXT )
{
   const char* fmt = hb_parcx( 1 );
   igText(fmt,NULL);
}
*/

/* void igTextColored(const ImVec4 col,const char* fmt,...) */
HB_FUNC( IGTEXTCOLORED )
{
   PHB_ITEM pcol = hb_param( 1, HB_IT_ARRAY );
   const ImVec4 col = ImVec4{ _paf( pcol, 1 ), _paf( pcol, 2 ), _paf( pcol, 3 ), _paf( pcol, 4 ) };
   const char* fmt = hb_parcx( 2 );
   igTextColored(col,fmt,NULL);
}

/* void igTextColoredV(const ImVec4 col,const char* fmt,va_list args) */
HB_FUNC( IGTEXTCOLOREDV )
{
   PHB_ITEM pcol = hb_param( 1, HB_IT_ARRAY );
   const ImVec4 col = ImVec4{ _paf( pcol, 1 ), _paf( pcol, 2 ), _paf( pcol, 3 ), _paf( pcol, 4 ) };
   const char* fmt = hb_parcx( 2 );
   /* unsupported */
}

/* void igTextDisabled(const char* fmt,...) */
HB_FUNC( IGTEXTDISABLED )
{
   const char* fmt = hb_parcx( 1 );
   igTextDisabled(fmt,NULL);
}

/* void igTextDisabledV(const char* fmt,va_list args) */
HB_FUNC( IGTEXTDISABLEDV )
{
   const char* fmt = hb_parcx( 1 );
   /* unsupported */
}

/* void igTextEx(const char* text,const char* text_end,ImGuiTextFlags flags) */
HB_FUNC( IGTEXTEX )
{
   const char* text = hb_parcx( 1 );
   const char* text_end = NULL;
   ImGuiTextFlags flags = ( ImGuiTextFlags ) hb_parni( 2 );
   igTextEx(text,text_end,flags);
}

/* void igTextUnformatted(const char* text,const char* text_end) */
HB_FUNC( IGTEXTUNFORMATTED )
{
   const char* text = hb_parcx( 1 );
   const char* text_end = NULL;
   igTextUnformatted(text,text_end);
}

/* void igTextV(const char* fmt,va_list args) */
HB_FUNC( IGTEXTV )
{
   const char* fmt = hb_parcx( 1 );
   /* unsupported */
}

/* void igTextWrapped(const char* fmt,...) */
HB_FUNC( IGTEXTWRAPPED )
{
   const char* fmt = hb_parcx( 1 );
   igTextWrapped(fmt,NULL);
}

/* void igTextWrappedV(const char* fmt,va_list args) */
HB_FUNC( IGTEXTWRAPPEDV )
{
   const char* fmt = hb_parcx( 1 );
   /* unsupported */
}

/* void igTranslateWindowsInViewport(ImGuiViewportP* viewport,const ImVec2 old_pos,const ImVec2 new_pos) */
HB_FUNC( IGTRANSLATEWINDOWSINVIEWPORT )
{
   ImGuiViewportP* viewport = ( ImGuiViewportP* ) hb_parptr( 1 );
   PHB_ITEM pold_pos = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 old_pos = ImVec2{ _paf( pold_pos, 1 ), _paf( pold_pos, 2 ) };
   PHB_ITEM pnew_pos = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 new_pos = ImVec2{ _paf( pnew_pos, 1 ), _paf( pnew_pos, 2 ) };
   igTranslateWindowsInViewport(viewport,old_pos,new_pos);
}

/* bool igTreeNode_Str(const char* label) */
HB_FUNC( IGTREENODESTR )
{
   const char* label = hb_parcx( 1 );
   bool ret = igTreeNode_Str(label);
   hb_retl( ret );
}

/* bool igTreeNode_StrStr(const char* str_id,const char* fmt,...) */
HB_FUNC( IGTREENODESTRSTR )
{
   const char* str_id = hb_parcx( 1 );
   const char* fmt = hb_parcx( 2 );
   bool ret = igTreeNode_StrStr(str_id,fmt,NULL);
   hb_retl( ret );
}

/* bool igTreeNode_Ptr(const void* ptr_id,const char* fmt,...) */
HB_FUNC( IGTREENODEPTR )
{
   const void* ptr_id = ( const void* ) hb_parptr( 1 );
   const char* fmt = hb_parcx( 2 );
   bool ret = igTreeNode_Ptr(ptr_id,fmt,NULL);
   hb_retl( ret );
}

/* bool igTreeNodeBehavior(ImGuiID id,ImGuiTreeNodeFlags flags,const char* label,const char* label_end) */
HB_FUNC( IGTREENODEBEHAVIOR )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   ImGuiTreeNodeFlags flags = ( ImGuiTreeNodeFlags ) hb_parni( 2 );
   const char* label = hb_parcx( 3 );
   const char* label_end = hb_parcx( 4 );
   bool ret = igTreeNodeBehavior(id,flags,label,label_end);
   hb_retl( ret );
}

/* bool igTreeNodeBehaviorIsOpen(ImGuiID id,ImGuiTreeNodeFlags flags) */
HB_FUNC( IGTREENODEBEHAVIORISOPEN )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   ImGuiTreeNodeFlags flags = ( ImGuiTreeNodeFlags ) hb_parni( 2 );
   bool ret = igTreeNodeBehaviorIsOpen(id,flags);
   hb_retl( ret );
}

/* bool igTreeNodeEx_Str(const char* label,ImGuiTreeNodeFlags flags) */
HB_FUNC( IGTREENODEEXSTR )
{
   const char* label = hb_parcx( 1 );
   ImGuiTreeNodeFlags flags = ( ImGuiTreeNodeFlags ) hb_parni( 2 );
   bool ret = igTreeNodeEx_Str(label,flags);
   hb_retl( ret );
}

/* bool igTreeNodeEx_StrStr(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,...) */
HB_FUNC( IGTREENODEEXSTRSTR )
{
   const char* str_id = hb_parcx( 1 );
   ImGuiTreeNodeFlags flags = ( ImGuiTreeNodeFlags ) hb_parni( 2 );
   const char* fmt = hb_parcx( 3 );
   bool ret = igTreeNodeEx_StrStr(str_id,flags,fmt,NULL);
   hb_retl( ret );
}

/* bool igTreeNodeEx_Ptr(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,...) */
HB_FUNC( IGTREENODEEXPTR )
{
   const void* ptr_id = ( const void* ) hb_parptr( 1 );
   ImGuiTreeNodeFlags flags = ( ImGuiTreeNodeFlags ) hb_parni( 2 );
   const char* fmt = hb_parcx( 3 );
   bool ret = igTreeNodeEx_Ptr(ptr_id,flags,fmt,NULL);
   hb_retl( ret );
}

/* bool igTreeNodeExV_Str(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args) */
HB_FUNC( IGTREENODEEXVSTR )
{
   const char* str_id = hb_parcx( 1 );
   ImGuiTreeNodeFlags flags = ( ImGuiTreeNodeFlags ) hb_parni( 2 );
   const char* fmt = hb_parcx( 3 );
   /* unsupported */
}

/* bool igTreeNodeV_Str(const char* str_id,const char* fmt,va_list args) */
HB_FUNC( IGTREENODEVSTR )
{
   const char* str_id = hb_parcx( 1 );
   const char* fmt = hb_parcx( 2 );
   /* unsupported */
}

/* void igTreePop() */
HB_FUNC( IGTREEPOP )
{
   igTreePop();
}

/* void igTreePush_Str(const char* str_id) */
HB_FUNC( IGTREEPUSHSTR )
{
   const char* str_id = hb_parcx( 1 );
   igTreePush_Str(str_id);
}

/* void igTreePush_Ptr(const void* ptr_id) */
HB_FUNC( IGTREEPUSHPTR )
{
   const void* ptr_id = ( const void* ) hb_parptr( 1 );
   igTreePush_Ptr(ptr_id);
}

/* void igTreePushOverrideID(ImGuiID id) */
HB_FUNC( IGTREEPUSHOVERRIDEID )
{
   ImGuiID id = ( ImGuiID ) hb_parni( 1 );
   igTreePushOverrideID(id);
}

/* void igUnindent(float indent_w) */
HB_FUNC( IGUNINDENT )
{
   float indent_w = ( float ) hb_parnd( 1 );
   igUnindent(indent_w);
}

/* void igUpdateHoveredWindowAndCaptureFlags() */
HB_FUNC( IGUPDATEHOVEREDWINDOWANDCAPTUREFLAGS )
{
   igUpdateHoveredWindowAndCaptureFlags();
}

/* void igUpdateMouseMovingWindowEndFrame() */
HB_FUNC( IGUPDATEMOUSEMOVINGWINDOWENDFRAME )
{
   igUpdateMouseMovingWindowEndFrame();
}

/* void igUpdateMouseMovingWindowNewFrame() */
HB_FUNC( IGUPDATEMOUSEMOVINGWINDOWNEWFRAME )
{
   igUpdateMouseMovingWindowNewFrame();
}

/* void igUpdatePlatformWindows() */
HB_FUNC( IGUPDATEPLATFORMWINDOWS )
{
   igUpdatePlatformWindows();
}

/* void igUpdateWindowParentAndRootLinks(ImGuiWindow* window,ImGuiWindowFlags flags,ImGuiWindow* parent_window) */
HB_FUNC( IGUPDATEWINDOWPARENTANDROOTLINKS )
{
   ImGuiWindow* window = ( ImGuiWindow* ) hb_parptr( 1 );
   ImGuiWindowFlags flags = ( ImGuiWindowFlags ) hb_parni( 2 );
   ImGuiWindow* parent_window = ( ImGuiWindow* ) hb_parptr( 3 );
   igUpdateWindowParentAndRootLinks(window,flags,parent_window);
}

/* bool igVSliderFloat(const char* label,const ImVec2 size,float* v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGVSLIDERFLOAT )
{
   const char* label = hb_parcx( 1 );
   PHB_ITEM psize = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   float /* @ */ _v = ( float ) hb_parnd( 3 );
   float * v = &_v;
   float v_min = ( float ) hb_parnd( 4 );
   float v_max = ( float ) hb_parnd( 5 );
   const char* format = hb_parcx( 6 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 7 );
   bool ret = igVSliderFloat(label,size,v,v_min,v_max,format,flags);
   hb_itemPutND( hb_paramError( 3 ), ( double ) _v );
   hb_retl( ret );
}

/* bool igVSliderInt(const char* label,const ImVec2 size,int* v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGVSLIDERINT )
{
   const char* label = hb_parcx( 1 );
   PHB_ITEM psize = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   int /* @ */ _v = hb_parni( 3 );
   int * v = &_v;
   int v_min = hb_parni( 4 );
   int v_max = hb_parni( 5 );
   const char* format = hb_parcx( 6 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 7 );
   bool ret = igVSliderInt(label,size,v,v_min,v_max,format,flags);
   hb_itemPutNI( hb_paramError( 3 ), _v );
   hb_retl( ret );
}

/* bool igVSliderScalar(const char* label,const ImVec2 size,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags) */
HB_FUNC( IGVSLIDERSCALAR )
{
   const char* label = hb_parcx( 1 );
   PHB_ITEM psize = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   ImGuiDataType data_type = ( ImGuiDataType ) hb_parni( 3 );
   void* p_data = ( void* ) hb_parptr( 4 );
   const void* p_min = ( const void* ) hb_parptr( 5 );
   const void* p_max = ( const void* ) hb_parptr( 6 );
   const char* format = hb_parcx( 7 );
   ImGuiSliderFlags flags = ( ImGuiSliderFlags ) hb_parni( 8 );
   bool ret = igVSliderScalar(label,size,data_type,p_data,p_min,p_max,format,flags);
   hb_retl( ret );
}

/* void igValue_Bool(const char* prefix,bool b) */
HB_FUNC( IGVALUEBOOL )
{
   const char* prefix = hb_parcx( 1 );
   bool b = hb_parl( 2 );
   igValue_Bool(prefix,b);
}

/* void igValue_Int(const char* prefix,int v) */
HB_FUNC( IGVALUEINT )
{
   const char* prefix = hb_parcx( 1 );
   int v = hb_parni( 2 );
   igValue_Int(prefix,v);
}

/* void igValue_Uint(const char* prefix,unsigned int v) */
HB_FUNC( IGVALUEUINT )
{
   const char* prefix = hb_parcx( 1 );
   unsigned int v;
   igValue_Uint(prefix,v);
}

/* void igValue_Float(const char* prefix,float v,const char* float_format) */
HB_FUNC( IGVALUEFLOAT )
{
   const char* prefix = hb_parcx( 1 );
   float v = ( float ) hb_parnd( 2 );
   const char* float_format = hb_parcx( 3 );
   igValue_Float(prefix,v,float_format);
}

HB_FUNC_TRANSLATE( IGOPENPOPUP, IGOPENPOPUPSTR )

HB_FUNC_TRANSLATE( IGTEXT, IGTEXTUNFORMATTED )

static HB_SIZE s_nArrayGetPos = 0; /* definitely not a thread safe solution, though i'm not aware multi-instance drawing backends yet */

static void s_ImGuiListClipper_getDisplayStart( ImGuiListClipper * p )
{
   int ret = p->DisplayStart;
   hb_retni( ret );
}

static void s_ImGuiListClipper_getDisplayEnd( ImGuiListClipper * p )
{
   int ret = p->DisplayEnd;
   hb_retni( ret );
}

static void s_ImGuiListClipper_getItemsCount( ImGuiListClipper * p )
{
   int ret = p->ItemsCount;
   hb_retni( ret );
}

static void s_ImGuiListClipper_getStepNo( ImGuiListClipper * p )
{
   int ret = p->StepNo;
   hb_retni( ret );
}

static void s_ImGuiListClipper_getItemsFrozen( ImGuiListClipper * p )
{
   int ret = p->ItemsFrozen;
   hb_retni( ret );
}

static void s_ImGuiListClipper_getItemsHeight( ImGuiListClipper * p )
{
   float ret = p->ItemsHeight;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiListClipper_getStartPosY( ImGuiListClipper * p )
{
   float ret = p->StartPosY;
   hb_retnd( ( double ) ret );
}

static void(*s_ImGuiListClipper_fields[])( ImGuiListClipper * ) = { s_ImGuiListClipper_getDisplayStart, s_ImGuiListClipper_getDisplayEnd, s_ImGuiListClipper_getItemsCount, s_ImGuiListClipper_getStepNo, s_ImGuiListClipper_getItemsFrozen, s_ImGuiListClipper_getItemsHeight, s_ImGuiListClipper_getStartPosY };

HB_FUNC( IMGUILISTCLIPPER_GET )
{
   ImGuiListClipper * p = ( ImGuiListClipper * ) hb_parptr( 1 );
   int n = hb_parni( 2 ) - 1;
   if( p && n >= 0 && n < 7 )
      s_ImGuiListClipper_fields[ n ]( p );
}

static void s_ImGuiIO_getConfigFlags( ImGuiIO * p )
{
   ImGuiConfigFlags ret = p->ConfigFlags;
   hb_retni( ( int ) ret );
}

static void s_ImGuiIO_getBackendFlags( ImGuiIO * p )
{
   ImGuiBackendFlags ret = p->BackendFlags;
   hb_retni( ( int ) ret );
}

static void s_ImGuiIO_getDisplaySize( ImGuiIO * p )
{
   ImVec2 ret = p->DisplaySize;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiIO_getDeltaTime( ImGuiIO * p )
{
   float ret = p->DeltaTime;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getIniSavingRate( ImGuiIO * p )
{
   float ret = p->IniSavingRate;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getIniFilename( ImGuiIO * p )
{
   const char* ret = p->IniFilename;
   hb_retc( ret );
}

static void s_ImGuiIO_getLogFilename( ImGuiIO * p )
{
   const char* ret = p->LogFilename;
   hb_retc( ret );
}

static void s_ImGuiIO_getMouseDoubleClickTime( ImGuiIO * p )
{
   float ret = p->MouseDoubleClickTime;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getMouseDoubleClickMaxDist( ImGuiIO * p )
{
   float ret = p->MouseDoubleClickMaxDist;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getMouseDragThreshold( ImGuiIO * p )
{
   float ret = p->MouseDragThreshold;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getKeyMap( ImGuiIO * p )
{
   int ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 22 )
      return;
   ret = p->KeyMap[ s_nArrayGetPos - 1 ];
   hb_retni( ret );
}

static void s_ImGuiIO_getKeyRepeatDelay( ImGuiIO * p )
{
   float ret = p->KeyRepeatDelay;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getKeyRepeatRate( ImGuiIO * p )
{
   float ret = p->KeyRepeatRate;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getUserData( ImGuiIO * p )
{
   void* ret = p->UserData;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiIO_getFonts( ImGuiIO * p )
{
   ImFontAtlas* ret = p->Fonts;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiIO_getFontGlobalScale( ImGuiIO * p )
{
   float ret = p->FontGlobalScale;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getFontAllowUserScaling( ImGuiIO * p )
{
   bool ret = p->FontAllowUserScaling;
   hb_retl( ret );
}

static void s_ImGuiIO_getFontDefault( ImGuiIO * p )
{
   ImFont* ret = p->FontDefault;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiIO_getDisplayFramebufferScale( ImGuiIO * p )
{
   ImVec2 ret = p->DisplayFramebufferScale;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiIO_getConfigDockingNoSplit( ImGuiIO * p )
{
   bool ret = p->ConfigDockingNoSplit;
   hb_retl( ret );
}

static void s_ImGuiIO_getConfigDockingAlwaysTabBar( ImGuiIO * p )
{
   bool ret = p->ConfigDockingAlwaysTabBar;
   hb_retl( ret );
}

static void s_ImGuiIO_getConfigDockingTransparentPayload( ImGuiIO * p )
{
   bool ret = p->ConfigDockingTransparentPayload;
   hb_retl( ret );
}

static void s_ImGuiIO_getConfigViewportsNoAutoMerge( ImGuiIO * p )
{
   bool ret = p->ConfigViewportsNoAutoMerge;
   hb_retl( ret );
}

static void s_ImGuiIO_getConfigViewportsNoTaskBarIcon( ImGuiIO * p )
{
   bool ret = p->ConfigViewportsNoTaskBarIcon;
   hb_retl( ret );
}

static void s_ImGuiIO_getConfigViewportsNoDecoration( ImGuiIO * p )
{
   bool ret = p->ConfigViewportsNoDecoration;
   hb_retl( ret );
}

static void s_ImGuiIO_getConfigViewportsNoDefaultParent( ImGuiIO * p )
{
   bool ret = p->ConfigViewportsNoDefaultParent;
   hb_retl( ret );
}

static void s_ImGuiIO_getMouseDrawCursor( ImGuiIO * p )
{
   bool ret = p->MouseDrawCursor;
   hb_retl( ret );
}

static void s_ImGuiIO_getConfigMacOSXBehaviors( ImGuiIO * p )
{
   bool ret = p->ConfigMacOSXBehaviors;
   hb_retl( ret );
}

static void s_ImGuiIO_getConfigInputTextCursorBlink( ImGuiIO * p )
{
   bool ret = p->ConfigInputTextCursorBlink;
   hb_retl( ret );
}

static void s_ImGuiIO_getConfigDragClickToInputText( ImGuiIO * p )
{
   bool ret = p->ConfigDragClickToInputText;
   hb_retl( ret );
}

static void s_ImGuiIO_getConfigWindowsResizeFromEdges( ImGuiIO * p )
{
   bool ret = p->ConfigWindowsResizeFromEdges;
   hb_retl( ret );
}

static void s_ImGuiIO_getConfigWindowsMoveFromTitleBarOnly( ImGuiIO * p )
{
   bool ret = p->ConfigWindowsMoveFromTitleBarOnly;
   hb_retl( ret );
}

static void s_ImGuiIO_getConfigMemoryCompactTimer( ImGuiIO * p )
{
   float ret = p->ConfigMemoryCompactTimer;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getBackendPlatformName( ImGuiIO * p )
{
   const char* ret = p->BackendPlatformName;
   hb_retc( ret );
}

static void s_ImGuiIO_getBackendRendererName( ImGuiIO * p )
{
   const char* ret = p->BackendRendererName;
   hb_retc( ret );
}

static void s_ImGuiIO_getBackendPlatformUserData( ImGuiIO * p )
{
   void* ret = p->BackendPlatformUserData;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiIO_getBackendRendererUserData( ImGuiIO * p )
{
   void* ret = p->BackendRendererUserData;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiIO_getBackendLanguageUserData( ImGuiIO * p )
{
   void* ret = p->BackendLanguageUserData;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiIO_getGetClipboardTextFn( ImGuiIO * p )
{
   void * ret = ( void * ) p->GetClipboardTextFn;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiIO_getSetClipboardTextFn( ImGuiIO * p )
{
   void * ret = ( void * ) p->SetClipboardTextFn;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiIO_getClipboardUserData( ImGuiIO * p )
{
   void* ret = p->ClipboardUserData;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiIO_getMousePos( ImGuiIO * p )
{
   ImVec2 ret = p->MousePos;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiIO_getMouseDown( ImGuiIO * p )
{
   bool ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 5 )
      return;
   ret = p->MouseDown[ s_nArrayGetPos - 1 ];
   hb_retl( ret );
}

static void s_ImGuiIO_getMouseWheel( ImGuiIO * p )
{
   float ret = p->MouseWheel;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getMouseWheelH( ImGuiIO * p )
{
   float ret = p->MouseWheelH;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getMouseHoveredViewport( ImGuiIO * p )
{
   ImGuiID ret = p->MouseHoveredViewport;
   hb_retni( ( int ) ret );
}

static void s_ImGuiIO_getKeyCtrl( ImGuiIO * p )
{
   bool ret = p->KeyCtrl;
   hb_retl( ret );
}

static void s_ImGuiIO_getKeyShift( ImGuiIO * p )
{
   bool ret = p->KeyShift;
   hb_retl( ret );
}

static void s_ImGuiIO_getKeyAlt( ImGuiIO * p )
{
   bool ret = p->KeyAlt;
   hb_retl( ret );
}

static void s_ImGuiIO_getKeySuper( ImGuiIO * p )
{
   bool ret = p->KeySuper;
   hb_retl( ret );
}

static void s_ImGuiIO_getKeysDown( ImGuiIO * p )
{
   bool ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 512 )
      return;
   ret = p->KeysDown[ s_nArrayGetPos - 1 ];
   hb_retl( ret );
}

static void s_ImGuiIO_getNavInputs( ImGuiIO * p )
{
   float ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 21 )
      return;
   ret = p->NavInputs[ s_nArrayGetPos - 1 ];
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getWantCaptureMouse( ImGuiIO * p )
{
   bool ret = p->WantCaptureMouse;
   hb_retl( ret );
}

static void s_ImGuiIO_getWantCaptureKeyboard( ImGuiIO * p )
{
   bool ret = p->WantCaptureKeyboard;
   hb_retl( ret );
}

static void s_ImGuiIO_getWantTextInput( ImGuiIO * p )
{
   bool ret = p->WantTextInput;
   hb_retl( ret );
}

static void s_ImGuiIO_getWantSetMousePos( ImGuiIO * p )
{
   bool ret = p->WantSetMousePos;
   hb_retl( ret );
}

static void s_ImGuiIO_getWantSaveIniSettings( ImGuiIO * p )
{
   bool ret = p->WantSaveIniSettings;
   hb_retl( ret );
}

static void s_ImGuiIO_getNavActive( ImGuiIO * p )
{
   bool ret = p->NavActive;
   hb_retl( ret );
}

static void s_ImGuiIO_getNavVisible( ImGuiIO * p )
{
   bool ret = p->NavVisible;
   hb_retl( ret );
}

static void s_ImGuiIO_getFramerate( ImGuiIO * p )
{
   float ret = p->Framerate;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getMetricsRenderVertices( ImGuiIO * p )
{
   int ret = p->MetricsRenderVertices;
   hb_retni( ret );
}

static void s_ImGuiIO_getMetricsRenderIndices( ImGuiIO * p )
{
   int ret = p->MetricsRenderIndices;
   hb_retni( ret );
}

static void s_ImGuiIO_getMetricsRenderWindows( ImGuiIO * p )
{
   int ret = p->MetricsRenderWindows;
   hb_retni( ret );
}

static void s_ImGuiIO_getMetricsActiveWindows( ImGuiIO * p )
{
   int ret = p->MetricsActiveWindows;
   hb_retni( ret );
}

static void s_ImGuiIO_getMetricsActiveAllocations( ImGuiIO * p )
{
   int ret = p->MetricsActiveAllocations;
   hb_retni( ret );
}

static void s_ImGuiIO_getMouseDelta( ImGuiIO * p )
{
   ImVec2 ret = p->MouseDelta;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiIO_getWantCaptureMouseUnlessPopupClose( ImGuiIO * p )
{
   bool ret = p->WantCaptureMouseUnlessPopupClose;
   hb_retl( ret );
}

static void s_ImGuiIO_getKeyMods( ImGuiIO * p )
{
   ImGuiKeyModFlags ret = p->KeyMods;
   hb_retni( ( int ) ret );
}

static void s_ImGuiIO_getKeyModsPrev( ImGuiIO * p )
{
   ImGuiKeyModFlags ret = p->KeyModsPrev;
   hb_retni( ( int ) ret );
}

static void s_ImGuiIO_getMousePosPrev( ImGuiIO * p )
{
   ImVec2 ret = p->MousePosPrev;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiIO_getMouseClickedPos( ImGuiIO * p )
{
   ImVec2 ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 5 )
      return;
   ret = p->MouseClickedPos[ s_nArrayGetPos - 1 ];
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiIO_getMouseClickedTime( ImGuiIO * p )
{
   double ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 5 )
      return;
   ret = p->MouseClickedTime[ s_nArrayGetPos - 1 ];
   hb_retnd( ret );
}

static void s_ImGuiIO_getMouseClicked( ImGuiIO * p )
{
   bool ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 5 )
      return;
   ret = p->MouseClicked[ s_nArrayGetPos - 1 ];
   hb_retl( ret );
}

static void s_ImGuiIO_getMouseDoubleClicked( ImGuiIO * p )
{
   bool ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 5 )
      return;
   ret = p->MouseDoubleClicked[ s_nArrayGetPos - 1 ];
   hb_retl( ret );
}

static void s_ImGuiIO_getMouseReleased( ImGuiIO * p )
{
   bool ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 5 )
      return;
   ret = p->MouseReleased[ s_nArrayGetPos - 1 ];
   hb_retl( ret );
}

static void s_ImGuiIO_getMouseDownOwned( ImGuiIO * p )
{
   bool ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 5 )
      return;
   ret = p->MouseDownOwned[ s_nArrayGetPos - 1 ];
   hb_retl( ret );
}

static void s_ImGuiIO_getMouseDownOwnedUnlessPopupClose( ImGuiIO * p )
{
   bool ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 5 )
      return;
   ret = p->MouseDownOwnedUnlessPopupClose[ s_nArrayGetPos - 1 ];
   hb_retl( ret );
}

static void s_ImGuiIO_getMouseDownWasDoubleClick( ImGuiIO * p )
{
   bool ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 5 )
      return;
   ret = p->MouseDownWasDoubleClick[ s_nArrayGetPos - 1 ];
   hb_retl( ret );
}

static void s_ImGuiIO_getMouseDownDuration( ImGuiIO * p )
{
   float ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 5 )
      return;
   ret = p->MouseDownDuration[ s_nArrayGetPos - 1 ];
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getMouseDownDurationPrev( ImGuiIO * p )
{
   float ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 5 )
      return;
   ret = p->MouseDownDurationPrev[ s_nArrayGetPos - 1 ];
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getMouseDragMaxDistanceAbs( ImGuiIO * p )
{
   ImVec2 ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 5 )
      return;
   ret = p->MouseDragMaxDistanceAbs[ s_nArrayGetPos - 1 ];
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiIO_getMouseDragMaxDistanceSqr( ImGuiIO * p )
{
   float ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 5 )
      return;
   ret = p->MouseDragMaxDistanceSqr[ s_nArrayGetPos - 1 ];
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getKeysDownDuration( ImGuiIO * p )
{
   float ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 512 )
      return;
   ret = p->KeysDownDuration[ s_nArrayGetPos - 1 ];
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getKeysDownDurationPrev( ImGuiIO * p )
{
   float ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 512 )
      return;
   ret = p->KeysDownDurationPrev[ s_nArrayGetPos - 1 ];
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getNavInputsDownDuration( ImGuiIO * p )
{
   float ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 21 )
      return;
   ret = p->NavInputsDownDuration[ s_nArrayGetPos - 1 ];
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getNavInputsDownDurationPrev( ImGuiIO * p )
{
   float ret;
   if( s_nArrayGetPos == 0 || s_nArrayGetPos > 21 )
      return;
   ret = p->NavInputsDownDurationPrev[ s_nArrayGetPos - 1 ];
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getPenPressure( ImGuiIO * p )
{
   float ret = p->PenPressure;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiIO_getAppFocusLost( ImGuiIO * p )
{
   bool ret = p->AppFocusLost;
   hb_retl( ret );
}

static void s_ImGuiIO_getInputQueueSurrogate( ImGuiIO * p )
{
   ImWchar16 ret = p->InputQueueSurrogate;
}

static void s_ImGuiIO_getInputQueueCharacters( ImGuiIO * p )
{
   ImVector_ImWchar ret = p->InputQueueCharacters;
}

static void(*s_ImGuiIO_fields[])( ImGuiIO * ) = { s_ImGuiIO_getConfigFlags, s_ImGuiIO_getBackendFlags, s_ImGuiIO_getDisplaySize, s_ImGuiIO_getDeltaTime, s_ImGuiIO_getIniSavingRate, s_ImGuiIO_getIniFilename, s_ImGuiIO_getLogFilename, s_ImGuiIO_getMouseDoubleClickTime, s_ImGuiIO_getMouseDoubleClickMaxDist, s_ImGuiIO_getMouseDragThreshold, s_ImGuiIO_getKeyMap, s_ImGuiIO_getKeyRepeatDelay, s_ImGuiIO_getKeyRepeatRate, s_ImGuiIO_getUserData, s_ImGuiIO_getFonts, s_ImGuiIO_getFontGlobalScale, s_ImGuiIO_getFontAllowUserScaling, s_ImGuiIO_getFontDefault, s_ImGuiIO_getDisplayFramebufferScale, s_ImGuiIO_getConfigDockingNoSplit, s_ImGuiIO_getConfigDockingAlwaysTabBar, s_ImGuiIO_getConfigDockingTransparentPayload, s_ImGuiIO_getConfigViewportsNoAutoMerge, s_ImGuiIO_getConfigViewportsNoTaskBarIcon, s_ImGuiIO_getConfigViewportsNoDecoration, s_ImGuiIO_getConfigViewportsNoDefaultParent, s_ImGuiIO_getMouseDrawCursor, s_ImGuiIO_getConfigMacOSXBehaviors, s_ImGuiIO_getConfigInputTextCursorBlink, s_ImGuiIO_getConfigDragClickToInputText, s_ImGuiIO_getConfigWindowsResizeFromEdges, s_ImGuiIO_getConfigWindowsMoveFromTitleBarOnly, s_ImGuiIO_getConfigMemoryCompactTimer, s_ImGuiIO_getBackendPlatformName, s_ImGuiIO_getBackendRendererName, s_ImGuiIO_getBackendPlatformUserData, s_ImGuiIO_getBackendRendererUserData, s_ImGuiIO_getBackendLanguageUserData, s_ImGuiIO_getGetClipboardTextFn, s_ImGuiIO_getSetClipboardTextFn, s_ImGuiIO_getClipboardUserData, s_ImGuiIO_getMousePos, s_ImGuiIO_getMouseDown, s_ImGuiIO_getMouseWheel, s_ImGuiIO_getMouseWheelH, s_ImGuiIO_getMouseHoveredViewport, s_ImGuiIO_getKeyCtrl, s_ImGuiIO_getKeyShift, s_ImGuiIO_getKeyAlt, s_ImGuiIO_getKeySuper, s_ImGuiIO_getKeysDown, s_ImGuiIO_getNavInputs, s_ImGuiIO_getWantCaptureMouse, s_ImGuiIO_getWantCaptureKeyboard, s_ImGuiIO_getWantTextInput, s_ImGuiIO_getWantSetMousePos, s_ImGuiIO_getWantSaveIniSettings, s_ImGuiIO_getNavActive, s_ImGuiIO_getNavVisible, s_ImGuiIO_getFramerate, s_ImGuiIO_getMetricsRenderVertices, s_ImGuiIO_getMetricsRenderIndices, s_ImGuiIO_getMetricsRenderWindows, s_ImGuiIO_getMetricsActiveWindows, s_ImGuiIO_getMetricsActiveAllocations, s_ImGuiIO_getMouseDelta, s_ImGuiIO_getWantCaptureMouseUnlessPopupClose, s_ImGuiIO_getKeyMods, s_ImGuiIO_getKeyModsPrev, s_ImGuiIO_getMousePosPrev, s_ImGuiIO_getMouseClickedPos, s_ImGuiIO_getMouseClickedTime, s_ImGuiIO_getMouseClicked, s_ImGuiIO_getMouseDoubleClicked, s_ImGuiIO_getMouseReleased, s_ImGuiIO_getMouseDownOwned, s_ImGuiIO_getMouseDownOwnedUnlessPopupClose, s_ImGuiIO_getMouseDownWasDoubleClick, s_ImGuiIO_getMouseDownDuration, s_ImGuiIO_getMouseDownDurationPrev, s_ImGuiIO_getMouseDragMaxDistanceAbs, s_ImGuiIO_getMouseDragMaxDistanceSqr, s_ImGuiIO_getKeysDownDuration, s_ImGuiIO_getKeysDownDurationPrev, s_ImGuiIO_getNavInputsDownDuration, s_ImGuiIO_getNavInputsDownDurationPrev, s_ImGuiIO_getPenPressure, s_ImGuiIO_getAppFocusLost, s_ImGuiIO_getInputQueueSurrogate, s_ImGuiIO_getInputQueueCharacters };

HB_FUNC( IMGUIIO_GET )
{
   ImGuiIO * p = ( ImGuiIO * ) hb_parptr( 1 );
   int n = hb_parni( 2 ) - 1;
   s_nArrayGetPos = hb_parns( 3 );
   if( p && n >= 0 && n < 90 )
      s_ImGuiIO_fields[ n ]( p );
}

static void s_ImGuiStyle_getAlpha( ImGuiStyle * p )
{
   float ret = p->Alpha;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getDisabledAlpha( ImGuiStyle * p )
{
   float ret = p->DisabledAlpha;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getWindowPadding( ImGuiStyle * p )
{
   ImVec2 ret = p->WindowPadding;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiStyle_getWindowRounding( ImGuiStyle * p )
{
   float ret = p->WindowRounding;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getWindowBorderSize( ImGuiStyle * p )
{
   float ret = p->WindowBorderSize;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getWindowMinSize( ImGuiStyle * p )
{
   ImVec2 ret = p->WindowMinSize;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiStyle_getWindowTitleAlign( ImGuiStyle * p )
{
   ImVec2 ret = p->WindowTitleAlign;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiStyle_getWindowMenuButtonPosition( ImGuiStyle * p )
{
   ImGuiDir ret = p->WindowMenuButtonPosition;
   hb_retni( ( int ) ret );
}

static void s_ImGuiStyle_getChildRounding( ImGuiStyle * p )
{
   float ret = p->ChildRounding;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getChildBorderSize( ImGuiStyle * p )
{
   float ret = p->ChildBorderSize;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getPopupRounding( ImGuiStyle * p )
{
   float ret = p->PopupRounding;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getPopupBorderSize( ImGuiStyle * p )
{
   float ret = p->PopupBorderSize;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getFramePadding( ImGuiStyle * p )
{
   ImVec2 ret = p->FramePadding;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiStyle_getFrameRounding( ImGuiStyle * p )
{
   float ret = p->FrameRounding;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getFrameBorderSize( ImGuiStyle * p )
{
   float ret = p->FrameBorderSize;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getItemSpacing( ImGuiStyle * p )
{
   ImVec2 ret = p->ItemSpacing;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiStyle_getItemInnerSpacing( ImGuiStyle * p )
{
   ImVec2 ret = p->ItemInnerSpacing;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiStyle_getCellPadding( ImGuiStyle * p )
{
   ImVec2 ret = p->CellPadding;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiStyle_getTouchExtraPadding( ImGuiStyle * p )
{
   ImVec2 ret = p->TouchExtraPadding;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiStyle_getIndentSpacing( ImGuiStyle * p )
{
   float ret = p->IndentSpacing;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getColumnsMinSpacing( ImGuiStyle * p )
{
   float ret = p->ColumnsMinSpacing;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getScrollbarSize( ImGuiStyle * p )
{
   float ret = p->ScrollbarSize;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getScrollbarRounding( ImGuiStyle * p )
{
   float ret = p->ScrollbarRounding;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getGrabMinSize( ImGuiStyle * p )
{
   float ret = p->GrabMinSize;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getGrabRounding( ImGuiStyle * p )
{
   float ret = p->GrabRounding;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getLogSliderDeadzone( ImGuiStyle * p )
{
   float ret = p->LogSliderDeadzone;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getTabRounding( ImGuiStyle * p )
{
   float ret = p->TabRounding;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getTabBorderSize( ImGuiStyle * p )
{
   float ret = p->TabBorderSize;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getTabMinWidthForCloseButton( ImGuiStyle * p )
{
   float ret = p->TabMinWidthForCloseButton;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getColorButtonPosition( ImGuiStyle * p )
{
   ImGuiDir ret = p->ColorButtonPosition;
   hb_retni( ( int ) ret );
}

static void s_ImGuiStyle_getButtonTextAlign( ImGuiStyle * p )
{
   ImVec2 ret = p->ButtonTextAlign;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiStyle_getSelectableTextAlign( ImGuiStyle * p )
{
   ImVec2 ret = p->SelectableTextAlign;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiStyle_getDisplayWindowPadding( ImGuiStyle * p )
{
   ImVec2 ret = p->DisplayWindowPadding;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiStyle_getDisplaySafeAreaPadding( ImGuiStyle * p )
{
   ImVec2 ret = p->DisplaySafeAreaPadding;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 2 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
}

static void s_ImGuiStyle_getMouseCursorScale( ImGuiStyle * p )
{
   float ret = p->MouseCursorScale;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getAntiAliasedLines( ImGuiStyle * p )
{
   bool ret = p->AntiAliasedLines;
   hb_retl( ret );
}

static void s_ImGuiStyle_getAntiAliasedLinesUseTex( ImGuiStyle * p )
{
   bool ret = p->AntiAliasedLinesUseTex;
   hb_retl( ret );
}

static void s_ImGuiStyle_getAntiAliasedFill( ImGuiStyle * p )
{
   bool ret = p->AntiAliasedFill;
   hb_retl( ret );
}

static void s_ImGuiStyle_getCurveTessellationTol( ImGuiStyle * p )
{
   float ret = p->CurveTessellationTol;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getCircleTessellationMaxError( ImGuiStyle * p )
{
   float ret = p->CircleTessellationMaxError;
   hb_retnd( ( double ) ret );
}

static void s_ImGuiStyle_getColors( ImGuiStyle * p )
{
   ImVec4 ret = p->Colors;
   PHB_ITEM pret = hb_stackReturnItem();
   hb_arrayNew( pret, 4 );
   hb_arraySetND( pret, 1, ( double ) ret.x );
   hb_arraySetND( pret, 2, ( double ) ret.y );
   hb_arraySetND( pret, 3, ( double ) ret.z );
   hb_arraySetND( pret, 4, ( double ) ret.w );
}

static void(*s_ImGuiStyle_fields[])( ImGuiStyle * ) = { s_ImGuiStyle_getAlpha, s_ImGuiStyle_getDisabledAlpha, s_ImGuiStyle_getWindowPadding, s_ImGuiStyle_getWindowRounding, s_ImGuiStyle_getWindowBorderSize, s_ImGuiStyle_getWindowMinSize, s_ImGuiStyle_getWindowTitleAlign, s_ImGuiStyle_getWindowMenuButtonPosition, s_ImGuiStyle_getChildRounding, s_ImGuiStyle_getChildBorderSize, s_ImGuiStyle_getPopupRounding, s_ImGuiStyle_getPopupBorderSize, s_ImGuiStyle_getFramePadding, s_ImGuiStyle_getFrameRounding, s_ImGuiStyle_getFrameBorderSize, s_ImGuiStyle_getItemSpacing, s_ImGuiStyle_getItemInnerSpacing, s_ImGuiStyle_getCellPadding, s_ImGuiStyle_getTouchExtraPadding, s_ImGuiStyle_getIndentSpacing, s_ImGuiStyle_getColumnsMinSpacing, s_ImGuiStyle_getScrollbarSize, s_ImGuiStyle_getScrollbarRounding, s_ImGuiStyle_getGrabMinSize, s_ImGuiStyle_getGrabRounding, s_ImGuiStyle_getLogSliderDeadzone, s_ImGuiStyle_getTabRounding, s_ImGuiStyle_getTabBorderSize, s_ImGuiStyle_getTabMinWidthForCloseButton, s_ImGuiStyle_getColorButtonPosition, s_ImGuiStyle_getButtonTextAlign, s_ImGuiStyle_getSelectableTextAlign, s_ImGuiStyle_getDisplayWindowPadding, s_ImGuiStyle_getDisplaySafeAreaPadding, s_ImGuiStyle_getMouseCursorScale, s_ImGuiStyle_getAntiAliasedLines, s_ImGuiStyle_getAntiAliasedLinesUseTex, s_ImGuiStyle_getAntiAliasedFill, s_ImGuiStyle_getCurveTessellationTol, s_ImGuiStyle_getCircleTessellationMaxError, s_ImGuiStyle_getColors };

HB_FUNC( IMGUISTYLE_GET )
{
   ImGuiStyle * p = ( ImGuiStyle * ) hb_parptr( 1 );
   int n = hb_parni( 2 ) - 1;
   if( p && n >= 0 && n < 41 )
      s_ImGuiStyle_fields[ n ]( p );
}

