/* This file is automatically generated by generator.prg originated from
   https://github.com/alcz/harbour-cimgui-sokol-starterkit
   based on output/definitions.json from cimgui https://github.com/cimgui/cimgui which is
   based on imgui.h file version "1.86" from Dear ImGui https://github.com/ocornut/imgui */

#include "hbapi.h"
#include "hbapiitm.h"
#include "hbstack.h"
#include "./imgui/imgui.h"
#include "./imgui/imgui_internal.h"
#include "cimgui.h"


static void s_ImGuiPlatformIO_getPlatform_CreateWindow( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_CreateWindow;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getPlatform_DestroyWindow( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_DestroyWindow;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getPlatform_ShowWindow( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_ShowWindow;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getPlatform_SetWindowPos( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_SetWindowPos;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getPlatform_GetWindowPos( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_GetWindowPos;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getPlatform_SetWindowSize( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_SetWindowSize;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getPlatform_GetWindowSize( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_GetWindowSize;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getPlatform_SetWindowFocus( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_SetWindowFocus;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getPlatform_GetWindowFocus( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_GetWindowFocus;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getPlatform_GetWindowMinimized( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_GetWindowMinimized;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getPlatform_SetWindowTitle( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_SetWindowTitle;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getPlatform_SetWindowAlpha( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_SetWindowAlpha;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getPlatform_UpdateWindow( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_UpdateWindow;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getPlatform_RenderWindow( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_RenderWindow;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getPlatform_SwapBuffers( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_SwapBuffers;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getPlatform_GetWindowDpiScale( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_GetWindowDpiScale;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getPlatform_OnChangedViewport( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_OnChangedViewport;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getPlatform_SetImeInputPos( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_SetImeInputPos;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getPlatform_CreateVkSurface( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Platform_CreateVkSurface;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getRenderer_CreateWindow( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Renderer_CreateWindow;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getRenderer_DestroyWindow( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Renderer_DestroyWindow;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getRenderer_SetWindowSize( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Renderer_SetWindowSize;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getRenderer_RenderWindow( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Renderer_RenderWindow;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getRenderer_SwapBuffers( ImGuiPlatformIO * p )
{
   void * ret = ( void * ) p->Renderer_SwapBuffers;
   hb_retptr( ( void * ) ret );
}

static void s_ImGuiPlatformIO_getMonitors( ImGuiPlatformIO * p )
{
//   ImVector_ImGuiPlatformMonitor ret = p->Monitors;
}

static void s_ImGuiPlatformIO_getViewports( ImGuiPlatformIO * p )
{
//   ImVector_ImGuiViewportPtr ret = p->Viewports;
}

static void(*s_ImGuiPlatformIO_fields[])( ImGuiPlatformIO * ) = { s_ImGuiPlatformIO_getPlatform_CreateWindow, s_ImGuiPlatformIO_getPlatform_DestroyWindow, s_ImGuiPlatformIO_getPlatform_ShowWindow, s_ImGuiPlatformIO_getPlatform_SetWindowPos, s_ImGuiPlatformIO_getPlatform_GetWindowPos, s_ImGuiPlatformIO_getPlatform_SetWindowSize, s_ImGuiPlatformIO_getPlatform_GetWindowSize, s_ImGuiPlatformIO_getPlatform_SetWindowFocus, s_ImGuiPlatformIO_getPlatform_GetWindowFocus, s_ImGuiPlatformIO_getPlatform_GetWindowMinimized, s_ImGuiPlatformIO_getPlatform_SetWindowTitle, s_ImGuiPlatformIO_getPlatform_SetWindowAlpha, s_ImGuiPlatformIO_getPlatform_UpdateWindow, s_ImGuiPlatformIO_getPlatform_RenderWindow, s_ImGuiPlatformIO_getPlatform_SwapBuffers, s_ImGuiPlatformIO_getPlatform_GetWindowDpiScale, s_ImGuiPlatformIO_getPlatform_OnChangedViewport, s_ImGuiPlatformIO_getPlatform_SetImeInputPos, s_ImGuiPlatformIO_getPlatform_CreateVkSurface, s_ImGuiPlatformIO_getRenderer_CreateWindow, s_ImGuiPlatformIO_getRenderer_DestroyWindow, s_ImGuiPlatformIO_getRenderer_SetWindowSize, s_ImGuiPlatformIO_getRenderer_RenderWindow, s_ImGuiPlatformIO_getRenderer_SwapBuffers, s_ImGuiPlatformIO_getMonitors, s_ImGuiPlatformIO_getViewports };

HB_FUNC( IMGUIPLATFORMIO_GET )
{
   ImGuiPlatformIO * p = ( ImGuiPlatformIO * ) hb_parptr( 1 );
   int n = hb_parni( 2 ) - 1;
   if( p && n >= 0 && n < 26 )
      s_ImGuiPlatformIO_fields[ n ]( p );
}

HB_FUNC( IMGUIPLATFORMIO_SET )
{
   ImGuiPlatformIO * p = ( ImGuiPlatformIO * ) hb_parptr( 1 );
   int n = hb_parni( 2 ) - 1;
   if( p && n >= 0 && n < 1 )
      s_ImGuiPlatformIO_fields[ 26 + n ]( p );
   hb_itemCopy( hb_stackReturnItem(), hb_paramError( 3 ) );
}

