/* This file is automatically generated by generator.prg originated from
   https://github.com/alcz/harbour-cimgui-sokol-starterkit
   based on output/definitions.json from cimgui https://github.com/cimgui/cimplot which is
   based on implot.h file version "0.12" from ImPlot https://github.com/epezent/implot/ */

#include "hbapi.h"
#include "hbapiitm.h"
#include "implot/implot.h"
#include "implot/implot_internal.h"
#include "cimplot.h"

float _paf( PHB_ITEM p, HB_SIZE nIndex );

/* void ImPlotAlignmentData_Begin(ImPlotAlignmentData* self) */
HB_FUNC( IMPLOTALIGNMENTDATA_BEGIN )
{
   ImPlotAlignmentData* pOut = ( ImPlotAlignmentData* ) hb_parptr( 1 );
   ImPlotAlignmentData_Begin(pOut);
}

/* void ImPlotAlignmentData_End(ImPlotAlignmentData* self) */
HB_FUNC( IMPLOTALIGNMENTDATA_END )
{
   ImPlotAlignmentData* pOut = ( ImPlotAlignmentData* ) hb_parptr( 1 );
   ImPlotAlignmentData_End(pOut);
}

HB_FUNC( IMPLOTALIGNMENTDATA_IMPLOTALIGNMENTDATA )
{
   ImPlotAlignmentData_ImPlotAlignmentData();
}

/* void ImPlotAlignmentData_Reset(ImPlotAlignmentData* self) */
HB_FUNC( IMPLOTALIGNMENTDATA_RESET )
{
   ImPlotAlignmentData* pOut = ( ImPlotAlignmentData* ) hb_parptr( 1 );
   ImPlotAlignmentData_Reset(pOut);
}

/* void ImPlotAlignmentData_Update(ImPlotAlignmentData* self,float* pad_a,float* pad_b) */
HB_FUNC( IMPLOTALIGNMENTDATA_UPDATE )
{
   ImPlotAlignmentData* pOut = ( ImPlotAlignmentData* ) hb_parptr( 1 );
   float /* @ */ _pad_a = ( float ) hb_parnd( 2 );
   float * pad_a = &_pad_a;
   float /* @ */ _pad_b = ( float ) hb_parnd( 3 );
   float * pad_b = &_pad_b;
   ImPlotAlignmentData_Update(pOut,pad_a,pad_b);
   hb_itemPutND( hb_paramError( 2 ), ( double ) _pad_a );
   hb_itemPutND( hb_paramError( 3 ), ( double ) _pad_b );
}

/* void ImPlotAlignmentData_destroy(ImPlotAlignmentData* self) */
HB_FUNC( IMPLOTALIGNMENTDATA_DESTROY )
{
   ImPlotAlignmentData* pOut = ( ImPlotAlignmentData* ) hb_parptr( 1 );
   ImPlotAlignmentData_destroy(pOut);
}

/* void ImPlotAnnotationCollection_Append(ImPlotAnnotationCollection* self,const ImVec2 pos,const ImVec2 off,ImU32 bg,ImU32 fg,bool clamp,const char* fmt,...) */
HB_FUNC( IMPLOTANNOTATIONCOLLECTION_APPEND )
{
   ImPlotAnnotationCollection* pOut = ( ImPlotAnnotationCollection* ) hb_parptr( 1 );
   PHB_ITEM ppos = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   PHB_ITEM poff = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 off = ImVec2{ _paf( poff, 1 ), _paf( poff, 2 ) };
   ImU32 bg = ( HB_U32 ) hb_parnl( 4 );
   ImU32 fg = ( HB_U32 ) hb_parnl( 5 );
   bool clamp = hb_parl( 6 );
   const char* fmt = hb_parcx( 7 );
   /* ... ...; */
   ImPlotAnnotationCollection_Append(pOut,pos,off,bg,fg,clamp,fmt,NULL);
}

/* void ImPlotAnnotationCollection_AppendV(ImPlotAnnotationCollection* self,const ImVec2 pos,const ImVec2 off,ImU32 bg,ImU32 fg,bool clamp,const char* fmt,va_list args) */
HB_FUNC( IMPLOTANNOTATIONCOLLECTION_APPENDV )
{
   ImPlotAnnotationCollection* pOut = ( ImPlotAnnotationCollection* ) hb_parptr( 1 );
   PHB_ITEM ppos = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   PHB_ITEM poff = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 off = ImVec2{ _paf( poff, 1 ), _paf( poff, 2 ) };
   ImU32 bg = ( HB_U32 ) hb_parnl( 4 );
   ImU32 fg = ( HB_U32 ) hb_parnl( 5 );
   bool clamp = hb_parl( 6 );
   const char* fmt = hb_parcx( 7 );
   /* unsupported */
}

/* const char* ImPlotAnnotationCollection_GetText(ImPlotAnnotationCollection* self,int idx) */
HB_FUNC( IMPLOTANNOTATIONCOLLECTION_GETTEXT )
{
   ImPlotAnnotationCollection* pOut = ( ImPlotAnnotationCollection* ) hb_parptr( 1 );
   int idx = hb_parni( 2 );
   const char* ret = ImPlotAnnotationCollection_GetText(pOut,idx);
   hb_retptr( ( void * ) ret );
}

HB_FUNC( IMPLOTANNOTATIONCOLLECTION_IMPLOTANNOTATIONCOLLECTION )
{
   ImPlotAnnotationCollection_ImPlotAnnotationCollection();
}

/* void ImPlotAnnotationCollection_Reset(ImPlotAnnotationCollection* self) */
HB_FUNC( IMPLOTANNOTATIONCOLLECTION_RESET )
{
   ImPlotAnnotationCollection* pOut = ( ImPlotAnnotationCollection* ) hb_parptr( 1 );
   ImPlotAnnotationCollection_Reset(pOut);
}

/* void ImPlotAnnotationCollection_destroy(ImPlotAnnotationCollection* self) */
HB_FUNC( IMPLOTANNOTATIONCOLLECTION_DESTROY )
{
   ImPlotAnnotationCollection* pOut = ( ImPlotAnnotationCollection* ) hb_parptr( 1 );
   ImPlotAnnotationCollection_destroy(pOut);
}

/* void ImPlotAxis_Constrain(ImPlotAxis* self) */
HB_FUNC( IMPLOTAXIS_CONSTRAIN )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   ImPlotAxis_Constrain(pOut);
}

/* double ImPlotAxis_GetAspect(ImPlotAxis* self) */
HB_FUNC( IMPLOTAXIS_GETASPECT )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   double ret = ImPlotAxis_GetAspect(pOut);
   hb_retnd( ret );
}

HB_FUNC( IMPLOTAXIS_IMPLOTAXIS )
{
   ImPlotAxis_ImPlotAxis();
}

/* bool ImPlotAxis_IsAutoFitting(ImPlotAxis* self) */
HB_FUNC( IMPLOTAXIS_ISAUTOFITTING )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   bool ret = ImPlotAxis_IsAutoFitting(pOut);
   hb_retl( ret );
}

/* bool ImPlotAxis_IsInputLocked(ImPlotAxis* self) */
HB_FUNC( IMPLOTAXIS_ISINPUTLOCKED )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   bool ret = ImPlotAxis_IsInputLocked(pOut);
   hb_retl( ret );
}

/* bool ImPlotAxis_IsInputLockedMax(ImPlotAxis* self) */
HB_FUNC( IMPLOTAXIS_ISINPUTLOCKEDMAX )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   bool ret = ImPlotAxis_IsInputLockedMax(pOut);
   hb_retl( ret );
}

/* bool ImPlotAxis_IsInputLockedMin(ImPlotAxis* self) */
HB_FUNC( IMPLOTAXIS_ISINPUTLOCKEDMIN )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   bool ret = ImPlotAxis_IsInputLockedMin(pOut);
   hb_retl( ret );
}

/* bool ImPlotAxis_IsInverted(ImPlotAxis* self) */
HB_FUNC( IMPLOTAXIS_ISINVERTED )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   bool ret = ImPlotAxis_IsInverted(pOut);
   hb_retl( ret );
}

/* bool ImPlotAxis_IsLabeled(ImPlotAxis* self) */
HB_FUNC( IMPLOTAXIS_ISLABELED )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   bool ret = ImPlotAxis_IsLabeled(pOut);
   hb_retl( ret );
}

/* bool ImPlotAxis_IsLocked(ImPlotAxis* self) */
HB_FUNC( IMPLOTAXIS_ISLOCKED )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   bool ret = ImPlotAxis_IsLocked(pOut);
   hb_retl( ret );
}

/* bool ImPlotAxis_IsLockedMax(ImPlotAxis* self) */
HB_FUNC( IMPLOTAXIS_ISLOCKEDMAX )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   bool ret = ImPlotAxis_IsLockedMax(pOut);
   hb_retl( ret );
}

/* bool ImPlotAxis_IsLockedMin(ImPlotAxis* self) */
HB_FUNC( IMPLOTAXIS_ISLOCKEDMIN )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   bool ret = ImPlotAxis_IsLockedMin(pOut);
   hb_retl( ret );
}

/* bool ImPlotAxis_IsLog(ImPlotAxis* self) */
HB_FUNC( IMPLOTAXIS_ISLOG )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   bool ret = ImPlotAxis_IsLog(pOut);
   hb_retl( ret );
}

/* bool ImPlotAxis_IsRangeLocked(ImPlotAxis* self) */
HB_FUNC( IMPLOTAXIS_ISRANGELOCKED )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   bool ret = ImPlotAxis_IsRangeLocked(pOut);
   hb_retl( ret );
}

/* bool ImPlotAxis_IsTime(ImPlotAxis* self) */
HB_FUNC( IMPLOTAXIS_ISTIME )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   bool ret = ImPlotAxis_IsTime(pOut);
   hb_retl( ret );
}

/* void ImPlotAxis_SetAspect(ImPlotAxis* self,double unit_per_pix) */
HB_FUNC( IMPLOTAXIS_SETASPECT )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   double unit_per_pix = hb_parnd( 2 );
   ImPlotAxis_SetAspect(pOut,unit_per_pix);
}

/* bool ImPlotAxis_SetMax(ImPlotAxis* self,double _max,bool force) */
HB_FUNC( IMPLOTAXIS_SETMAX )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   double _max = hb_parnd( 2 );
   bool force = hb_parldef( 3, 0 );
   bool ret = ImPlotAxis_SetMax(pOut,_max,force);
   hb_retl( ret );
}

/* bool ImPlotAxis_SetMin(ImPlotAxis* self,double _min,bool force) */
HB_FUNC( IMPLOTAXIS_SETMIN )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   double _min = hb_parnd( 2 );
   bool force = hb_parldef( 3, 0 );
   bool ret = ImPlotAxis_SetMin(pOut,_min,force);
   hb_retl( ret );
}

/* void ImPlotAxis_SetRange_double(ImPlotAxis* self,double _min,double _max) */
HB_FUNC( IMPLOTAXIS_SETRANGE_DOUBLE )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   double _min = hb_parnd( 2 );
   double _max = hb_parnd( 3 );
   ImPlotAxis_SetRange_double(pOut,_min,_max);
}

/* void ImPlotAxis_SetRange_PlotRange(ImPlotAxis* self,const ImPlotRange range) */
HB_FUNC( IMPLOTAXIS_SETRANGE_PLOTRANGE )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   const ImPlotRange range;
   ImPlotAxis_SetRange_PlotRange(pOut,range);
}

/* void ImPlotAxis_destroy(ImPlotAxis* self) */
HB_FUNC( IMPLOTAXIS_DESTROY )
{
   ImPlotAxis* pOut = ( ImPlotAxis* ) hb_parptr( 1 );
   ImPlotAxis_destroy(pOut);
}

/* int ImPlotColormapData_Append(ImPlotColormapData* self,const char* name,const ImU32* keys,int count,bool qual) */
HB_FUNC( IMPLOTCOLORMAPDATA_APPEND )
{
   ImPlotColormapData* pOut = ( ImPlotColormapData* ) hb_parptr( 1 );
   const char* name = hb_parcx( 2 );
   const ImU32* keys = ( const ImU32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   bool qual = hb_parl( 5 );
   int ret = ImPlotColormapData_Append(pOut,name,keys,count,qual);
   hb_retni( ret );
}

/* ImPlotColormap ImPlotColormapData_GetIndex(ImPlotColormapData* self,const char* name) */
HB_FUNC( IMPLOTCOLORMAPDATA_GETINDEX )
{
   ImPlotColormapData* pOut = ( ImPlotColormapData* ) hb_parptr( 1 );
   const char* name = hb_parcx( 2 );
   ImPlotColormap ret = ImPlotColormapData_GetIndex(pOut,name);
   hb_retni( ( int ) ret );
}

/* ImU32 ImPlotColormapData_GetKeyColor(ImPlotColormapData* self,ImPlotColormap cmap,int idx) */
HB_FUNC( IMPLOTCOLORMAPDATA_GETKEYCOLOR )
{
   ImPlotColormapData* pOut = ( ImPlotColormapData* ) hb_parptr( 1 );
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 2 );
   int idx = hb_parni( 3 );
   ImU32 ret = ImPlotColormapData_GetKeyColor(pOut,cmap,idx);
   hb_retnl( ( HB_LONG ) ret );
}

/* int ImPlotColormapData_GetKeyCount(ImPlotColormapData* self,ImPlotColormap cmap) */
HB_FUNC( IMPLOTCOLORMAPDATA_GETKEYCOUNT )
{
   ImPlotColormapData* pOut = ( ImPlotColormapData* ) hb_parptr( 1 );
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 2 );
   int ret = ImPlotColormapData_GetKeyCount(pOut,cmap);
   hb_retni( ret );
}

/* const ImU32* ImPlotColormapData_GetKeys(ImPlotColormapData* self,ImPlotColormap cmap) */
HB_FUNC( IMPLOTCOLORMAPDATA_GETKEYS )
{
   ImPlotColormapData* pOut = ( ImPlotColormapData* ) hb_parptr( 1 );
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 2 );
   const ImU32* ret = ImPlotColormapData_GetKeys(pOut,cmap);
   hb_retptr( ( void * ) ret );
}

/* const char* ImPlotColormapData_GetName(ImPlotColormapData* self,ImPlotColormap cmap) */
HB_FUNC( IMPLOTCOLORMAPDATA_GETNAME )
{
   ImPlotColormapData* pOut = ( ImPlotColormapData* ) hb_parptr( 1 );
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 2 );
   const char* ret = ImPlotColormapData_GetName(pOut,cmap);
   hb_retptr( ( void * ) ret );
}

/* const ImU32* ImPlotColormapData_GetTable(ImPlotColormapData* self,ImPlotColormap cmap) */
HB_FUNC( IMPLOTCOLORMAPDATA_GETTABLE )
{
   ImPlotColormapData* pOut = ( ImPlotColormapData* ) hb_parptr( 1 );
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 2 );
   const ImU32* ret = ImPlotColormapData_GetTable(pOut,cmap);
   hb_retptr( ( void * ) ret );
}

/* ImU32 ImPlotColormapData_GetTableColor(ImPlotColormapData* self,ImPlotColormap cmap,int idx) */
HB_FUNC( IMPLOTCOLORMAPDATA_GETTABLECOLOR )
{
   ImPlotColormapData* pOut = ( ImPlotColormapData* ) hb_parptr( 1 );
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 2 );
   int idx = hb_parni( 3 );
   ImU32 ret = ImPlotColormapData_GetTableColor(pOut,cmap,idx);
   hb_retnl( ( HB_LONG ) ret );
}

/* int ImPlotColormapData_GetTableSize(ImPlotColormapData* self,ImPlotColormap cmap) */
HB_FUNC( IMPLOTCOLORMAPDATA_GETTABLESIZE )
{
   ImPlotColormapData* pOut = ( ImPlotColormapData* ) hb_parptr( 1 );
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 2 );
   int ret = ImPlotColormapData_GetTableSize(pOut,cmap);
   hb_retni( ret );
}

HB_FUNC( IMPLOTCOLORMAPDATA_IMPLOTCOLORMAPDATA )
{
   ImPlotColormapData_ImPlotColormapData();
}

/* bool ImPlotColormapData_IsQual(ImPlotColormapData* self,ImPlotColormap cmap) */
HB_FUNC( IMPLOTCOLORMAPDATA_ISQUAL )
{
   ImPlotColormapData* pOut = ( ImPlotColormapData* ) hb_parptr( 1 );
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 2 );
   bool ret = ImPlotColormapData_IsQual(pOut,cmap);
   hb_retl( ret );
}

/* ImU32 ImPlotColormapData_LerpTable(ImPlotColormapData* self,ImPlotColormap cmap,float t) */
HB_FUNC( IMPLOTCOLORMAPDATA_LERPTABLE )
{
   ImPlotColormapData* pOut = ( ImPlotColormapData* ) hb_parptr( 1 );
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 2 );
   float t = ( float ) hb_parnd( 3 );
   ImU32 ret = ImPlotColormapData_LerpTable(pOut,cmap,t);
   hb_retnl( ( HB_LONG ) ret );
}

/* void ImPlotColormapData_RebuildTables(ImPlotColormapData* self) */
HB_FUNC( IMPLOTCOLORMAPDATA_REBUILDTABLES )
{
   ImPlotColormapData* pOut = ( ImPlotColormapData* ) hb_parptr( 1 );
   ImPlotColormapData_RebuildTables(pOut);
}

/* void ImPlotColormapData_SetKeyColor(ImPlotColormapData* self,ImPlotColormap cmap,int idx,ImU32 value) */
HB_FUNC( IMPLOTCOLORMAPDATA_SETKEYCOLOR )
{
   ImPlotColormapData* pOut = ( ImPlotColormapData* ) hb_parptr( 1 );
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 2 );
   int idx = hb_parni( 3 );
   ImU32 value = ( HB_U32 ) hb_parnl( 4 );
   ImPlotColormapData_SetKeyColor(pOut,cmap,idx,value);
}

/* void ImPlotColormapData__AppendTable(ImPlotColormapData* self,ImPlotColormap cmap) */
HB_FUNC( IMPLOTCOLORMAPDATA__APPENDTABLE )
{
   ImPlotColormapData* pOut = ( ImPlotColormapData* ) hb_parptr( 1 );
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 2 );
   ImPlotColormapData__AppendTable(pOut,cmap);
}

/* void ImPlotColormapData_destroy(ImPlotColormapData* self) */
HB_FUNC( IMPLOTCOLORMAPDATA_DESTROY )
{
   ImPlotColormapData* pOut = ( ImPlotColormapData* ) hb_parptr( 1 );
   ImPlotColormapData_destroy(pOut);
}

/*
HB_FUNC( IMPLOTDATETIMEFMT_IMPLOTDATETIMEFMT )
{
   ImPlotDateFmt date_fmt = ( ImPlotDateFmt ) hb_parni( 1 );
   ImPlotTimeFmt time_fmt = ( ImPlotTimeFmt ) hb_parni( 2 );
   bool use_24_hr_clk = hb_parldef( 3, 0 );
   bool use_iso_8601 = hb_parldef( 4, 0 );
   ImPlotDateTimeFmt_ImPlotDateTimeFmt(date_fmt,time_fmt,use_24_hr_clk,use_iso_8601);
}
*/
/* void ImPlotDateTimeFmt_destroy(ImPlotDateTimeFmt* self) */
/*
HB_FUNC( IMPLOTDATETIMEFMT_DESTROY )
{
   ImPlotDateTimeFmt* pOut = ( ImPlotDateTimeFmt* ) hb_parptr( 1 );
   ImPlotDateTimeFmt_destroy(pOut);
}
*/

HB_FUNC( IMPLOTINPUTMAP_IMPLOTINPUTMAP )
{
   ImPlotInputMap_ImPlotInputMap();
}

/* void ImPlotInputMap_destroy(ImPlotInputMap* self) */
HB_FUNC( IMPLOTINPUTMAP_DESTROY )
{
   ImPlotInputMap* pOut = ( ImPlotInputMap* ) hb_parptr( 1 );
   ImPlotInputMap_destroy(pOut);
}

/* ImPlotItem* ImPlotItemGroup_GetItem_ID(ImPlotItemGroup* self,ImGuiID id) */
HB_FUNC( IMPLOTITEMGROUP_GETITEM_ID )
{
   ImPlotItemGroup* pOut = ( ImPlotItemGroup* ) hb_parptr( 1 );
   ImGuiID id = ( ImGuiID ) hb_parni( 2 );
   ImPlotItem* ret = ImPlotItemGroup_GetItem_ID(pOut,id);
   hb_retptr( ( void * ) ret );
}

/* ImPlotItem* ImPlotItemGroup_GetItem_Str(ImPlotItemGroup* self,const char* label_id) */
HB_FUNC( IMPLOTITEMGROUP_GETITEM_STR )
{
   ImPlotItemGroup* pOut = ( ImPlotItemGroup* ) hb_parptr( 1 );
   const char* label_id = hb_parcx( 2 );
   ImPlotItem* ret = ImPlotItemGroup_GetItem_Str(pOut,label_id);
   hb_retptr( ( void * ) ret );
}

/* ImPlotItem* ImPlotItemGroup_GetItemByIndex(ImPlotItemGroup* self,int i) */
HB_FUNC( IMPLOTITEMGROUP_GETITEMBYINDEX )
{
   ImPlotItemGroup* pOut = ( ImPlotItemGroup* ) hb_parptr( 1 );
   int i = hb_parni( 2 );
   ImPlotItem* ret = ImPlotItemGroup_GetItemByIndex(pOut,i);
   hb_retptr( ( void * ) ret );
}

/* int ImPlotItemGroup_GetItemCount(ImPlotItemGroup* self) */
HB_FUNC( IMPLOTITEMGROUP_GETITEMCOUNT )
{
   ImPlotItemGroup* pOut = ( ImPlotItemGroup* ) hb_parptr( 1 );
   int ret = ImPlotItemGroup_GetItemCount(pOut);
   hb_retni( ret );
}

/* ImGuiID ImPlotItemGroup_GetItemID(ImPlotItemGroup* self,const char* label_id) */
HB_FUNC( IMPLOTITEMGROUP_GETITEMID )
{
   ImPlotItemGroup* pOut = ( ImPlotItemGroup* ) hb_parptr( 1 );
   const char* label_id = hb_parcx( 2 );
   ImGuiID ret = ImPlotItemGroup_GetItemID(pOut,label_id);
   hb_retni( ( int ) ret );
}

/* int ImPlotItemGroup_GetItemIndex(ImPlotItemGroup* self,ImPlotItem* item) */
HB_FUNC( IMPLOTITEMGROUP_GETITEMINDEX )
{
   ImPlotItemGroup* pOut = ( ImPlotItemGroup* ) hb_parptr( 1 );
   ImPlotItem* item = ( ImPlotItem* ) hb_parptr( 2 );
   int ret = ImPlotItemGroup_GetItemIndex(pOut,item);
   hb_retni( ret );
}

/* int ImPlotItemGroup_GetLegendCount(ImPlotItemGroup* self) */
HB_FUNC( IMPLOTITEMGROUP_GETLEGENDCOUNT )
{
   ImPlotItemGroup* pOut = ( ImPlotItemGroup* ) hb_parptr( 1 );
   int ret = ImPlotItemGroup_GetLegendCount(pOut);
   hb_retni( ret );
}

/* ImPlotItem* ImPlotItemGroup_GetLegendItem(ImPlotItemGroup* self,int i) */
HB_FUNC( IMPLOTITEMGROUP_GETLEGENDITEM )
{
   ImPlotItemGroup* pOut = ( ImPlotItemGroup* ) hb_parptr( 1 );
   int i = hb_parni( 2 );
   ImPlotItem* ret = ImPlotItemGroup_GetLegendItem(pOut,i);
   hb_retptr( ( void * ) ret );
}

/* const char* ImPlotItemGroup_GetLegendLabel(ImPlotItemGroup* self,int i) */
HB_FUNC( IMPLOTITEMGROUP_GETLEGENDLABEL )
{
   ImPlotItemGroup* pOut = ( ImPlotItemGroup* ) hb_parptr( 1 );
   int i = hb_parni( 2 );
   const char* ret = ImPlotItemGroup_GetLegendLabel(pOut,i);
   hb_retptr( ( void * ) ret );
}

/* ImPlotItem* ImPlotItemGroup_GetOrAddItem(ImPlotItemGroup* self,ImGuiID id) */
HB_FUNC( IMPLOTITEMGROUP_GETORADDITEM )
{
   ImPlotItemGroup* pOut = ( ImPlotItemGroup* ) hb_parptr( 1 );
   ImGuiID id = ( ImGuiID ) hb_parni( 2 );
   ImPlotItem* ret = ImPlotItemGroup_GetOrAddItem(pOut,id);
   hb_retptr( ( void * ) ret );
}

HB_FUNC( IMPLOTITEMGROUP_IMPLOTITEMGROUP )
{
   ImPlotItemGroup_ImPlotItemGroup();
}

/* void ImPlotItemGroup_Reset(ImPlotItemGroup* self) */
HB_FUNC( IMPLOTITEMGROUP_RESET )
{
   ImPlotItemGroup* pOut = ( ImPlotItemGroup* ) hb_parptr( 1 );
   ImPlotItemGroup_Reset(pOut);
}

/* void ImPlotItemGroup_destroy(ImPlotItemGroup* self) */
HB_FUNC( IMPLOTITEMGROUP_DESTROY )
{
   ImPlotItemGroup* pOut = ( ImPlotItemGroup* ) hb_parptr( 1 );
   ImPlotItemGroup_destroy(pOut);
}

HB_FUNC( IMPLOTITEM_IMPLOTITEM )
{
   ImPlotItem_ImPlotItem();
}

/* void ImPlotItem_destroy(ImPlotItem* self) */
HB_FUNC( IMPLOTITEM_DESTROY )
{
   ImPlotItem* pOut = ( ImPlotItem* ) hb_parptr( 1 );
   ImPlotItem_destroy(pOut);
}

HB_FUNC( IMPLOTLEGENDDATA_IMPLOTLEGENDDATA )
{
   ImPlotLegendData_ImPlotLegendData();
}

/* void ImPlotLegendData_Reset(ImPlotLegendData* self) */
HB_FUNC( IMPLOTLEGENDDATA_RESET )
{
   ImPlotLegendData* pOut = ( ImPlotLegendData* ) hb_parptr( 1 );
   ImPlotLegendData_Reset(pOut);
}

/* void ImPlotLegendData_destroy(ImPlotLegendData* self) */
HB_FUNC( IMPLOTLEGENDDATA_DESTROY )
{
   ImPlotLegendData* pOut = ( ImPlotLegendData* ) hb_parptr( 1 );
   ImPlotLegendData_destroy(pOut);
}

/* bool ImPlotLimits_Contains_PlotPoInt(ImPlotLimits* self,const ImPlotPoint p) */
HB_FUNC( IMPLOTLIMITS_CONTAINS_PLOTPOINT )
{
   ImPlotLimits* pOut = ( ImPlotLimits* ) hb_parptr( 1 );
   const ImPlotPoint p;
   bool ret = ImPlotLimits_Contains_PlotPoInt(pOut,p);
   hb_retl( ret );
}

/* bool ImPlotLimits_Contains_double(ImPlotLimits* self,double x,double y) */
HB_FUNC( IMPLOTLIMITS_CONTAINS_DOUBLE )
{
   ImPlotLimits* pOut = ( ImPlotLimits* ) hb_parptr( 1 );
   double x = hb_parnd( 2 );
   double y = hb_parnd( 3 );
   bool ret = ImPlotLimits_Contains_double(pOut,x,y);
   hb_retl( ret );
}

HB_FUNC( IMPLOTLIMITS_IMPLOTLIMITS_NIL )
{
   ImPlotLimits_ImPlotLimits_Nil();
}

HB_FUNC( IMPLOTLIMITS_IMPLOTLIMITS_DOUBLE )
{
   double x_min = hb_parnd( 1 );
   double x_max = hb_parnd( 2 );
   double y_min = hb_parnd( 3 );
   double y_max = hb_parnd( 4 );
   ImPlotLimits_ImPlotLimits_double(x_min,x_max,y_min,y_max);
}

/* void ImPlotLimits_Max(ImPlotPoint *pOut,ImPlotLimits* self) */
HB_FUNC( IMPLOTLIMITS_MAX )
{
   ImPlotPoint* pOutP = ( ImPlotPoint* ) hb_parptr( 1 );
   ImPlotLimits* pOut = ( ImPlotLimits* ) hb_parptr( 2 );
   ImPlotLimits_Max(pOutP,pOut);
}

/* void ImPlotLimits_Min(ImPlotPoint *pOut,ImPlotLimits* self) */
HB_FUNC( IMPLOTLIMITS_MIN )
{
   ImPlotPoint* pOutP = ( ImPlotPoint* ) hb_parptr( 1 );
   ImPlotLimits* pOut = ( ImPlotLimits* ) hb_parptr( 2 );
   ImPlotLimits_Min(pOutP,pOut);
}

/* void ImPlotLimits_destroy(ImPlotLimits* self) */
HB_FUNC( IMPLOTLIMITS_DESTROY )
{
   ImPlotLimits* pOut = ( ImPlotLimits* ) hb_parptr( 1 );
   ImPlotLimits_destroy(pOut);
}

HB_FUNC( IMPLOTNEXTITEMDATA_IMPLOTNEXTITEMDATA )
{
   ImPlotNextItemData_ImPlotNextItemData();
}

/* void ImPlotNextItemData_Reset(ImPlotNextItemData* self) */
HB_FUNC( IMPLOTNEXTITEMDATA_RESET )
{
   ImPlotNextItemData* pOut = ( ImPlotNextItemData* ) hb_parptr( 1 );
   ImPlotNextItemData_Reset(pOut);
}

/* void ImPlotNextItemData_destroy(ImPlotNextItemData* self) */
HB_FUNC( IMPLOTNEXTITEMDATA_DESTROY )
{
   ImPlotNextItemData* pOut = ( ImPlotNextItemData* ) hb_parptr( 1 );
   ImPlotNextItemData_destroy(pOut);
}

HB_FUNC( IMPLOTNEXTPLOTDATA_IMPLOTNEXTPLOTDATA )
{
   ImPlotNextPlotData_ImPlotNextPlotData();
}

/* void ImPlotNextPlotData_Reset(ImPlotNextPlotData* self) */
HB_FUNC( IMPLOTNEXTPLOTDATA_RESET )
{
   ImPlotNextPlotData* pOut = ( ImPlotNextPlotData* ) hb_parptr( 1 );
   ImPlotNextPlotData_Reset(pOut);
}

/* void ImPlotNextPlotData_destroy(ImPlotNextPlotData* self) */
HB_FUNC( IMPLOTNEXTPLOTDATA_DESTROY )
{
   ImPlotNextPlotData* pOut = ( ImPlotNextPlotData* ) hb_parptr( 1 );
   ImPlotNextPlotData_destroy(pOut);
}

/* bool ImPlotPlot_AllYInputLocked(ImPlotPlot* self) */
HB_FUNC( IMPLOTPLOT_ALLYINPUTLOCKED )
{
   ImPlotPlot* pOut = ( ImPlotPlot* ) hb_parptr( 1 );
   bool ret = ImPlotPlot_AllYInputLocked(pOut);
   hb_retl( ret );
}

/* bool ImPlotPlot_AnyYInputLocked(ImPlotPlot* self) */
HB_FUNC( IMPLOTPLOT_ANYYINPUTLOCKED )
{
   ImPlotPlot* pOut = ( ImPlotPlot* ) hb_parptr( 1 );
   bool ret = ImPlotPlot_AnyYInputLocked(pOut);
   hb_retl( ret );
}

HB_FUNC( IMPLOTPLOT_IMPLOTPLOT )
{
   ImPlotPlot_ImPlotPlot();
}

/* bool ImPlotPlot_IsInputLocked(ImPlotPlot* self) */
HB_FUNC( IMPLOTPLOT_ISINPUTLOCKED )
{
   ImPlotPlot* pOut = ( ImPlotPlot* ) hb_parptr( 1 );
   bool ret = ImPlotPlot_IsInputLocked(pOut);
   hb_retl( ret );
}

/* void ImPlotPlot_destroy(ImPlotPlot* self) */
HB_FUNC( IMPLOTPLOT_DESTROY )
{
   ImPlotPlot* pOut = ( ImPlotPlot* ) hb_parptr( 1 );
   ImPlotPlot_destroy(pOut);
}

/* int ImPlotPointArray_Size(ImPlotPointArray* self) */
/*
HB_FUNC( IMPLOTPOINTARRAY_SIZE )
{
   ImPlotPointArray* pOut = ( ImPlotPointArray* ) hb_parptr( 1 );
   int ret = ImPlotPointArray_Size(pOut);
   hb_retni( ret );
}
*/

HB_FUNC( IMPLOTPOINTERROR_IMPLOTPOINTERROR )
{
   double x = hb_parnd( 1 );
   double y = hb_parnd( 2 );
   double neg = hb_parnd( 3 );
   double pos = hb_parnd( 4 );
   ImPlotPointError_ImPlotPointError(x,y,neg,pos);
}

/* void ImPlotPointError_destroy(ImPlotPointError* self) */
HB_FUNC( IMPLOTPOINTERROR_DESTROY )
{
   ImPlotPointError* pOut = ( ImPlotPointError* ) hb_parptr( 1 );
   ImPlotPointError_destroy(pOut);
}

HB_FUNC( IMPLOTPOINT_IMPLOTPOINT_NIL )
{
   ImPlotPoint_ImPlotPoint_Nil();
}

HB_FUNC( IMPLOTPOINT_IMPLOTPOINT_DOUBLE )
{
   double _x = hb_parnd( 1 );
   double _y = hb_parnd( 2 );
   ImPlotPoint_ImPlotPoint_double(_x,_y);
}

HB_FUNC( IMPLOTPOINT_IMPLOTPOINT_VEC2 )
{
   PHB_ITEM pp = hb_param( 1, HB_IT_ARRAY );
   const ImVec2 p = ImVec2{ _paf( pp, 1 ), _paf( pp, 2 ) };
   ImPlotPoint_ImPlotPoint_Vec2(p);
}

/* void ImPlotPoint_destroy(ImPlotPoint* self) */
HB_FUNC( IMPLOTPOINT_DESTROY )
{
   ImPlotPoint* pOut = ( ImPlotPoint* ) hb_parptr( 1 );
   ImPlotPoint_destroy(pOut);
}

/* bool ImPlotRange_Contains(ImPlotRange* self,double value) */
HB_FUNC( IMPLOTRANGE_CONTAINS )
{
   ImPlotRange* pOut = ( ImPlotRange* ) hb_parptr( 1 );
   double value = hb_parnd( 2 );
   bool ret = ImPlotRange_Contains(pOut,value);
   hb_retl( ret );
}

HB_FUNC( IMPLOTRANGE_IMPLOTRANGE_NIL )
{
   ImPlotRange_ImPlotRange_Nil();
}

HB_FUNC( IMPLOTRANGE_IMPLOTRANGE_DOUBLE )
{
   double _min = hb_parnd( 1 );
   double _max = hb_parnd( 2 );
   ImPlotRange_ImPlotRange_double(_min,_max);
}

/* double ImPlotRange_Size(ImPlotRange* self) */
HB_FUNC( IMPLOTRANGE_SIZE )
{
   ImPlotRange* pOut = ( ImPlotRange* ) hb_parptr( 1 );
   double ret = ImPlotRange_Size(pOut);
   hb_retnd( ret );
}

/* void ImPlotRange_destroy(ImPlotRange* self) */
HB_FUNC( IMPLOTRANGE_DESTROY )
{
   ImPlotRange* pOut = ( ImPlotRange* ) hb_parptr( 1 );
   ImPlotRange_destroy(pOut);
}

HB_FUNC( IMPLOTSTYLE_IMPLOTSTYLE )
{
   ImPlotStyle_ImPlotStyle();
}

/* void ImPlotStyle_destroy(ImPlotStyle* self) */
HB_FUNC( IMPLOTSTYLE_DESTROY )
{
   ImPlotStyle* pOut = ( ImPlotStyle* ) hb_parptr( 1 );
   ImPlotStyle_destroy(pOut);
}

HB_FUNC( IMPLOTSUBPLOT_IMPLOTSUBPLOT )
{
   ImPlotSubplot_ImPlotSubplot();
}

/* void ImPlotSubplot_destroy(ImPlotSubplot* self) */
HB_FUNC( IMPLOTSUBPLOT_DESTROY )
{
   ImPlotSubplot* pOut = ( ImPlotSubplot* ) hb_parptr( 1 );
   ImPlotSubplot_destroy(pOut);
}

/* const ImPlotTick* ImPlotTickCollection_Append_PlotTick(ImPlotTickCollection* self,const ImPlotTick tick) */
/*
HB_FUNC( IMPLOTTICKCOLLECTION_APPEND_PLOTTICK )
{
   ImPlotTickCollection* pOut = ( ImPlotTickCollection* ) hb_parptr( 1 );
   const ImPlotTick tick;
   const ImPlotTick* ret = ImPlotTickCollection_Append_PlotTick(pOut,tick);
   hb_retptr( ( void * ) ret );
}
*/

/* const ImPlotTick* ImPlotTickCollection_Append_double(ImPlotTickCollection* self,double value,bool major,bool show_label,const char* fmt) */
HB_FUNC( IMPLOTTICKCOLLECTION_APPEND_DOUBLE )
{
   ImPlotTickCollection* pOut = ( ImPlotTickCollection* ) hb_parptr( 1 );
   double value = hb_parnd( 2 );
   bool major = hb_parl( 3 );
   bool show_label = hb_parl( 4 );
   const char* fmt = hb_parcx( 5 );
   const ImPlotTick* ret = ImPlotTickCollection_Append_double(pOut,value,major,show_label,fmt);
   hb_retptr( ( void * ) ret );
}

/* const char* ImPlotTickCollection_GetText(ImPlotTickCollection* self,int idx) */
HB_FUNC( IMPLOTTICKCOLLECTION_GETTEXT )
{
   ImPlotTickCollection* pOut = ( ImPlotTickCollection* ) hb_parptr( 1 );
   int idx = hb_parni( 2 );
   const char* ret = ImPlotTickCollection_GetText(pOut,idx);
   hb_retptr( ( void * ) ret );
}

HB_FUNC( IMPLOTTICKCOLLECTION_IMPLOTTICKCOLLECTION )
{
   ImPlotTickCollection_ImPlotTickCollection();
}

/* void ImPlotTickCollection_Reset(ImPlotTickCollection* self) */
HB_FUNC( IMPLOTTICKCOLLECTION_RESET )
{
   ImPlotTickCollection* pOut = ( ImPlotTickCollection* ) hb_parptr( 1 );
   ImPlotTickCollection_Reset(pOut);
}

/* void ImPlotTickCollection_destroy(ImPlotTickCollection* self) */
HB_FUNC( IMPLOTTICKCOLLECTION_DESTROY )
{
   ImPlotTickCollection* pOut = ( ImPlotTickCollection* ) hb_parptr( 1 );
   ImPlotTickCollection_destroy(pOut);
}

HB_FUNC( IMPLOTTICK_IMPLOTTICK )
{
   double value = hb_parnd( 1 );
   bool major = hb_parl( 2 );
   bool show_label = hb_parl( 3 );
   ImPlotTick_ImPlotTick(value,major,show_label);
}

/* void ImPlotTick_destroy(ImPlotTick* self) */
HB_FUNC( IMPLOTTICK_DESTROY )
{
   ImPlotTick* pOut = ( ImPlotTick* ) hb_parptr( 1 );
   ImPlotTick_destroy(pOut);
}

/* void ImPlotTime_FromDouble(ImPlotTime *pOut,double t) */
HB_FUNC( IMPLOTTIME_FROMDOUBLE )
{
   ImPlotTime* pOut;
   double t = hb_parnd( 2 );
   ImPlotTime_FromDouble(pOut,t);
}

HB_FUNC( IMPLOTTIME_IMPLOTTIME_NIL )
{
   ImPlotTime_ImPlotTime_Nil();
}

HB_FUNC( IMPLOTTIME_IMPLOTTIME_TIME_T )
{
   time_t s;
   int us = hb_parni( 2 );
   ImPlotTime_ImPlotTime_time_t(s,us);
}

/* void ImPlotTime_RollOver(ImPlotTime* self) */
HB_FUNC( IMPLOTTIME_ROLLOVER )
{
   ImPlotTime* pOut = ( ImPlotTime* ) hb_parptr( 1 );
   ImPlotTime_RollOver(pOut);
}

/* double ImPlotTime_ToDouble(ImPlotTime* self) */
HB_FUNC( IMPLOTTIME_TODOUBLE )
{
   ImPlotTime* pOut = ( ImPlotTime* ) hb_parptr( 1 );
   double ret = ImPlotTime_ToDouble(pOut);
   hb_retnd( ret );
}

/* void ImPlotTime_destroy(ImPlotTime* self) */
HB_FUNC( IMPLOTTIME_DESTROY )
{
   ImPlotTime* pOut = ( ImPlotTime* ) hb_parptr( 1 );
   ImPlotTime_destroy(pOut);
}

/* ImPlotColormap ImPlot_AddColormap_Vec4Ptr(const char* name,const ImVec4* cols,int size,bool qual) */
HB_FUNC( IMPLOT_ADDCOLORMAP_VEC4PTR )
{
   const char* name = hb_parcx( 1 );
   const ImVec4* cols = ( const ImVec4* ) hb_parptr( 2 );
   int size = hb_parni( 3 );
   bool qual = hb_parldef( 4, 1 );
   ImPlotColormap ret = ImPlot_AddColormap_Vec4Ptr(name,cols,size,qual);
   hb_retni( ( int ) ret );
}

/* ImPlotColormap ImPlot_AddColormap_U32Ptr(const char* name,const ImU32* cols,int size,bool qual) */
HB_FUNC( IMPLOT_ADDCOLORMAP_U32PTR )
{
   const char* name = hb_parcx( 1 );
   const ImU32* cols = ( const ImU32* ) hb_parptr( 2 );
   int size = hb_parni( 3 );
   bool qual = hb_parldef( 4, 1 );
   ImPlotColormap ret = ImPlot_AddColormap_U32Ptr(name,cols,size,qual);
   hb_retni( ( int ) ret );
}

/* void ImPlot_AddTextCentered(ImDrawList* DrawList,ImVec2 top_center,ImU32 col,const char* text_begin,const char* text_end) */
HB_FUNC( IMPLOT_ADDTEXTCENTERED )
{
   ImDrawList* DrawList = ( ImDrawList* ) hb_parptr( 1 );
   PHB_ITEM ptop_center = hb_param( 2, HB_IT_ARRAY );
   ImVec2 top_center = ImVec2{ _paf( ptop_center, 1 ), _paf( ptop_center, 2 ) };
   ImU32 col = ( HB_U32 ) hb_parnl( 3 );
   const char* text_begin = hb_parcx( 4 );
   const char* text_end = hb_parcx( 5 );
   ImPlot_AddTextCentered(DrawList,top_center,col,text_begin,text_end);
}

/* void ImPlot_AddTextVertical(ImDrawList* DrawList,ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end) */
HB_FUNC( IMPLOT_ADDTEXTVERTICAL )
{
   ImDrawList* DrawList = ( ImDrawList* ) hb_parptr( 1 );
   PHB_ITEM ppos = hb_param( 2, HB_IT_ARRAY );
   ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   ImU32 col = ( HB_U32 ) hb_parnl( 3 );
   const char* text_begin = hb_parcx( 4 );
   const char* text_end = hb_parcx( 5 );
   ImPlot_AddTextVertical(DrawList,pos,col,text_begin,text_end);
}

/* void ImPlot_AddTicksCustom(const double* values,const char* const labels[],int n,ImPlotTickCollection* ticks,const char* fmt) */
HB_FUNC( IMPLOT_ADDTICKSCUSTOM )
{
   const double* values = ( const double* ) hb_parptr( 1 );
   const char* const labels[] = { 0 };
   int n = hb_parni( 3 );
   ImPlotTickCollection* ticks = ( ImPlotTickCollection* ) hb_parptr( 4 );
   const char* fmt = hb_parcx( 5 );
   ImPlot_AddTicksCustom(values,labels,n,ticks,fmt);
}

/* void ImPlot_AddTicksDefault(const ImPlotRange range,float pix,ImPlotOrientation orn,ImPlotTickCollection* ticks,const char* fmt) */
HB_FUNC( IMPLOT_ADDTICKSDEFAULT )
{
   const ImPlotRange range;
   float pix = ( float ) hb_parnd( 2 );
   ImPlotOrientation orn = ( ImPlotOrientation ) hb_parni( 3 );
   ImPlotTickCollection* ticks = ( ImPlotTickCollection* ) hb_parptr( 4 );
   const char* fmt = hb_parcx( 5 );
   ImPlot_AddTicksDefault(range,pix,orn,ticks,fmt);
}

/* void ImPlot_AddTicksLogarithmic(const ImPlotRange range,float pix,ImPlotOrientation orn,ImPlotTickCollection* ticks,const char* fmt) */
HB_FUNC( IMPLOT_ADDTICKSLOGARITHMIC )
{
   const ImPlotRange range;
   float pix = ( float ) hb_parnd( 2 );
   ImPlotOrientation orn = ( ImPlotOrientation ) hb_parni( 3 );
   ImPlotTickCollection* ticks = ( ImPlotTickCollection* ) hb_parptr( 4 );
   const char* fmt = hb_parcx( 5 );
   ImPlot_AddTicksLogarithmic(range,pix,orn,ticks,fmt);
}

/* void ImPlot_AddTicksTime(const ImPlotRange range,float plot_width,ImPlotTickCollection* ticks) */
HB_FUNC( IMPLOT_ADDTICKSTIME )
{
   const ImPlotRange range;
   float plot_width = ( float ) hb_parnd( 2 );
   ImPlotTickCollection* ticks = ( ImPlotTickCollection* ) hb_parptr( 3 );
   ImPlot_AddTicksTime(range,plot_width,ticks);
}

/* void ImPlot_AddTime(ImPlotTime *pOut,const ImPlotTime t,ImPlotTimeUnit unit,int count) */
HB_FUNC( IMPLOT_ADDTIME )
{
   ImPlotTime* pOut;
   const ImPlotTime t;
   ImPlotTimeUnit unit = ( ImPlotTimeUnit ) hb_parni( 3 );
   int count = hb_parni( 4 );
   ImPlot_AddTime(pOut,t,unit,count);
}

/* void ImPlot_Annotate_Str(double x,double y,const ImVec2 pix_offset,const char* fmt,...) */
HB_FUNC( IMPLOT_ANNOTATE_STR )
{
   double x = hb_parnd( 1 );
   double y = hb_parnd( 2 );
   PHB_ITEM ppix_offset = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 pix_offset = ImVec2{ _paf( ppix_offset, 1 ), _paf( ppix_offset, 2 ) };
   const char* fmt = hb_parcx( 4 );
   /* ... ...; */
   ImPlot_Annotate_Str(x,y,pix_offset,fmt,NULL);
}

/* void ImPlot_Annotate_Vec4(double x,double y,const ImVec2 pix_offset,const ImVec4 color,const char* fmt,...) */
HB_FUNC( IMPLOT_ANNOTATE_VEC4 )
{
   double x = hb_parnd( 1 );
   double y = hb_parnd( 2 );
   PHB_ITEM ppix_offset = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 pix_offset = ImVec2{ _paf( ppix_offset, 1 ), _paf( ppix_offset, 2 ) };
   PHB_ITEM pcolor = hb_param( 4, HB_IT_ARRAY );
   const ImVec4 color = ImVec4{ _paf( pcolor, 1 ), _paf( pcolor, 2 ), _paf( pcolor, 3 ), _paf( pcolor, 4 ) };
   const char* fmt = hb_parcx( 5 );
   /* ... ...; */
   ImPlot_Annotate_Vec4(x,y,pix_offset,color,fmt,NULL);
}

/* void ImPlot_AnnotateClamped_Str(double x,double y,const ImVec2 pix_offset,const char* fmt,...) */
HB_FUNC( IMPLOT_ANNOTATECLAMPED_STR )
{
   double x = hb_parnd( 1 );
   double y = hb_parnd( 2 );
   PHB_ITEM ppix_offset = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 pix_offset = ImVec2{ _paf( ppix_offset, 1 ), _paf( ppix_offset, 2 ) };
   const char* fmt = hb_parcx( 4 );
   /* ... ...; */
   ImPlot_AnnotateClamped_Str(x,y,pix_offset,fmt,NULL);
}

/* void ImPlot_AnnotateClamped_Vec4(double x,double y,const ImVec2 pix_offset,const ImVec4 color,const char* fmt,...) */
HB_FUNC( IMPLOT_ANNOTATECLAMPED_VEC4 )
{
   double x = hb_parnd( 1 );
   double y = hb_parnd( 2 );
   PHB_ITEM ppix_offset = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 pix_offset = ImVec2{ _paf( ppix_offset, 1 ), _paf( ppix_offset, 2 ) };
   PHB_ITEM pcolor = hb_param( 4, HB_IT_ARRAY );
   const ImVec4 color = ImVec4{ _paf( pcolor, 1 ), _paf( pcolor, 2 ), _paf( pcolor, 3 ), _paf( pcolor, 4 ) };
   const char* fmt = hb_parcx( 5 );
   /* ... ...; */
   ImPlot_AnnotateClamped_Vec4(x,y,pix_offset,color,fmt,NULL);
}

/* void ImPlot_AnnotateClampedV_Str(double x,double y,const ImVec2 pix_offset,const char* fmt,va_list args) */
HB_FUNC( IMPLOT_ANNOTATECLAMPEDV_STR )
{
   double x = hb_parnd( 1 );
   double y = hb_parnd( 2 );
   PHB_ITEM ppix_offset = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 pix_offset = ImVec2{ _paf( ppix_offset, 1 ), _paf( ppix_offset, 2 ) };
   const char* fmt = hb_parcx( 4 );
   /* unsupported */
}

/* void ImPlot_AnnotateV_Str(double x,double y,const ImVec2 pix_offset,const char* fmt,va_list args) */
HB_FUNC( IMPLOT_ANNOTATEV_STR )
{
   double x = hb_parnd( 1 );
   double y = hb_parnd( 2 );
   PHB_ITEM ppix_offset = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 pix_offset = ImVec2{ _paf( ppix_offset, 1 ), _paf( ppix_offset, 2 ) };
   const char* fmt = hb_parcx( 4 );
   /* unsupported */
}

/* bool ImPlot_BeginAlignedPlots(const char* group_id,ImPlotOrientation orientation) */
HB_FUNC( IMPLOT_BEGINALIGNEDPLOTS )
{
   const char* group_id = hb_parcx( 1 );
   ImPlotOrientation orientation = ( ImPlotOrientation ) hb_parni( 2 );
   bool ret = ImPlot_BeginAlignedPlots(group_id,orientation);
   hb_retl( ret );
}

/* bool ImPlot_BeginDragDropSource(ImGuiKeyModFlags key_mods,ImGuiDragDropFlags flags) */
HB_FUNC( IMPLOT_BEGINDRAGDROPSOURCE )
{
   ImGuiKeyModFlags key_mods;
   ImGuiDragDropFlags flags;
   bool ret = ImPlot_BeginDragDropSource(key_mods,flags);
   hb_retl( ret );
}

/* bool ImPlot_BeginDragDropSourceItem(const char* label_id,ImGuiDragDropFlags flags) */
HB_FUNC( IMPLOT_BEGINDRAGDROPSOURCEITEM )
{
   const char* label_id = hb_parcx( 1 );
   ImGuiDragDropFlags flags;
   bool ret = ImPlot_BeginDragDropSourceItem(label_id,flags);
   hb_retl( ret );
}

/* bool ImPlot_BeginDragDropSourceX(ImGuiKeyModFlags key_mods,ImGuiDragDropFlags flags) */
HB_FUNC( IMPLOT_BEGINDRAGDROPSOURCEX )
{
   ImGuiKeyModFlags key_mods;
   ImGuiDragDropFlags flags;
   bool ret = ImPlot_BeginDragDropSourceX(key_mods,flags);
   hb_retl( ret );
}

/* bool ImPlot_BeginDragDropSourceY(ImPlotYAxis axis,ImGuiKeyModFlags key_mods,ImGuiDragDropFlags flags) */
HB_FUNC( IMPLOT_BEGINDRAGDROPSOURCEY )
{
   ImPlotYAxis axis = ( ImPlotYAxis ) hb_parni( 1 );
   ImGuiKeyModFlags key_mods;
   ImGuiDragDropFlags flags;
   bool ret = ImPlot_BeginDragDropSourceY(axis,key_mods,flags);
   hb_retl( ret );
}

/* bool ImPlot_BeginDragDropTarget() */
HB_FUNC( IMPLOT_BEGINDRAGDROPTARGET )
{
   bool ret = ImPlot_BeginDragDropTarget();
   hb_retl( ret );
}

/* bool ImPlot_BeginDragDropTargetLegend() */
HB_FUNC( IMPLOT_BEGINDRAGDROPTARGETLEGEND )
{
   bool ret = ImPlot_BeginDragDropTargetLegend();
   hb_retl( ret );
}

/* bool ImPlot_BeginDragDropTargetX() */
HB_FUNC( IMPLOT_BEGINDRAGDROPTARGETX )
{
   bool ret = ImPlot_BeginDragDropTargetX();
   hb_retl( ret );
}

/* bool ImPlot_BeginDragDropTargetY(ImPlotYAxis axis) */
HB_FUNC( IMPLOT_BEGINDRAGDROPTARGETY )
{
   ImPlotYAxis axis = ( ImPlotYAxis ) hb_parni( 1 );
   bool ret = ImPlot_BeginDragDropTargetY(axis);
   hb_retl( ret );
}

/* bool ImPlot_BeginItem(const char* label_id,ImPlotCol recolor_from) */
HB_FUNC( IMPLOT_BEGINITEM )
{
   const char* label_id = hb_parcx( 1 );
   ImPlotCol recolor_from = ( ImPlotCol ) hb_parni( 2 );
   bool ret = ImPlot_BeginItem(label_id,recolor_from);
   hb_retl( ret );
}

/* bool ImPlot_BeginLegendPopup(const char* label_id,ImGuiMouseButton mouse_button) */
HB_FUNC( IMPLOT_BEGINLEGENDPOPUP )
{
   const char* label_id = hb_parcx( 1 );
   ImGuiMouseButton mouse_button;
   bool ret = ImPlot_BeginLegendPopup(label_id,mouse_button);
   hb_retl( ret );
}

/* bool ImPlot_BeginPlot(const char* title_id,const char* x_label,const char* y_label,const ImVec2 size,ImPlotFlags flags,ImPlotAxisFlags x_flags,ImPlotAxisFlags y_flags,ImPlotAxisFlags y2_flags,ImPlotAxisFlags y3_flags,const char* y2_label,const char* y3_label) */
HB_FUNC( IMPLOT_BEGINPLOT )
{
   const char* title_id = hb_parcx( 1 );
   const char* x_label = hb_parcx( 2 );
   const char* y_label = hb_parcx( 3 );
   PHB_ITEM psize = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   ImPlotFlags flags = ( ImPlotFlags ) hb_parni( 5 );
   ImPlotAxisFlags x_flags = ( ImPlotAxisFlags ) hb_parni( 6 );
   ImPlotAxisFlags y_flags = ( ImPlotAxisFlags ) hb_parni( 7 );
   ImPlotAxisFlags y2_flags = ( ImPlotAxisFlags ) hb_parni( 8 );
   ImPlotAxisFlags y3_flags = ( ImPlotAxisFlags ) hb_parni( 9 );
   const char* y2_label = hb_parcx( 10 );
   const char* y3_label = hb_parcx( 11 );
   bool ret = ImPlot_BeginPlot(title_id,x_label,y_label,size,flags,x_flags,y_flags,y2_flags,y3_flags,y2_label,y3_label);
   hb_retl( ret );
}

/* bool ImPlot_BeginSubplots(const char* title_id,int rows,int cols,const ImVec2 size,ImPlotSubplotFlags flags,float* row_ratios,float* col_ratios) */
HB_FUNC( IMPLOT_BEGINSUBPLOTS )
{
   const char* title_id = hb_parcx( 1 );
   int rows = hb_parni( 2 );
   int cols = hb_parni( 3 );
   PHB_ITEM psize = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   ImPlotSubplotFlags flags = ( ImPlotSubplotFlags ) hb_parni( 5 );
   float /* @ */ _row_ratios = ( float ) hb_parnd( 6 );
   float * row_ratios = &_row_ratios;
   float /* @ */ _col_ratios = ( float ) hb_parnd( 7 );
   float * col_ratios = &_col_ratios;
   bool ret = ImPlot_BeginSubplots(title_id,rows,cols,size,flags,row_ratios,col_ratios);
   hb_itemPutND( hb_paramError( 6 ), ( double ) _row_ratios );
   hb_itemPutND( hb_paramError( 7 ), ( double ) _col_ratios );
   hb_retl( ret );
}

/* void ImPlot_BustColorCache(const char* plot_title_id) */
HB_FUNC( IMPLOT_BUSTCOLORCACHE )
{
   const char* plot_title_id = hb_parcx( 1 );
   ImPlot_BustColorCache(plot_title_id);
}

/* void ImPlot_BustItemCache() */
HB_FUNC( IMPLOT_BUSTITEMCACHE )
{
   ImPlot_BustItemCache();
}

/* void ImPlot_BustPlotCache() */
HB_FUNC( IMPLOT_BUSTPLOTCACHE )
{
   ImPlot_BustPlotCache();
}

/* ImU32 ImPlot_CalcHoverColor(ImU32 col) */
HB_FUNC( IMPLOT_CALCHOVERCOLOR )
{
   ImU32 col = ( HB_U32 ) hb_parnl( 1 );
   ImU32 ret = ImPlot_CalcHoverColor(col);
   hb_retnl( ( HB_LONG ) ret );
}

/* void ImPlot_CalcLegendSize(ImVec2 *pOut,ImPlotItemGroup* items,const ImVec2 pad,const ImVec2 spacing,ImPlotOrientation orientation) */
HB_FUNC( IMPLOT_CALCLEGENDSIZE )
{
   ImVec2* pOut;
   ImPlotItemGroup* items = ( ImPlotItemGroup* ) hb_parptr( 2 );
   PHB_ITEM ppad = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 pad = ImVec2{ _paf( ppad, 1 ), _paf( ppad, 2 ) };
   PHB_ITEM pspacing = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 spacing = ImVec2{ _paf( pspacing, 1 ), _paf( pspacing, 2 ) };
   ImPlotOrientation orientation = ( ImPlotOrientation ) hb_parni( 5 );
   ImPlot_CalcLegendSize(pOut,items,pad,spacing,orientation);
}

/* ImU32 ImPlot_CalcTextColor_Vec4(const ImVec4 bg) */
HB_FUNC( IMPLOT_CALCTEXTCOLOR_VEC4 )
{
   PHB_ITEM pbg = hb_param( 1, HB_IT_ARRAY );
   const ImVec4 bg = ImVec4{ _paf( pbg, 1 ), _paf( pbg, 2 ), _paf( pbg, 3 ), _paf( pbg, 4 ) };
   ImU32 ret = ImPlot_CalcTextColor_Vec4(bg);
   hb_retnl( ( HB_LONG ) ret );
}

/* ImU32 ImPlot_CalcTextColor_U32(ImU32 bg) */
HB_FUNC( IMPLOT_CALCTEXTCOLOR_U32 )
{
   ImU32 bg = ( HB_U32 ) hb_parnl( 1 );
   ImU32 ret = ImPlot_CalcTextColor_U32(bg);
   hb_retnl( ( HB_LONG ) ret );
}

/* void ImPlot_CalcTextSizeVertical(ImVec2 *pOut,const char* text) */
HB_FUNC( IMPLOT_CALCTEXTSIZEVERTICAL )
{
   ImVec2* pOut;
   const char* text = hb_parcx( 2 );
   ImPlot_CalcTextSizeVertical(pOut,text);
}

/* void ImPlot_CalculateBins_FloatPtr(const float* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out) */
HB_FUNC( IMPLOT_CALCULATEBINS_FLOATPTR )
{
   const float* values = ( const float* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImPlotBin meth = ( ImPlotBin ) hb_parni( 3 );
   const ImPlotRange range;
   int /* @ */ _bins_out = hb_parni( 5 );
   int * bins_out = &_bins_out;
   double /* @ */ _width_out = hb_parnd( 6 );
   double * width_out = &_width_out;
   ImPlot_CalculateBins_FloatPtr(values,count,meth,range,bins_out,width_out);
   hb_itemPutNI( hb_paramError( 5 ), _bins_out );
   hb_itemPutND( hb_paramError( 6 ), _width_out );
}

/* void ImPlot_CalculateBins_doublePtr(const double* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out) */
HB_FUNC( IMPLOT_CALCULATEBINS_DOUBLEPTR )
{
   const double* values = ( const double* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImPlotBin meth = ( ImPlotBin ) hb_parni( 3 );
   const ImPlotRange range;
   int /* @ */ _bins_out = hb_parni( 5 );
   int * bins_out = &_bins_out;
   double /* @ */ _width_out = hb_parnd( 6 );
   double * width_out = &_width_out;
   ImPlot_CalculateBins_doublePtr(values,count,meth,range,bins_out,width_out);
   hb_itemPutNI( hb_paramError( 5 ), _bins_out );
   hb_itemPutND( hb_paramError( 6 ), _width_out );
}

/* void ImPlot_CalculateBins_S8Ptr(const ImS8* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out) */
HB_FUNC( IMPLOT_CALCULATEBINS_S8PTR )
{
   const ImS8* values = ( const ImS8* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImPlotBin meth = ( ImPlotBin ) hb_parni( 3 );
   const ImPlotRange range;
   int /* @ */ _bins_out = hb_parni( 5 );
   int * bins_out = &_bins_out;
   double /* @ */ _width_out = hb_parnd( 6 );
   double * width_out = &_width_out;
   ImPlot_CalculateBins_S8Ptr(values,count,meth,range,bins_out,width_out);
   hb_itemPutNI( hb_paramError( 5 ), _bins_out );
   hb_itemPutND( hb_paramError( 6 ), _width_out );
}

/* void ImPlot_CalculateBins_U8Ptr(const ImU8* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out) */
HB_FUNC( IMPLOT_CALCULATEBINS_U8PTR )
{
   const ImU8* values = ( const ImU8* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImPlotBin meth = ( ImPlotBin ) hb_parni( 3 );
   const ImPlotRange range;
   int /* @ */ _bins_out = hb_parni( 5 );
   int * bins_out = &_bins_out;
   double /* @ */ _width_out = hb_parnd( 6 );
   double * width_out = &_width_out;
   ImPlot_CalculateBins_U8Ptr(values,count,meth,range,bins_out,width_out);
   hb_itemPutNI( hb_paramError( 5 ), _bins_out );
   hb_itemPutND( hb_paramError( 6 ), _width_out );
}

/* void ImPlot_CalculateBins_S16Ptr(const ImS16* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out) */
HB_FUNC( IMPLOT_CALCULATEBINS_S16PTR )
{
   const ImS16* values = ( const ImS16* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImPlotBin meth = ( ImPlotBin ) hb_parni( 3 );
   const ImPlotRange range;
   int /* @ */ _bins_out = hb_parni( 5 );
   int * bins_out = &_bins_out;
   double /* @ */ _width_out = hb_parnd( 6 );
   double * width_out = &_width_out;
   ImPlot_CalculateBins_S16Ptr(values,count,meth,range,bins_out,width_out);
   hb_itemPutNI( hb_paramError( 5 ), _bins_out );
   hb_itemPutND( hb_paramError( 6 ), _width_out );
}

/* void ImPlot_CalculateBins_U16Ptr(const ImU16* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out) */
HB_FUNC( IMPLOT_CALCULATEBINS_U16PTR )
{
   const ImU16* values = ( const ImU16* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImPlotBin meth = ( ImPlotBin ) hb_parni( 3 );
   const ImPlotRange range;
   int /* @ */ _bins_out = hb_parni( 5 );
   int * bins_out = &_bins_out;
   double /* @ */ _width_out = hb_parnd( 6 );
   double * width_out = &_width_out;
   ImPlot_CalculateBins_U16Ptr(values,count,meth,range,bins_out,width_out);
   hb_itemPutNI( hb_paramError( 5 ), _bins_out );
   hb_itemPutND( hb_paramError( 6 ), _width_out );
}

/* void ImPlot_CalculateBins_S32Ptr(const ImS32* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out) */
HB_FUNC( IMPLOT_CALCULATEBINS_S32PTR )
{
   const ImS32* values = ( const ImS32* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImPlotBin meth = ( ImPlotBin ) hb_parni( 3 );
   const ImPlotRange range;
   int /* @ */ _bins_out = hb_parni( 5 );
   int * bins_out = &_bins_out;
   double /* @ */ _width_out = hb_parnd( 6 );
   double * width_out = &_width_out;
   ImPlot_CalculateBins_S32Ptr(values,count,meth,range,bins_out,width_out);
   hb_itemPutNI( hb_paramError( 5 ), _bins_out );
   hb_itemPutND( hb_paramError( 6 ), _width_out );
}

/* void ImPlot_CalculateBins_U32Ptr(const ImU32* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out) */
HB_FUNC( IMPLOT_CALCULATEBINS_U32PTR )
{
   const ImU32* values = ( const ImU32* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImPlotBin meth = ( ImPlotBin ) hb_parni( 3 );
   const ImPlotRange range;
   int /* @ */ _bins_out = hb_parni( 5 );
   int * bins_out = &_bins_out;
   double /* @ */ _width_out = hb_parnd( 6 );
   double * width_out = &_width_out;
   ImPlot_CalculateBins_U32Ptr(values,count,meth,range,bins_out,width_out);
   hb_itemPutNI( hb_paramError( 5 ), _bins_out );
   hb_itemPutND( hb_paramError( 6 ), _width_out );
}

/* void ImPlot_CalculateBins_S64Ptr(const ImS64* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out) */
HB_FUNC( IMPLOT_CALCULATEBINS_S64PTR )
{
   const ImS64* values = ( const ImS64* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImPlotBin meth = ( ImPlotBin ) hb_parni( 3 );
   const ImPlotRange range;
   int /* @ */ _bins_out = hb_parni( 5 );
   int * bins_out = &_bins_out;
   double /* @ */ _width_out = hb_parnd( 6 );
   double * width_out = &_width_out;
   ImPlot_CalculateBins_S64Ptr(values,count,meth,range,bins_out,width_out);
   hb_itemPutNI( hb_paramError( 5 ), _bins_out );
   hb_itemPutND( hb_paramError( 6 ), _width_out );
}

/* void ImPlot_CalculateBins_U64Ptr(const ImU64* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out) */
HB_FUNC( IMPLOT_CALCULATEBINS_U64PTR )
{
   const ImU64* values = ( const ImU64* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImPlotBin meth = ( ImPlotBin ) hb_parni( 3 );
   const ImPlotRange range;
   int /* @ */ _bins_out = hb_parni( 5 );
   int * bins_out = &_bins_out;
   double /* @ */ _width_out = hb_parnd( 6 );
   double * width_out = &_width_out;
   ImPlot_CalculateBins_U64Ptr(values,count,meth,range,bins_out,width_out);
   hb_itemPutNI( hb_paramError( 5 ), _bins_out );
   hb_itemPutND( hb_paramError( 6 ), _width_out );
}

/* void ImPlot_CeilTime(ImPlotTime *pOut,const ImPlotTime t,ImPlotTimeUnit unit) */
HB_FUNC( IMPLOT_CEILTIME )
{
   ImPlotTime* pOut;
   const ImPlotTime t;
   ImPlotTimeUnit unit = ( ImPlotTimeUnit ) hb_parni( 3 );
   ImPlot_CeilTime(pOut,t,unit);
}

/* void ImPlot_ClampLabelPos(ImVec2 *pOut,ImVec2 pos,const ImVec2 size,const ImVec2 Min,const ImVec2 Max) */
HB_FUNC( IMPLOT_CLAMPLABELPOS )
{
   ImVec2* pOut;
   PHB_ITEM ppos = hb_param( 2, HB_IT_ARRAY );
   ImVec2 pos = ImVec2{ _paf( ppos, 1 ), _paf( ppos, 2 ) };
   PHB_ITEM psize = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   PHB_ITEM pMin = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 Min = ImVec2{ _paf( pMin, 1 ), _paf( pMin, 2 ) };
   PHB_ITEM pMax = hb_param( 5, HB_IT_ARRAY );
   const ImVec2 Max = ImVec2{ _paf( pMax, 1 ), _paf( pMax, 2 ) };
   ImPlot_ClampLabelPos(pOut,pos,size,Min,Max);
}

/* bool ImPlot_ColormapButton(const char* label,const ImVec2 size,ImPlotColormap cmap) */
HB_FUNC( IMPLOT_COLORMAPBUTTON )
{
   const char* label = hb_parcx( 1 );
   PHB_ITEM psize = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 3 );
   bool ret = ImPlot_ColormapButton(label,size,cmap);
   hb_retl( ret );
}

/* void ImPlot_ColormapIcon(ImPlotColormap cmap) */
HB_FUNC( IMPLOT_COLORMAPICON )
{
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 1 );
   ImPlot_ColormapIcon(cmap);
}

/* void ImPlot_ColormapScale(const char* label,double scale_min,double scale_max,const ImVec2 size,ImPlotColormap cmap,const char* fmt) */
HB_FUNC( IMPLOT_COLORMAPSCALE )
{
   const char* label = hb_parcx( 1 );
   double scale_min = hb_parnd( 2 );
   double scale_max = hb_parnd( 3 );
   PHB_ITEM psize = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 5 );
   const char* fmt = hb_parcx( 6 );
   ImPlot_ColormapScale(label,scale_min,scale_max,size,cmap,fmt);
}

/* bool ImPlot_ColormapSlider(const char* label,float* t,ImVec4* out,const char* format,ImPlotColormap cmap) */
HB_FUNC( IMPLOT_COLORMAPSLIDER )
{
   const char* label = hb_parcx( 1 );
   float /* @ */ _t = ( float ) hb_parnd( 2 );
   float * t = &_t;
   ImVec4* out = ( ImVec4* ) hb_parptr( 3 );
   const char* format = hb_parcx( 4 );
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 5 );
   bool ret = ImPlot_ColormapSlider(label,t,out,format,cmap);
   hb_itemPutND( hb_paramError( 2 ), ( double ) _t );
   hb_retl( ret );
}

/* void ImPlot_CombineDateTime(ImPlotTime *pOut,const ImPlotTime date_part,const ImPlotTime time_part) */
HB_FUNC( IMPLOT_COMBINEDATETIME )
{
   ImPlotTime* pOut;
   const ImPlotTime date_part;
   const ImPlotTime time_part;
   ImPlot_CombineDateTime(pOut,date_part,time_part);
}

/* ImPlotContext* ImPlot_CreateContext() */
HB_FUNC( IMPLOT_CREATECONTEXT )
{
   ImPlotContext* ret = ImPlot_CreateContext();
   hb_retptr( ( void * ) ret );
}

/* void ImPlot_DestroyContext(ImPlotContext* ctx) */
HB_FUNC( IMPLOT_DESTROYCONTEXT )
{
   ImPlotContext* ctx = ( ImPlotContext* ) hb_parptr( 1 );
   ImPlot_DestroyContext(ctx);
}

/* bool ImPlot_DragLineX(const char* id,double* x_value,bool show_label,const ImVec4 col,float thickness) */
HB_FUNC( IMPLOT_DRAGLINEX )
{
   const char* id = hb_parcx( 1 );
   double /* @ */ _x_value = hb_parnd( 2 );
   double * x_value = &_x_value;
   bool show_label = hb_parldef( 3, 1 );
   PHB_ITEM pcol = hb_param( 4, HB_IT_ARRAY );
   const ImVec4 col = ImVec4{ _paf( pcol, 1 ), _paf( pcol, 2 ), _paf( pcol, 3 ), _paf( pcol, 4 ) };
   float thickness = ( float ) hb_parnd( 5 );
   bool ret = ImPlot_DragLineX(id,x_value,show_label,col,thickness);
   hb_itemPutND( hb_paramError( 2 ), _x_value );
   hb_retl( ret );
}

/* bool ImPlot_DragLineY(const char* id,double* y_value,bool show_label,const ImVec4 col,float thickness) */
HB_FUNC( IMPLOT_DRAGLINEY )
{
   const char* id = hb_parcx( 1 );
   double /* @ */ _y_value = hb_parnd( 2 );
   double * y_value = &_y_value;
   bool show_label = hb_parldef( 3, 1 );
   PHB_ITEM pcol = hb_param( 4, HB_IT_ARRAY );
   const ImVec4 col = ImVec4{ _paf( pcol, 1 ), _paf( pcol, 2 ), _paf( pcol, 3 ), _paf( pcol, 4 ) };
   float thickness = ( float ) hb_parnd( 5 );
   bool ret = ImPlot_DragLineY(id,y_value,show_label,col,thickness);
   hb_itemPutND( hb_paramError( 2 ), _y_value );
   hb_retl( ret );
}

/* bool ImPlot_DragPoint(const char* id,double* x,double* y,bool show_label,const ImVec4 col,float radius) */
HB_FUNC( IMPLOT_DRAGPOINT )
{
   const char* id = hb_parcx( 1 );
   double /* @ */ _x = hb_parnd( 2 );
   double * x = &_x;
   double /* @ */ _y = hb_parnd( 3 );
   double * y = &_y;
   bool show_label = hb_parldef( 4, 1 );
   PHB_ITEM pcol = hb_param( 5, HB_IT_ARRAY );
   const ImVec4 col = ImVec4{ _paf( pcol, 1 ), _paf( pcol, 2 ), _paf( pcol, 3 ), _paf( pcol, 4 ) };
   float radius = ( float ) hb_parnd( 6 );
   bool ret = ImPlot_DragPoint(id,x,y,show_label,col,radius);
   hb_itemPutND( hb_paramError( 2 ), _x );
   hb_itemPutND( hb_paramError( 3 ), _y );
   hb_retl( ret );
}

/* void ImPlot_EndAlignedPlots() */
HB_FUNC( IMPLOT_ENDALIGNEDPLOTS )
{
   ImPlot_EndAlignedPlots();
}

/* void ImPlot_EndDragDropSource() */
HB_FUNC( IMPLOT_ENDDRAGDROPSOURCE )
{
   ImPlot_EndDragDropSource();
}

/* void ImPlot_EndDragDropTarget() */
HB_FUNC( IMPLOT_ENDDRAGDROPTARGET )
{
   ImPlot_EndDragDropTarget();
}

/* void ImPlot_EndItem() */
HB_FUNC( IMPLOT_ENDITEM )
{
   ImPlot_EndItem();
}

/* void ImPlot_EndLegendPopup() */
HB_FUNC( IMPLOT_ENDLEGENDPOPUP )
{
   ImPlot_EndLegendPopup();
}

/* void ImPlot_EndPlot() */
HB_FUNC( IMPLOT_ENDPLOT )
{
   ImPlot_EndPlot();
}

/* void ImPlot_EndSubplots() */
HB_FUNC( IMPLOT_ENDSUBPLOTS )
{
   ImPlot_EndSubplots();
}

/* void ImPlot_FillRange_Vector_FloatPtr(ImVector_float* buffer,int n,float vmin,float vmax) */
HB_FUNC( IMPLOT_FILLRANGE_VECTOR_FLOATPTR )
{
   ImVector_float* buffer = ( ImVector_float* ) hb_parptr( 1 );
   int n = hb_parni( 2 );
   float vmin = ( float ) hb_parnd( 3 );
   float vmax = ( float ) hb_parnd( 4 );
   ImPlot_FillRange_Vector_FloatPtr(buffer,n,vmin,vmax);
}

/* void ImPlot_FillRange_Vector_doublePtr(ImVector_double* buffer,int n,double vmin,double vmax) */
HB_FUNC( IMPLOT_FILLRANGE_VECTOR_DOUBLEPTR )
{
   ImVector_double* buffer = ( ImVector_double* ) hb_parptr( 1 );
   int n = hb_parni( 2 );
   double vmin = hb_parnd( 3 );
   double vmax = hb_parnd( 4 );
   ImPlot_FillRange_Vector_doublePtr(buffer,n,vmin,vmax);
}

/* void ImPlot_FillRange_Vector_S8Ptr(ImVector_ImS8* buffer,int n,ImS8 vmin,ImS8 vmax) */
HB_FUNC( IMPLOT_FILLRANGE_VECTOR_S8PTR )
{
   ImVector_ImS8* buffer = ( ImVector_ImS8* ) hb_parptr( 1 );
   int n = hb_parni( 2 );
   ImS8 vmin;
   ImS8 vmax;
   ImPlot_FillRange_Vector_S8Ptr(buffer,n,vmin,vmax);
}

/* void ImPlot_FillRange_Vector_U8Ptr(ImVector_ImU8* buffer,int n,ImU8 vmin,ImU8 vmax) */
HB_FUNC( IMPLOT_FILLRANGE_VECTOR_U8PTR )
{
   ImVector_ImU8* buffer = ( ImVector_ImU8* ) hb_parptr( 1 );
   int n = hb_parni( 2 );
   ImU8 vmin;
   ImU8 vmax;
   ImPlot_FillRange_Vector_U8Ptr(buffer,n,vmin,vmax);
}

/* void ImPlot_FillRange_Vector_S16Ptr(ImVector_ImS16* buffer,int n,ImS16 vmin,ImS16 vmax) */
HB_FUNC( IMPLOT_FILLRANGE_VECTOR_S16PTR )
{
   ImVector_ImS16* buffer = ( ImVector_ImS16* ) hb_parptr( 1 );
   int n = hb_parni( 2 );
   ImS16 vmin;
   ImS16 vmax;
   ImPlot_FillRange_Vector_S16Ptr(buffer,n,vmin,vmax);
}

/* void ImPlot_FillRange_Vector_U16Ptr(ImVector_ImU16* buffer,int n,ImU16 vmin,ImU16 vmax) */
HB_FUNC( IMPLOT_FILLRANGE_VECTOR_U16PTR )
{
   ImVector_ImU16* buffer = ( ImVector_ImU16* ) hb_parptr( 1 );
   int n = hb_parni( 2 );
   ImU16 vmin;
   ImU16 vmax;
   ImPlot_FillRange_Vector_U16Ptr(buffer,n,vmin,vmax);
}

/* void ImPlot_FillRange_Vector_S32Ptr(ImVector_ImS32* buffer,int n,ImS32 vmin,ImS32 vmax) */
HB_FUNC( IMPLOT_FILLRANGE_VECTOR_S32PTR )
{
   ImVector_ImS32* buffer = ( ImVector_ImS32* ) hb_parptr( 1 );
   int n = hb_parni( 2 );
   ImS32 vmin;
   ImS32 vmax;
   ImPlot_FillRange_Vector_S32Ptr(buffer,n,vmin,vmax);
}

/* void ImPlot_FillRange_Vector_U32Ptr(ImVector_ImU32* buffer,int n,ImU32 vmin,ImU32 vmax) */
HB_FUNC( IMPLOT_FILLRANGE_VECTOR_U32PTR )
{
   ImVector_ImU32* buffer = ( ImVector_ImU32* ) hb_parptr( 1 );
   int n = hb_parni( 2 );
   ImU32 vmin = ( HB_U32 ) hb_parnl( 3 );
   ImU32 vmax = ( HB_U32 ) hb_parnl( 4 );
   ImPlot_FillRange_Vector_U32Ptr(buffer,n,vmin,vmax);
}

/* void ImPlot_FillRange_Vector_S64Ptr(ImVector_ImS64* buffer,int n,ImS64 vmin,ImS64 vmax) */
HB_FUNC( IMPLOT_FILLRANGE_VECTOR_S64PTR )
{
   ImVector_ImS64* buffer = ( ImVector_ImS64* ) hb_parptr( 1 );
   int n = hb_parni( 2 );
   ImS64 vmin;
   ImS64 vmax;
   ImPlot_FillRange_Vector_S64Ptr(buffer,n,vmin,vmax);
}

/* void ImPlot_FillRange_Vector_U64Ptr(ImVector_ImU64* buffer,int n,ImU64 vmin,ImU64 vmax) */
HB_FUNC( IMPLOT_FILLRANGE_VECTOR_U64PTR )
{
   ImVector_ImU64* buffer = ( ImVector_ImU64* ) hb_parptr( 1 );
   int n = hb_parni( 2 );
   ImU64 vmin;
   ImU64 vmax;
   ImPlot_FillRange_Vector_U64Ptr(buffer,n,vmin,vmax);
}

/* void ImPlot_FitNextPlotAxes(bool x,bool y,bool y2,bool y3) */
HB_FUNC( IMPLOT_FITNEXTPLOTAXES )
{
   bool x = hb_parldef( 1, 1 );
   bool y = hb_parldef( 2, 1 );
   bool y2 = hb_parldef( 3, 1 );
   bool y3 = hb_parldef( 4, 1 );
   ImPlot_FitNextPlotAxes(x,y,y2,y3);
}

/* void ImPlot_FitPoint(const ImPlotPoint p) */
HB_FUNC( IMPLOT_FITPOINT )
{
   const ImPlotPoint p;
   ImPlot_FitPoint(p);
}

/* void ImPlot_FitPointAxis(ImPlotAxis* axis,ImPlotRange* ext,double v) */
HB_FUNC( IMPLOT_FITPOINTAXIS )
{
   ImPlotAxis* axis = ( ImPlotAxis* ) hb_parptr( 1 );
   ImPlotRange* ext = ( ImPlotRange* ) hb_parptr( 2 );
   double v = hb_parnd( 3 );
   ImPlot_FitPointAxis(axis,ext,v);
}

/* void ImPlot_FitPointMultiAxis(ImPlotAxis* axis,ImPlotAxis* alt,ImPlotRange* ext,double v,double v_alt) */
HB_FUNC( IMPLOT_FITPOINTMULTIAXIS )
{
   ImPlotAxis* axis = ( ImPlotAxis* ) hb_parptr( 1 );
   ImPlotAxis* alt = ( ImPlotAxis* ) hb_parptr( 2 );
   ImPlotRange* ext = ( ImPlotRange* ) hb_parptr( 3 );
   double v = hb_parnd( 4 );
   double v_alt = hb_parnd( 5 );
   ImPlot_FitPointMultiAxis(axis,alt,ext,v,v_alt);
}

/* void ImPlot_FitPointX(double x) */
HB_FUNC( IMPLOT_FITPOINTX )
{
   double x = hb_parnd( 1 );
   ImPlot_FitPointX(x);
}

/* void ImPlot_FitPointY(double y) */
HB_FUNC( IMPLOT_FITPOINTY )
{
   double y = hb_parnd( 1 );
   ImPlot_FitPointY(y);
}

/* bool ImPlot_FitThisFrame() */
HB_FUNC( IMPLOT_FITTHISFRAME )
{
   bool ret = ImPlot_FitThisFrame();
   hb_retl( ret );
}

/* void ImPlot_FloorTime(ImPlotTime *pOut,const ImPlotTime t,ImPlotTimeUnit unit) */
HB_FUNC( IMPLOT_FLOORTIME )
{
   ImPlotTime* pOut;
   const ImPlotTime t;
   ImPlotTimeUnit unit = ( ImPlotTimeUnit ) hb_parni( 3 );
   ImPlot_FloorTime(pOut,t,unit);
}

/* int ImPlot_FormatDate(const ImPlotTime t,char* buffer,int size,ImPlotDateFmt fmt,bool use_iso_8601) */
HB_FUNC( IMPLOT_FORMATDATE )
{
   const ImPlotTime t;
   char* buffer = hb_itemGetC( hb_paramError( 2 ) );
   int size = hb_parni( 3 );
   ImPlotDateFmt fmt = ( ImPlotDateFmt ) hb_parni( 4 );
   bool use_iso_8601 = hb_parl( 5 );
   int ret = ImPlot_FormatDate(t,buffer,size,fmt,use_iso_8601);
   hb_itemPutC( hb_paramError( 2 ), buffer );
   hb_xfree( buffer );
   hb_retni( ret );
}

/* int ImPlot_FormatDateTime(const ImPlotTime t,char* buffer,int size,ImPlotDateTimeFmt fmt) */
/*
HB_FUNC( IMPLOT_FORMATDATETIME )
{
   const ImPlotTime t;
   char* buffer = hb_itemGetC( hb_paramError( 2 ) );
   int size = hb_parni( 3 );
   ImPlotDateTimeFmt fmt;
   int ret = ImPlot_FormatDateTime(t,buffer,size,fmt);
   hb_itemPutC( hb_paramError( 2 ), buffer );
   hb_xfree( buffer );
   hb_retni( ret );
}
*/

/* int ImPlot_FormatTime(const ImPlotTime t,char* buffer,int size,ImPlotTimeFmt fmt,bool use_24_hr_clk) */
HB_FUNC( IMPLOT_FORMATTIME )
{
   const ImPlotTime t;
   char* buffer = hb_itemGetC( hb_paramError( 2 ) );
   int size = hb_parni( 3 );
   ImPlotTimeFmt fmt = ( ImPlotTimeFmt ) hb_parni( 4 );
   bool use_24_hr_clk = hb_parl( 5 );
   int ret = ImPlot_FormatTime(t,buffer,size,fmt,use_24_hr_clk);
   hb_itemPutC( hb_paramError( 2 ), buffer );
   hb_xfree( buffer );
   hb_retni( ret );
}

/* void ImPlot_GetAutoColor(ImVec4 *pOut,ImPlotCol idx) */
HB_FUNC( IMPLOT_GETAUTOCOLOR )
{
   ImVec4* pOut;
   ImPlotCol idx = ( ImPlotCol ) hb_parni( 2 );
   ImPlot_GetAutoColor(pOut,idx);
}

/* void ImPlot_GetColormapColor(ImVec4 *pOut,int idx,ImPlotColormap cmap) */
HB_FUNC( IMPLOT_GETCOLORMAPCOLOR )
{
   ImVec4* pOut;
   int idx = hb_parni( 2 );
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 3 );
   ImPlot_GetColormapColor(pOut,idx,cmap);
}

/* ImU32 ImPlot_GetColormapColorU32(int idx,ImPlotColormap cmap) */
HB_FUNC( IMPLOT_GETCOLORMAPCOLORU32 )
{
   int idx = hb_parni( 1 );
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 2 );
   ImU32 ret = ImPlot_GetColormapColorU32(idx,cmap);
   hb_retnl( ( HB_LONG ) ret );
}

/* int ImPlot_GetColormapCount() */
HB_FUNC( IMPLOT_GETCOLORMAPCOUNT )
{
   int ret = ImPlot_GetColormapCount();
   hb_retni( ret );
}

/* ImPlotColormap ImPlot_GetColormapIndex(const char* name) */
HB_FUNC( IMPLOT_GETCOLORMAPINDEX )
{
   const char* name = hb_parcx( 1 );
   ImPlotColormap ret = ImPlot_GetColormapIndex(name);
   hb_retni( ( int ) ret );
}

/* const char* ImPlot_GetColormapName(ImPlotColormap cmap) */
HB_FUNC( IMPLOT_GETCOLORMAPNAME )
{
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 1 );
   const char* ret = ImPlot_GetColormapName(cmap);
   hb_retptr( ( void * ) ret );
}

/* int ImPlot_GetColormapSize(ImPlotColormap cmap) */
HB_FUNC( IMPLOT_GETCOLORMAPSIZE )
{
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 1 );
   int ret = ImPlot_GetColormapSize(cmap);
   hb_retni( ret );
}

/* ImPlotContext* ImPlot_GetCurrentContext() */
HB_FUNC( IMPLOT_GETCURRENTCONTEXT )
{
   ImPlotContext* ret = ImPlot_GetCurrentContext();
   hb_retptr( ( void * ) ret );
}

/* ImPlotItem* ImPlot_GetCurrentItem() */
HB_FUNC( IMPLOT_GETCURRENTITEM )
{
   ImPlotItem* ret = ImPlot_GetCurrentItem();
   hb_retptr( ( void * ) ret );
}

/* ImPlotPlot* ImPlot_GetCurrentPlot() */
HB_FUNC( IMPLOT_GETCURRENTPLOT )
{
   ImPlotPlot* ret = ImPlot_GetCurrentPlot();
   hb_retptr( ( void * ) ret );
}

/* ImPlotScale ImPlot_GetCurrentScale() */
HB_FUNC( IMPLOT_GETCURRENTSCALE )
{
   ImPlotScale ret = ImPlot_GetCurrentScale();
   hb_retni( ( int ) ret );
}

/* int ImPlot_GetCurrentYAxis() */
HB_FUNC( IMPLOT_GETCURRENTYAXIS )
{
   int ret = ImPlot_GetCurrentYAxis();
   hb_retni( ret );
}

/* int ImPlot_GetDaysInMonth(int year,int month) */
HB_FUNC( IMPLOT_GETDAYSINMONTH )
{
   int year = hb_parni( 1 );
   int month = hb_parni( 2 );
   int ret = ImPlot_GetDaysInMonth(year,month);
   hb_retni( ret );
}

/* const char* ImPlot_GetFormatX() */
HB_FUNC( IMPLOT_GETFORMATX )
{
   const char* ret = ImPlot_GetFormatX();
   hb_retptr( ( void * ) ret );
}

/* const char* ImPlot_GetFormatY(ImPlotYAxis y) */
HB_FUNC( IMPLOT_GETFORMATY )
{
   ImPlotYAxis y = ( ImPlotYAxis ) hb_parni( 1 );
   const char* ret = ImPlot_GetFormatY(y);
   hb_retptr( ( void * ) ret );
}

/* tm* ImPlot_GetGmtTime(const ImPlotTime t,tm* ptm) */
HB_FUNC( IMPLOT_GETGMTTIME )
{
   const ImPlotTime t;
   tm* ptm = ( tm* ) hb_parptr( 2 );
   tm* ret = ImPlot_GetGmtTime(t,ptm);
   hb_retptr( ( void * ) ret );
}

/* ImPlotInputMap* ImPlot_GetInputMap() */
HB_FUNC( IMPLOT_GETINPUTMAP )
{
   ImPlotInputMap* ret = ImPlot_GetInputMap();
   hb_retptr( ( void * ) ret );
}

/* ImPlotItem* ImPlot_GetItem(const char* label_id) */
HB_FUNC( IMPLOT_GETITEM )
{
   const char* label_id = hb_parcx( 1 );
   ImPlotItem* ret = ImPlot_GetItem(label_id);
   hb_retptr( ( void * ) ret );
}

/* const ImPlotNextItemData* ImPlot_GetItemData() */
HB_FUNC( IMPLOT_GETITEMDATA )
{
   const ImPlotNextItemData* ret = ImPlot_GetItemData();
   hb_retptr( ( void * ) ret );
}

/* void ImPlot_GetLastItemColor(ImVec4 *pOut) */
HB_FUNC( IMPLOT_GETLASTITEMCOLOR )
{
   ImVec4* pOut;
   ImPlot_GetLastItemColor(pOut);
}

/* tm* ImPlot_GetLocTime(const ImPlotTime t,tm* ptm) */
HB_FUNC( IMPLOT_GETLOCTIME )
{
   const ImPlotTime t;
   tm* ptm = ( tm* ) hb_parptr( 2 );
   tm* ret = ImPlot_GetLocTime(t,ptm);
   hb_retptr( ( void * ) ret );
}

/* void ImPlot_GetLocationPos(ImVec2 *pOut,const ImRect outer_rect,const ImVec2 inner_size,ImPlotLocation location,const ImVec2 pad) */
HB_FUNC( IMPLOT_GETLOCATIONPOS )
{
   ImVec2* pOut;
   PHB_ITEM pouter_rect = hb_param( 2, HB_IT_ARRAY );
   const ImRect outer_rect = ImRect{ ImVec2{ _paf( pouter_rect, 1 ), _paf( pouter_rect, 2 ) }, ImVec2{ _paf( pouter_rect, 3 ), _paf( pouter_rect, 4 ) } };
   PHB_ITEM pinner_size = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 inner_size = ImVec2{ _paf( pinner_size, 1 ), _paf( pinner_size, 2 ) };
   ImPlotLocation location = ( ImPlotLocation ) hb_parni( 4 );
   PHB_ITEM ppad = hb_param( 5, HB_IT_ARRAY );
   const ImVec2 pad = ImVec2{ _paf( ppad, 1 ), _paf( ppad, 2 ) };
   ImPlot_GetLocationPos(pOut,outer_rect,inner_size,location,pad);
}

/* const char* ImPlot_GetMarkerName(ImPlotMarker idx) */
HB_FUNC( IMPLOT_GETMARKERNAME )
{
   ImPlotMarker idx = ( ImPlotMarker ) hb_parni( 1 );
   const char* ret = ImPlot_GetMarkerName(idx);
   hb_retptr( ( void * ) ret );
}

/* ImPlotPlot* ImPlot_GetPlot(const char* title) */
HB_FUNC( IMPLOT_GETPLOT )
{
   const char* title = hb_parcx( 1 );
   ImPlotPlot* ret = ImPlot_GetPlot(title);
   hb_retptr( ( void * ) ret );
}

/* ImDrawList* ImPlot_GetPlotDrawList() */
HB_FUNC( IMPLOT_GETPLOTDRAWLIST )
{
   ImDrawList* ret = ImPlot_GetPlotDrawList();
   hb_retptr( ( void * ) ret );
}

/* void ImPlot_GetPlotLimits(ImPlotLimits *pOut,ImPlotYAxis y_axis) */
HB_FUNC( IMPLOT_GETPLOTLIMITS )
{
   ImPlotLimits* pOut;
   ImPlotYAxis y_axis = ( ImPlotYAxis ) hb_parni( 2 );
   ImPlot_GetPlotLimits(pOut,y_axis);
}

/* void ImPlot_GetPlotMousePos(ImPlotPoint *pOut,ImPlotYAxis y_axis) */
HB_FUNC( IMPLOT_GETPLOTMOUSEPOS )
{
   ImPlotPoint* pOut;
   ImPlotYAxis y_axis = ( ImPlotYAxis ) hb_parni( 2 );
   ImPlot_GetPlotMousePos(pOut,y_axis);
}

/* void ImPlot_GetPlotPos(ImVec2 *pOut) */
HB_FUNC( IMPLOT_GETPLOTPOS )
{
   ImVec2* pOut;
   ImPlot_GetPlotPos(pOut);
}

/* void ImPlot_GetPlotQuery(ImPlotLimits *pOut,ImPlotYAxis y_axis) */
HB_FUNC( IMPLOT_GETPLOTQUERY )
{
   ImPlotLimits* pOut;
   ImPlotYAxis y_axis = ( ImPlotYAxis ) hb_parni( 2 );
   ImPlot_GetPlotQuery(pOut,y_axis);
}

/* void ImPlot_GetPlotSelection(ImPlotLimits *pOut,ImPlotYAxis y_axis) */
HB_FUNC( IMPLOT_GETPLOTSELECTION )
{
   ImPlotLimits* pOut;
   ImPlotYAxis y_axis = ( ImPlotYAxis ) hb_parni( 2 );
   ImPlot_GetPlotSelection(pOut,y_axis);
}

/* void ImPlot_GetPlotSize(ImVec2 *pOut) */
HB_FUNC( IMPLOT_GETPLOTSIZE )
{
   ImVec2* pOut;
   ImPlot_GetPlotSize(pOut);
}

/* ImPlotStyle* ImPlot_GetStyle() */
HB_FUNC( IMPLOT_GETSTYLE )
{
   ImPlotStyle* ret = ImPlot_GetStyle();
   hb_retptr( ( void * ) ret );
}

/* const char* ImPlot_GetStyleColorName(ImPlotCol idx) */
HB_FUNC( IMPLOT_GETSTYLECOLORNAME )
{
   ImPlotCol idx = ( ImPlotCol ) hb_parni( 1 );
   const char* ret = ImPlot_GetStyleColorName(idx);
   hb_retptr( ( void * ) ret );
}

/* ImU32 ImPlot_GetStyleColorU32(ImPlotCol idx) */
HB_FUNC( IMPLOT_GETSTYLECOLORU32 )
{
   ImPlotCol idx = ( ImPlotCol ) hb_parni( 1 );
   ImU32 ret = ImPlot_GetStyleColorU32(idx);
   hb_retnl( ( HB_LONG ) ret );
}

/* void ImPlot_GetStyleColorVec4(ImVec4 *pOut,ImPlotCol idx) */
HB_FUNC( IMPLOT_GETSTYLECOLORVEC4 )
{
   ImVec4* pOut;
   ImPlotCol idx = ( ImPlotCol ) hb_parni( 2 );
   ImPlot_GetStyleColorVec4(pOut,idx);
}

/* int ImPlot_GetYear(const ImPlotTime t) */
HB_FUNC( IMPLOT_GETYEAR )
{
   const ImPlotTime t;
   int ret = ImPlot_GetYear(t);
   hb_retni( ret );
}

/* void ImPlot_HideNextItem(bool hidden,ImGuiCond cond) */
HB_FUNC( IMPLOT_HIDENEXTITEM )
{
   bool hidden = hb_parldef( 1, 1 );
   ImGuiCond cond;
   ImPlot_HideNextItem(hidden,cond);
}

/* bool ImPlot_ImAlmostEqual(double v1,double v2,int ulp) */
HB_FUNC( IMPLOT_IMALMOSTEQUAL )
{
   double v1 = hb_parnd( 1 );
   double v2 = hb_parnd( 2 );
   int ulp = hb_parni( 3 );
   bool ret = ImPlot_ImAlmostEqual(v1,v2,ulp);
   hb_retl( ret );
}

/* ImU32 ImPlot_ImAlphaU32(ImU32 col,float alpha) */
HB_FUNC( IMPLOT_IMALPHAU32 )
{
   ImU32 col = ( HB_U32 ) hb_parnl( 1 );
   float alpha = ( float ) hb_parnd( 2 );
   ImU32 ret = ImPlot_ImAlphaU32(col,alpha);
   hb_retnl( ( HB_LONG ) ret );
}

/* double ImPlot_ImConstrainInf(double val) */
HB_FUNC( IMPLOT_IMCONSTRAININF )
{
   double val = hb_parnd( 1 );
   double ret = ImPlot_ImConstrainInf(val);
   hb_retnd( ret );
}

/* double ImPlot_ImConstrainLog(double val) */
HB_FUNC( IMPLOT_IMCONSTRAINLOG )
{
   double val = hb_parnd( 1 );
   double ret = ImPlot_ImConstrainLog(val);
   hb_retnd( ret );
}

/* double ImPlot_ImConstrainNan(double val) */
HB_FUNC( IMPLOT_IMCONSTRAINNAN )
{
   double val = hb_parnd( 1 );
   double ret = ImPlot_ImConstrainNan(val);
   hb_retnd( ret );
}

/* double ImPlot_ImConstrainTime(double val) */
HB_FUNC( IMPLOT_IMCONSTRAINTIME )
{
   double val = hb_parnd( 1 );
   double ret = ImPlot_ImConstrainTime(val);
   hb_retnd( ret );
}

/* ImU32 ImPlot_ImLerpU32(const ImU32* colors,int size,float t) */
HB_FUNC( IMPLOT_IMLERPU32 )
{
   const ImU32* colors = ( const ImU32* ) hb_parptr( 1 );
   int size = hb_parni( 2 );
   float t = ( float ) hb_parnd( 3 );
   ImU32 ret = ImPlot_ImLerpU32(colors,size,t);
   hb_retnl( ( HB_LONG ) ret );
}

/* float ImPlot_ImLog10_Float(float x) */
HB_FUNC( IMPLOT_IMLOG10_FLOAT )
{
   float x = ( float ) hb_parnd( 1 );
   float ret = ImPlot_ImLog10_Float(x);
   hb_retnd( ( double ) ret );
}

/* double ImPlot_ImLog10_double(double x) */
HB_FUNC( IMPLOT_IMLOG10_DOUBLE )
{
   double x = hb_parnd( 1 );
   double ret = ImPlot_ImLog10_double(x);
   hb_retnd( ret );
}

/* float ImPlot_ImMaxArray_FloatPtr(const float* values,int count) */
HB_FUNC( IMPLOT_IMMAXARRAY_FLOATPTR )
{
   const float* values = ( const float* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   float ret = ImPlot_ImMaxArray_FloatPtr(values,count);
   hb_retnd( ( double ) ret );
}

/* double ImPlot_ImMaxArray_doublePtr(const double* values,int count) */
HB_FUNC( IMPLOT_IMMAXARRAY_DOUBLEPTR )
{
   const double* values = ( const double* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImMaxArray_doublePtr(values,count);
   hb_retnd( ret );
}

/* ImS8 ImPlot_ImMaxArray_S8Ptr(const ImS8* values,int count) */
HB_FUNC( IMPLOT_IMMAXARRAY_S8PTR )
{
   const ImS8* values = ( const ImS8* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImS8 ret = ImPlot_ImMaxArray_S8Ptr(values,count);
}

/* ImU8 ImPlot_ImMaxArray_U8Ptr(const ImU8* values,int count) */
HB_FUNC( IMPLOT_IMMAXARRAY_U8PTR )
{
   const ImU8* values = ( const ImU8* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImU8 ret = ImPlot_ImMaxArray_U8Ptr(values,count);
}

/* ImS16 ImPlot_ImMaxArray_S16Ptr(const ImS16* values,int count) */
HB_FUNC( IMPLOT_IMMAXARRAY_S16PTR )
{
   const ImS16* values = ( const ImS16* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImS16 ret = ImPlot_ImMaxArray_S16Ptr(values,count);
}

/* ImU16 ImPlot_ImMaxArray_U16Ptr(const ImU16* values,int count) */
HB_FUNC( IMPLOT_IMMAXARRAY_U16PTR )
{
   const ImU16* values = ( const ImU16* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImU16 ret = ImPlot_ImMaxArray_U16Ptr(values,count);
}

/* ImS32 ImPlot_ImMaxArray_S32Ptr(const ImS32* values,int count) */
HB_FUNC( IMPLOT_IMMAXARRAY_S32PTR )
{
   const ImS32* values = ( const ImS32* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImS32 ret = ImPlot_ImMaxArray_S32Ptr(values,count);
}

/* ImU32 ImPlot_ImMaxArray_U32Ptr(const ImU32* values,int count) */
HB_FUNC( IMPLOT_IMMAXARRAY_U32PTR )
{
   const ImU32* values = ( const ImU32* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImU32 ret = ImPlot_ImMaxArray_U32Ptr(values,count);
   hb_retnl( ( HB_LONG ) ret );
}

/* ImS64 ImPlot_ImMaxArray_S64Ptr(const ImS64* values,int count) */
HB_FUNC( IMPLOT_IMMAXARRAY_S64PTR )
{
   const ImS64* values = ( const ImS64* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImS64 ret = ImPlot_ImMaxArray_S64Ptr(values,count);
}

/* ImU64 ImPlot_ImMaxArray_U64Ptr(const ImU64* values,int count) */
HB_FUNC( IMPLOT_IMMAXARRAY_U64PTR )
{
   const ImU64* values = ( const ImU64* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImU64 ret = ImPlot_ImMaxArray_U64Ptr(values,count);
}

/* double ImPlot_ImMean_FloatPtr(const float* values,int count) */
HB_FUNC( IMPLOT_IMMEAN_FLOATPTR )
{
   const float* values = ( const float* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImMean_FloatPtr(values,count);
   hb_retnd( ret );
}

/* double ImPlot_ImMean_doublePtr(const double* values,int count) */
HB_FUNC( IMPLOT_IMMEAN_DOUBLEPTR )
{
   const double* values = ( const double* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImMean_doublePtr(values,count);
   hb_retnd( ret );
}

/* double ImPlot_ImMean_S8Ptr(const ImS8* values,int count) */
HB_FUNC( IMPLOT_IMMEAN_S8PTR )
{
   const ImS8* values = ( const ImS8* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImMean_S8Ptr(values,count);
   hb_retnd( ret );
}

/* double ImPlot_ImMean_U8Ptr(const ImU8* values,int count) */
HB_FUNC( IMPLOT_IMMEAN_U8PTR )
{
   const ImU8* values = ( const ImU8* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImMean_U8Ptr(values,count);
   hb_retnd( ret );
}

/* double ImPlot_ImMean_S16Ptr(const ImS16* values,int count) */
HB_FUNC( IMPLOT_IMMEAN_S16PTR )
{
   const ImS16* values = ( const ImS16* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImMean_S16Ptr(values,count);
   hb_retnd( ret );
}

/* double ImPlot_ImMean_U16Ptr(const ImU16* values,int count) */
HB_FUNC( IMPLOT_IMMEAN_U16PTR )
{
   const ImU16* values = ( const ImU16* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImMean_U16Ptr(values,count);
   hb_retnd( ret );
}

/* double ImPlot_ImMean_S32Ptr(const ImS32* values,int count) */
HB_FUNC( IMPLOT_IMMEAN_S32PTR )
{
   const ImS32* values = ( const ImS32* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImMean_S32Ptr(values,count);
   hb_retnd( ret );
}

/* double ImPlot_ImMean_U32Ptr(const ImU32* values,int count) */
HB_FUNC( IMPLOT_IMMEAN_U32PTR )
{
   const ImU32* values = ( const ImU32* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImMean_U32Ptr(values,count);
   hb_retnd( ret );
}

/* double ImPlot_ImMean_S64Ptr(const ImS64* values,int count) */
HB_FUNC( IMPLOT_IMMEAN_S64PTR )
{
   const ImS64* values = ( const ImS64* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImMean_S64Ptr(values,count);
   hb_retnd( ret );
}

/* double ImPlot_ImMean_U64Ptr(const ImU64* values,int count) */
HB_FUNC( IMPLOT_IMMEAN_U64PTR )
{
   const ImU64* values = ( const ImU64* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImMean_U64Ptr(values,count);
   hb_retnd( ret );
}

/* float ImPlot_ImMinArray_FloatPtr(const float* values,int count) */
HB_FUNC( IMPLOT_IMMINARRAY_FLOATPTR )
{
   const float* values = ( const float* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   float ret = ImPlot_ImMinArray_FloatPtr(values,count);
   hb_retnd( ( double ) ret );
}

/* double ImPlot_ImMinArray_doublePtr(const double* values,int count) */
HB_FUNC( IMPLOT_IMMINARRAY_DOUBLEPTR )
{
   const double* values = ( const double* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImMinArray_doublePtr(values,count);
   hb_retnd( ret );
}

/* ImS8 ImPlot_ImMinArray_S8Ptr(const ImS8* values,int count) */
HB_FUNC( IMPLOT_IMMINARRAY_S8PTR )
{
   const ImS8* values = ( const ImS8* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImS8 ret = ImPlot_ImMinArray_S8Ptr(values,count);
}

/* ImU8 ImPlot_ImMinArray_U8Ptr(const ImU8* values,int count) */
HB_FUNC( IMPLOT_IMMINARRAY_U8PTR )
{
   const ImU8* values = ( const ImU8* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImU8 ret = ImPlot_ImMinArray_U8Ptr(values,count);
}

/* ImS16 ImPlot_ImMinArray_S16Ptr(const ImS16* values,int count) */
HB_FUNC( IMPLOT_IMMINARRAY_S16PTR )
{
   const ImS16* values = ( const ImS16* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImS16 ret = ImPlot_ImMinArray_S16Ptr(values,count);
}

/* ImU16 ImPlot_ImMinArray_U16Ptr(const ImU16* values,int count) */
HB_FUNC( IMPLOT_IMMINARRAY_U16PTR )
{
   const ImU16* values = ( const ImU16* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImU16 ret = ImPlot_ImMinArray_U16Ptr(values,count);
}

/* ImS32 ImPlot_ImMinArray_S32Ptr(const ImS32* values,int count) */
HB_FUNC( IMPLOT_IMMINARRAY_S32PTR )
{
   const ImS32* values = ( const ImS32* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImS32 ret = ImPlot_ImMinArray_S32Ptr(values,count);
}

/* ImU32 ImPlot_ImMinArray_U32Ptr(const ImU32* values,int count) */
HB_FUNC( IMPLOT_IMMINARRAY_U32PTR )
{
   const ImU32* values = ( const ImU32* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImU32 ret = ImPlot_ImMinArray_U32Ptr(values,count);
   hb_retnl( ( HB_LONG ) ret );
}

/* ImS64 ImPlot_ImMinArray_S64Ptr(const ImS64* values,int count) */
HB_FUNC( IMPLOT_IMMINARRAY_S64PTR )
{
   const ImS64* values = ( const ImS64* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImS64 ret = ImPlot_ImMinArray_S64Ptr(values,count);
}

/* ImU64 ImPlot_ImMinArray_U64Ptr(const ImU64* values,int count) */
HB_FUNC( IMPLOT_IMMINARRAY_U64PTR )
{
   const ImU64* values = ( const ImU64* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImU64 ret = ImPlot_ImMinArray_U64Ptr(values,count);
}

/* void ImPlot_ImMinMaxArray_FloatPtr(const float* values,int count,float* min_out,float* max_out) */
HB_FUNC( IMPLOT_IMMINMAXARRAY_FLOATPTR )
{
   const float* values = ( const float* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   float /* @ */ _min_out = ( float ) hb_parnd( 3 );
   float * min_out = &_min_out;
   float /* @ */ _max_out = ( float ) hb_parnd( 4 );
   float * max_out = &_max_out;
   ImPlot_ImMinMaxArray_FloatPtr(values,count,min_out,max_out);
   hb_itemPutND( hb_paramError( 3 ), ( double ) _min_out );
   hb_itemPutND( hb_paramError( 4 ), ( double ) _max_out );
}

/* void ImPlot_ImMinMaxArray_doublePtr(const double* values,int count,double* min_out,double* max_out) */
HB_FUNC( IMPLOT_IMMINMAXARRAY_DOUBLEPTR )
{
   const double* values = ( const double* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double /* @ */ _min_out = hb_parnd( 3 );
   double * min_out = &_min_out;
   double /* @ */ _max_out = hb_parnd( 4 );
   double * max_out = &_max_out;
   ImPlot_ImMinMaxArray_doublePtr(values,count,min_out,max_out);
   hb_itemPutND( hb_paramError( 3 ), _min_out );
   hb_itemPutND( hb_paramError( 4 ), _max_out );
}

/* void ImPlot_ImMinMaxArray_S8Ptr(const ImS8* values,int count,ImS8* min_out,ImS8* max_out) */
HB_FUNC( IMPLOT_IMMINMAXARRAY_S8PTR )
{
   const ImS8* values = ( const ImS8* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImS8* min_out = ( ImS8* ) hb_parptr( 3 );
   ImS8* max_out = ( ImS8* ) hb_parptr( 4 );
   ImPlot_ImMinMaxArray_S8Ptr(values,count,min_out,max_out);
}

/* void ImPlot_ImMinMaxArray_U8Ptr(const ImU8* values,int count,ImU8* min_out,ImU8* max_out) */
HB_FUNC( IMPLOT_IMMINMAXARRAY_U8PTR )
{
   const ImU8* values = ( const ImU8* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImU8* min_out = ( ImU8* ) hb_parptr( 3 );
   ImU8* max_out = ( ImU8* ) hb_parptr( 4 );
   ImPlot_ImMinMaxArray_U8Ptr(values,count,min_out,max_out);
}

/* void ImPlot_ImMinMaxArray_S16Ptr(const ImS16* values,int count,ImS16* min_out,ImS16* max_out) */
HB_FUNC( IMPLOT_IMMINMAXARRAY_S16PTR )
{
   const ImS16* values = ( const ImS16* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImS16* min_out = ( ImS16* ) hb_parptr( 3 );
   ImS16* max_out = ( ImS16* ) hb_parptr( 4 );
   ImPlot_ImMinMaxArray_S16Ptr(values,count,min_out,max_out);
}

/* void ImPlot_ImMinMaxArray_U16Ptr(const ImU16* values,int count,ImU16* min_out,ImU16* max_out) */
HB_FUNC( IMPLOT_IMMINMAXARRAY_U16PTR )
{
   const ImU16* values = ( const ImU16* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImU16* min_out = ( ImU16* ) hb_parptr( 3 );
   ImU16* max_out = ( ImU16* ) hb_parptr( 4 );
   ImPlot_ImMinMaxArray_U16Ptr(values,count,min_out,max_out);
}

/* void ImPlot_ImMinMaxArray_S32Ptr(const ImS32* values,int count,ImS32* min_out,ImS32* max_out) */
HB_FUNC( IMPLOT_IMMINMAXARRAY_S32PTR )
{
   const ImS32* values = ( const ImS32* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImS32* min_out = ( ImS32* ) hb_parptr( 3 );
   ImS32* max_out = ( ImS32* ) hb_parptr( 4 );
   ImPlot_ImMinMaxArray_S32Ptr(values,count,min_out,max_out);
}

/* void ImPlot_ImMinMaxArray_U32Ptr(const ImU32* values,int count,ImU32* min_out,ImU32* max_out) */
HB_FUNC( IMPLOT_IMMINMAXARRAY_U32PTR )
{
   const ImU32* values = ( const ImU32* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImU32 /* @ */ _min_out = ( HB_U32 ) hb_parnl( 3 );
   ImU32 * min_out = &_min_out;
   ImU32 /* @ */ _max_out = ( HB_U32 ) hb_parnl( 4 );
   ImU32 * max_out = &_max_out;
   ImPlot_ImMinMaxArray_U32Ptr(values,count,min_out,max_out);
   hb_itemPutNL( hb_paramError( 3 ), _min_out );
   hb_itemPutNL( hb_paramError( 4 ), _max_out );
}

/* void ImPlot_ImMinMaxArray_S64Ptr(const ImS64* values,int count,ImS64* min_out,ImS64* max_out) */
HB_FUNC( IMPLOT_IMMINMAXARRAY_S64PTR )
{
   const ImS64* values = ( const ImS64* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImS64* min_out = ( ImS64* ) hb_parptr( 3 );
   ImS64* max_out = ( ImS64* ) hb_parptr( 4 );
   ImPlot_ImMinMaxArray_S64Ptr(values,count,min_out,max_out);
}

/* void ImPlot_ImMinMaxArray_U64Ptr(const ImU64* values,int count,ImU64* min_out,ImU64* max_out) */
HB_FUNC( IMPLOT_IMMINMAXARRAY_U64PTR )
{
   const ImU64* values = ( const ImU64* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImU64* min_out = ( ImU64* ) hb_parptr( 3 );
   ImU64* max_out = ( ImU64* ) hb_parptr( 4 );
   ImPlot_ImMinMaxArray_U64Ptr(values,count,min_out,max_out);
}

/* ImU32 ImPlot_ImMixU32(ImU32 a,ImU32 b,ImU32 s) */
HB_FUNC( IMPLOT_IMMIXU32 )
{
   ImU32 a = ( HB_U32 ) hb_parnl( 1 );
   ImU32 b = ( HB_U32 ) hb_parnl( 2 );
   ImU32 s = ( HB_U32 ) hb_parnl( 3 );
   ImU32 ret = ImPlot_ImMixU32(a,b,s);
   hb_retnl( ( HB_LONG ) ret );
}

/* bool ImPlot_ImNanOrInf(double val) */
HB_FUNC( IMPLOT_IMNANORINF )
{
   double val = hb_parnd( 1 );
   bool ret = ImPlot_ImNanOrInf(val);
   hb_retl( ret );
}

/* int ImPlot_ImPosMod(int l,int r) */
HB_FUNC( IMPLOT_IMPOSMOD )
{
   int l = hb_parni( 1 );
   int r = hb_parni( 2 );
   int ret = ImPlot_ImPosMod(l,r);
   hb_retni( ret );
}

/* float ImPlot_ImRemap_Float(float x,float x0,float x1,float y0,float y1) */
HB_FUNC( IMPLOT_IMREMAP_FLOAT )
{
   float x = ( float ) hb_parnd( 1 );
   float x0 = ( float ) hb_parnd( 2 );
   float x1 = ( float ) hb_parnd( 3 );
   float y0 = ( float ) hb_parnd( 4 );
   float y1 = ( float ) hb_parnd( 5 );
   float ret = ImPlot_ImRemap_Float(x,x0,x1,y0,y1);
   hb_retnd( ( double ) ret );
}

/* double ImPlot_ImRemap_double(double x,double x0,double x1,double y0,double y1) */
HB_FUNC( IMPLOT_IMREMAP_DOUBLE )
{
   double x = hb_parnd( 1 );
   double x0 = hb_parnd( 2 );
   double x1 = hb_parnd( 3 );
   double y0 = hb_parnd( 4 );
   double y1 = hb_parnd( 5 );
   double ret = ImPlot_ImRemap_double(x,x0,x1,y0,y1);
   hb_retnd( ret );
}

/* ImS8 ImPlot_ImRemap_S8(ImS8 x,ImS8 x0,ImS8 x1,ImS8 y0,ImS8 y1) */
HB_FUNC( IMPLOT_IMREMAP_S8 )
{
   ImS8 x;
   ImS8 x0;
   ImS8 x1;
   ImS8 y0;
   ImS8 y1;
   ImS8 ret = ImPlot_ImRemap_S8(x,x0,x1,y0,y1);
}

/* ImU8 ImPlot_ImRemap_U8(ImU8 x,ImU8 x0,ImU8 x1,ImU8 y0,ImU8 y1) */
HB_FUNC( IMPLOT_IMREMAP_U8 )
{
   ImU8 x;
   ImU8 x0;
   ImU8 x1;
   ImU8 y0;
   ImU8 y1;
   ImU8 ret = ImPlot_ImRemap_U8(x,x0,x1,y0,y1);
}

/* ImS16 ImPlot_ImRemap_S16(ImS16 x,ImS16 x0,ImS16 x1,ImS16 y0,ImS16 y1) */
HB_FUNC( IMPLOT_IMREMAP_S16 )
{
   ImS16 x;
   ImS16 x0;
   ImS16 x1;
   ImS16 y0;
   ImS16 y1;
   ImS16 ret = ImPlot_ImRemap_S16(x,x0,x1,y0,y1);
}

/* ImU16 ImPlot_ImRemap_U16(ImU16 x,ImU16 x0,ImU16 x1,ImU16 y0,ImU16 y1) */
HB_FUNC( IMPLOT_IMREMAP_U16 )
{
   ImU16 x;
   ImU16 x0;
   ImU16 x1;
   ImU16 y0;
   ImU16 y1;
   ImU16 ret = ImPlot_ImRemap_U16(x,x0,x1,y0,y1);
}

/* ImS32 ImPlot_ImRemap_S32(ImS32 x,ImS32 x0,ImS32 x1,ImS32 y0,ImS32 y1) */
HB_FUNC( IMPLOT_IMREMAP_S32 )
{
   ImS32 x;
   ImS32 x0;
   ImS32 x1;
   ImS32 y0;
   ImS32 y1;
   ImS32 ret = ImPlot_ImRemap_S32(x,x0,x1,y0,y1);
}

/* ImU32 ImPlot_ImRemap_U32(ImU32 x,ImU32 x0,ImU32 x1,ImU32 y0,ImU32 y1) */
HB_FUNC( IMPLOT_IMREMAP_U32 )
{
   ImU32 x = ( HB_U32 ) hb_parnl( 1 );
   ImU32 x0 = ( HB_U32 ) hb_parnl( 2 );
   ImU32 x1 = ( HB_U32 ) hb_parnl( 3 );
   ImU32 y0 = ( HB_U32 ) hb_parnl( 4 );
   ImU32 y1 = ( HB_U32 ) hb_parnl( 5 );
   ImU32 ret = ImPlot_ImRemap_U32(x,x0,x1,y0,y1);
   hb_retnl( ( HB_LONG ) ret );
}

/* ImS64 ImPlot_ImRemap_S64(ImS64 x,ImS64 x0,ImS64 x1,ImS64 y0,ImS64 y1) */
HB_FUNC( IMPLOT_IMREMAP_S64 )
{
   ImS64 x;
   ImS64 x0;
   ImS64 x1;
   ImS64 y0;
   ImS64 y1;
   ImS64 ret = ImPlot_ImRemap_S64(x,x0,x1,y0,y1);
}

/* ImU64 ImPlot_ImRemap_U64(ImU64 x,ImU64 x0,ImU64 x1,ImU64 y0,ImU64 y1) */
HB_FUNC( IMPLOT_IMREMAP_U64 )
{
   ImU64 x;
   ImU64 x0;
   ImU64 x1;
   ImU64 y0;
   ImU64 y1;
   ImU64 ret = ImPlot_ImRemap_U64(x,x0,x1,y0,y1);
}

/* float ImPlot_ImRemap01_Float(float x,float x0,float x1) */
HB_FUNC( IMPLOT_IMREMAP01_FLOAT )
{
   float x = ( float ) hb_parnd( 1 );
   float x0 = ( float ) hb_parnd( 2 );
   float x1 = ( float ) hb_parnd( 3 );
   float ret = ImPlot_ImRemap01_Float(x,x0,x1);
   hb_retnd( ( double ) ret );
}

/* double ImPlot_ImRemap01_double(double x,double x0,double x1) */
HB_FUNC( IMPLOT_IMREMAP01_DOUBLE )
{
   double x = hb_parnd( 1 );
   double x0 = hb_parnd( 2 );
   double x1 = hb_parnd( 3 );
   double ret = ImPlot_ImRemap01_double(x,x0,x1);
   hb_retnd( ret );
}

/* ImS8 ImPlot_ImRemap01_S8(ImS8 x,ImS8 x0,ImS8 x1) */
HB_FUNC( IMPLOT_IMREMAP01_S8 )
{
   ImS8 x;
   ImS8 x0;
   ImS8 x1;
   ImS8 ret = ImPlot_ImRemap01_S8(x,x0,x1);
}

/* ImU8 ImPlot_ImRemap01_U8(ImU8 x,ImU8 x0,ImU8 x1) */
HB_FUNC( IMPLOT_IMREMAP01_U8 )
{
   ImU8 x;
   ImU8 x0;
   ImU8 x1;
   ImU8 ret = ImPlot_ImRemap01_U8(x,x0,x1);
}

/* ImS16 ImPlot_ImRemap01_S16(ImS16 x,ImS16 x0,ImS16 x1) */
HB_FUNC( IMPLOT_IMREMAP01_S16 )
{
   ImS16 x;
   ImS16 x0;
   ImS16 x1;
   ImS16 ret = ImPlot_ImRemap01_S16(x,x0,x1);
}

/* ImU16 ImPlot_ImRemap01_U16(ImU16 x,ImU16 x0,ImU16 x1) */
HB_FUNC( IMPLOT_IMREMAP01_U16 )
{
   ImU16 x;
   ImU16 x0;
   ImU16 x1;
   ImU16 ret = ImPlot_ImRemap01_U16(x,x0,x1);
}

/* ImS32 ImPlot_ImRemap01_S32(ImS32 x,ImS32 x0,ImS32 x1) */
HB_FUNC( IMPLOT_IMREMAP01_S32 )
{
   ImS32 x;
   ImS32 x0;
   ImS32 x1;
   ImS32 ret = ImPlot_ImRemap01_S32(x,x0,x1);
}

/* ImU32 ImPlot_ImRemap01_U32(ImU32 x,ImU32 x0,ImU32 x1) */
HB_FUNC( IMPLOT_IMREMAP01_U32 )
{
   ImU32 x = ( HB_U32 ) hb_parnl( 1 );
   ImU32 x0 = ( HB_U32 ) hb_parnl( 2 );
   ImU32 x1 = ( HB_U32 ) hb_parnl( 3 );
   ImU32 ret = ImPlot_ImRemap01_U32(x,x0,x1);
   hb_retnl( ( HB_LONG ) ret );
}

/* ImS64 ImPlot_ImRemap01_S64(ImS64 x,ImS64 x0,ImS64 x1) */
HB_FUNC( IMPLOT_IMREMAP01_S64 )
{
   ImS64 x;
   ImS64 x0;
   ImS64 x1;
   ImS64 ret = ImPlot_ImRemap01_S64(x,x0,x1);
}

/* ImU64 ImPlot_ImRemap01_U64(ImU64 x,ImU64 x0,ImU64 x1) */
HB_FUNC( IMPLOT_IMREMAP01_U64 )
{
   ImU64 x;
   ImU64 x0;
   ImU64 x1;
   ImU64 ret = ImPlot_ImRemap01_U64(x,x0,x1);
}

/* double ImPlot_ImStdDev_FloatPtr(const float* values,int count) */
HB_FUNC( IMPLOT_IMSTDDEV_FLOATPTR )
{
   const float* values = ( const float* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImStdDev_FloatPtr(values,count);
   hb_retnd( ret );
}

/* double ImPlot_ImStdDev_doublePtr(const double* values,int count) */
HB_FUNC( IMPLOT_IMSTDDEV_DOUBLEPTR )
{
   const double* values = ( const double* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImStdDev_doublePtr(values,count);
   hb_retnd( ret );
}

/* double ImPlot_ImStdDev_S8Ptr(const ImS8* values,int count) */
HB_FUNC( IMPLOT_IMSTDDEV_S8PTR )
{
   const ImS8* values = ( const ImS8* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImStdDev_S8Ptr(values,count);
   hb_retnd( ret );
}

/* double ImPlot_ImStdDev_U8Ptr(const ImU8* values,int count) */
HB_FUNC( IMPLOT_IMSTDDEV_U8PTR )
{
   const ImU8* values = ( const ImU8* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImStdDev_U8Ptr(values,count);
   hb_retnd( ret );
}

/* double ImPlot_ImStdDev_S16Ptr(const ImS16* values,int count) */
HB_FUNC( IMPLOT_IMSTDDEV_S16PTR )
{
   const ImS16* values = ( const ImS16* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImStdDev_S16Ptr(values,count);
   hb_retnd( ret );
}

/* double ImPlot_ImStdDev_U16Ptr(const ImU16* values,int count) */
HB_FUNC( IMPLOT_IMSTDDEV_U16PTR )
{
   const ImU16* values = ( const ImU16* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImStdDev_U16Ptr(values,count);
   hb_retnd( ret );
}

/* double ImPlot_ImStdDev_S32Ptr(const ImS32* values,int count) */
HB_FUNC( IMPLOT_IMSTDDEV_S32PTR )
{
   const ImS32* values = ( const ImS32* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImStdDev_S32Ptr(values,count);
   hb_retnd( ret );
}

/* double ImPlot_ImStdDev_U32Ptr(const ImU32* values,int count) */
HB_FUNC( IMPLOT_IMSTDDEV_U32PTR )
{
   const ImU32* values = ( const ImU32* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImStdDev_U32Ptr(values,count);
   hb_retnd( ret );
}

/* double ImPlot_ImStdDev_S64Ptr(const ImS64* values,int count) */
HB_FUNC( IMPLOT_IMSTDDEV_S64PTR )
{
   const ImS64* values = ( const ImS64* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImStdDev_S64Ptr(values,count);
   hb_retnd( ret );
}

/* double ImPlot_ImStdDev_U64Ptr(const ImU64* values,int count) */
HB_FUNC( IMPLOT_IMSTDDEV_U64PTR )
{
   const ImU64* values = ( const ImU64* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImStdDev_U64Ptr(values,count);
   hb_retnd( ret );
}

/* float ImPlot_ImSum_FloatPtr(const float* values,int count) */
HB_FUNC( IMPLOT_IMSUM_FLOATPTR )
{
   const float* values = ( const float* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   float ret = ImPlot_ImSum_FloatPtr(values,count);
   hb_retnd( ( double ) ret );
}

/* double ImPlot_ImSum_doublePtr(const double* values,int count) */
HB_FUNC( IMPLOT_IMSUM_DOUBLEPTR )
{
   const double* values = ( const double* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   double ret = ImPlot_ImSum_doublePtr(values,count);
   hb_retnd( ret );
}

/* ImS8 ImPlot_ImSum_S8Ptr(const ImS8* values,int count) */
HB_FUNC( IMPLOT_IMSUM_S8PTR )
{
   const ImS8* values = ( const ImS8* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImS8 ret = ImPlot_ImSum_S8Ptr(values,count);
}

/* ImU8 ImPlot_ImSum_U8Ptr(const ImU8* values,int count) */
HB_FUNC( IMPLOT_IMSUM_U8PTR )
{
   const ImU8* values = ( const ImU8* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImU8 ret = ImPlot_ImSum_U8Ptr(values,count);
}

/* ImS16 ImPlot_ImSum_S16Ptr(const ImS16* values,int count) */
HB_FUNC( IMPLOT_IMSUM_S16PTR )
{
   const ImS16* values = ( const ImS16* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImS16 ret = ImPlot_ImSum_S16Ptr(values,count);
}

/* ImU16 ImPlot_ImSum_U16Ptr(const ImU16* values,int count) */
HB_FUNC( IMPLOT_IMSUM_U16PTR )
{
   const ImU16* values = ( const ImU16* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImU16 ret = ImPlot_ImSum_U16Ptr(values,count);
}

/* ImS32 ImPlot_ImSum_S32Ptr(const ImS32* values,int count) */
HB_FUNC( IMPLOT_IMSUM_S32PTR )
{
   const ImS32* values = ( const ImS32* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImS32 ret = ImPlot_ImSum_S32Ptr(values,count);
}

/* ImU32 ImPlot_ImSum_U32Ptr(const ImU32* values,int count) */
HB_FUNC( IMPLOT_IMSUM_U32PTR )
{
   const ImU32* values = ( const ImU32* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImU32 ret = ImPlot_ImSum_U32Ptr(values,count);
   hb_retnl( ( HB_LONG ) ret );
}

/* ImS64 ImPlot_ImSum_S64Ptr(const ImS64* values,int count) */
HB_FUNC( IMPLOT_IMSUM_S64PTR )
{
   const ImS64* values = ( const ImS64* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImS64 ret = ImPlot_ImSum_S64Ptr(values,count);
}

/* ImU64 ImPlot_ImSum_U64Ptr(const ImU64* values,int count) */
HB_FUNC( IMPLOT_IMSUM_U64PTR )
{
   const ImU64* values = ( const ImU64* ) hb_parptr( 1 );
   int count = hb_parni( 2 );
   ImU64 ret = ImPlot_ImSum_U64Ptr(values,count);
}

/* void ImPlot_Initialize(ImPlotContext* ctx) */
HB_FUNC( IMPLOT_INITIALIZE )
{
   ImPlotContext* ctx = ( ImPlotContext* ) hb_parptr( 1 );
   ImPlot_Initialize(ctx);
}

/* void ImPlot_Intersection(ImVec2 *pOut,const ImVec2 a1,const ImVec2 a2,const ImVec2 b1,const ImVec2 b2) */
HB_FUNC( IMPLOT_INTERSECTION )
{
   ImVec2* pOut;
   PHB_ITEM pa1 = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 a1 = ImVec2{ _paf( pa1, 1 ), _paf( pa1, 2 ) };
   PHB_ITEM pa2 = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 a2 = ImVec2{ _paf( pa2, 1 ), _paf( pa2, 2 ) };
   PHB_ITEM pb1 = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 b1 = ImVec2{ _paf( pb1, 1 ), _paf( pb1, 2 ) };
   PHB_ITEM pb2 = hb_param( 5, HB_IT_ARRAY );
   const ImVec2 b2 = ImVec2{ _paf( pb2, 1 ), _paf( pb2, 2 ) };
   ImPlot_Intersection(pOut,a1,a2,b1,b2);
}

/* bool ImPlot_IsColorAuto_Vec4(const ImVec4 col) */
HB_FUNC( IMPLOT_ISCOLORAUTO_VEC4 )
{
   PHB_ITEM pcol = hb_param( 1, HB_IT_ARRAY );
   const ImVec4 col = ImVec4{ _paf( pcol, 1 ), _paf( pcol, 2 ), _paf( pcol, 3 ), _paf( pcol, 4 ) };
   bool ret = ImPlot_IsColorAuto_Vec4(col);
   hb_retl( ret );
}

/* bool ImPlot_IsColorAuto_PlotCol(ImPlotCol idx) */
HB_FUNC( IMPLOT_ISCOLORAUTO_PLOTCOL )
{
   ImPlotCol idx = ( ImPlotCol ) hb_parni( 1 );
   bool ret = ImPlot_IsColorAuto_PlotCol(idx);
   hb_retl( ret );
}

/* bool ImPlot_IsLeapYear(int year) */
HB_FUNC( IMPLOT_ISLEAPYEAR )
{
   int year = hb_parni( 1 );
   bool ret = ImPlot_IsLeapYear(year);
   hb_retl( ret );
}

/* bool ImPlot_IsLegendEntryHovered(const char* label_id) */
HB_FUNC( IMPLOT_ISLEGENDENTRYHOVERED )
{
   const char* label_id = hb_parcx( 1 );
   bool ret = ImPlot_IsLegendEntryHovered(label_id);
   hb_retl( ret );
}

/* bool ImPlot_IsPlotHovered() */
HB_FUNC( IMPLOT_ISPLOTHOVERED )
{
   bool ret = ImPlot_IsPlotHovered();
   hb_retl( ret );
}

/* bool ImPlot_IsPlotQueried() */
HB_FUNC( IMPLOT_ISPLOTQUERIED )
{
   bool ret = ImPlot_IsPlotQueried();
   hb_retl( ret );
}

/* bool ImPlot_IsPlotSelected() */
HB_FUNC( IMPLOT_ISPLOTSELECTED )
{
   bool ret = ImPlot_IsPlotSelected();
   hb_retl( ret );
}

/* bool ImPlot_IsPlotXAxisHovered() */
HB_FUNC( IMPLOT_ISPLOTXAXISHOVERED )
{
   bool ret = ImPlot_IsPlotXAxisHovered();
   hb_retl( ret );
}

/* bool ImPlot_IsPlotYAxisHovered(ImPlotYAxis y_axis) */
HB_FUNC( IMPLOT_ISPLOTYAXISHOVERED )
{
   ImPlotYAxis y_axis = ( ImPlotYAxis ) hb_parni( 1 );
   bool ret = ImPlot_IsPlotYAxisHovered(y_axis);
   hb_retl( ret );
}

/* bool ImPlot_IsSubplotsHovered() */
HB_FUNC( IMPLOT_ISSUBPLOTSHOVERED )
{
   bool ret = ImPlot_IsSubplotsHovered();
   hb_retl( ret );
}

/* void ImPlot_ItemIcon_Vec4(const ImVec4 col) */
HB_FUNC( IMPLOT_ITEMICON_VEC4 )
{
   PHB_ITEM pcol = hb_param( 1, HB_IT_ARRAY );
   const ImVec4 col = ImVec4{ _paf( pcol, 1 ), _paf( pcol, 2 ), _paf( pcol, 3 ), _paf( pcol, 4 ) };
   ImPlot_ItemIcon_Vec4(col);
}

/* void ImPlot_ItemIcon_U32(ImU32 col) */
HB_FUNC( IMPLOT_ITEMICON_U32 )
{
   ImU32 col = ( HB_U32 ) hb_parnl( 1 );
   ImPlot_ItemIcon_U32(col);
}

/* int ImPlot_LabelAxisValue(const ImPlotAxis axis,const ImPlotTickCollection ticks,double value,char* buff,int size) */
HB_FUNC( IMPLOT_LABELAXISVALUE )
{
   const ImPlotAxis axis;
   const ImPlotTickCollection ticks;
   double value = hb_parnd( 3 );
   char* buff = hb_itemGetC( hb_paramError( 4 ) );
   int size = hb_parni( 5 );
   int ret = ImPlot_LabelAxisValue(axis,ticks,value,buff,size);
   hb_itemPutC( hb_paramError( 4 ), buff );
   hb_xfree( buff );
   hb_retni( ret );
}

/* void ImPlot_LabelTickTime(ImPlotTick* tick,ImGuiTextBuffer* buffer,const ImPlotTime t,ImPlotDateTimeFmt fmt) */
/*
HB_FUNC( IMPLOT_LABELTICKTIME )
{
   ImPlotTick* tick = ( ImPlotTick* ) hb_parptr( 1 );
   ImGuiTextBuffer* buffer = ( ImGuiTextBuffer* ) hb_parptr( 2 );
   const ImPlotTime t;
   ImPlotDateTimeFmt fmt;
   ImPlot_LabelTickTime(tick,buffer,t,fmt);
}
*/

/* void ImPlot_LinkNextPlotLimits(double* xmin,double* xmax,double* ymin,double* ymax,double* ymin2,double* ymax2,double* ymin3,double* ymax3) */
HB_FUNC( IMPLOT_LINKNEXTPLOTLIMITS )
{
   double /* @ */ _xmin = hb_parnd( 1 );
   double * xmin = &_xmin;
   double /* @ */ _xmax = hb_parnd( 2 );
   double * xmax = &_xmax;
   double /* @ */ _ymin = hb_parnd( 3 );
   double * ymin = &_ymin;
   double /* @ */ _ymax = hb_parnd( 4 );
   double * ymax = &_ymax;
   double /* @ */ _ymin2 = hb_parnd( 5 );
   double * ymin2 = &_ymin2;
   double /* @ */ _ymax2 = hb_parnd( 6 );
   double * ymax2 = &_ymax2;
   double /* @ */ _ymin3 = hb_parnd( 7 );
   double * ymin3 = &_ymin3;
   double /* @ */ _ymax3 = hb_parnd( 8 );
   double * ymax3 = &_ymax3;
   ImPlot_LinkNextPlotLimits(xmin,xmax,ymin,ymax,ymin2,ymax2,ymin3,ymax3);
   hb_itemPutND( hb_paramError( 1 ), _xmin );
   hb_itemPutND( hb_paramError( 2 ), _xmax );
   hb_itemPutND( hb_paramError( 3 ), _ymin );
   hb_itemPutND( hb_paramError( 4 ), _ymax );
   hb_itemPutND( hb_paramError( 5 ), _ymin2 );
   hb_itemPutND( hb_paramError( 6 ), _ymax2 );
   hb_itemPutND( hb_paramError( 7 ), _ymin3 );
   hb_itemPutND( hb_paramError( 8 ), _ymax3 );
}

/* void ImPlot_MakeTime(ImPlotTime *pOut,int year,int month,int day,int hour,int min,int sec,int us) */
HB_FUNC( IMPLOT_MAKETIME )
{
   ImPlotTime* pOut;
   int year = hb_parni( 2 );
   int month = hb_parni( 3 );
   int day = hb_parni( 4 );
   int hour = hb_parni( 5 );
   int min = hb_parni( 6 );
   int sec = hb_parni( 7 );
   int us = hb_parni( 8 );
   ImPlot_MakeTime(pOut,year,month,day,hour,min,sec,us);
}

/* void ImPlot_MkGmtTime(ImPlotTime *pOut,struct tm* ptm) */
HB_FUNC( IMPLOT_MKGMTTIME )
{
   ImPlotTime* pOut;
   struct tm* ptm = ( struct tm* ) hb_parptr( 2 );
   ImPlot_MkGmtTime(pOut,ptm);
}

/* void ImPlot_MkLocTime(ImPlotTime *pOut,struct tm* ptm) */
HB_FUNC( IMPLOT_MKLOCTIME )
{
   ImPlotTime* pOut;
   struct tm* ptm = ( struct tm* ) hb_parptr( 2 );
   ImPlot_MkLocTime(pOut,ptm);
}

/* void ImPlot_NextColormapColor(ImVec4 *pOut) */
HB_FUNC( IMPLOT_NEXTCOLORMAPCOLOR )
{
   ImVec4* pOut;
   ImPlot_NextColormapColor(pOut);
}

/* ImU32 ImPlot_NextColormapColorU32() */
HB_FUNC( IMPLOT_NEXTCOLORMAPCOLORU32 )
{
   ImU32 ret = ImPlot_NextColormapColorU32();
   hb_retnl( ( HB_LONG ) ret );
}

/* double ImPlot_NiceNum(double x,bool round) */
HB_FUNC( IMPLOT_NICENUM )
{
   double x = hb_parnd( 1 );
   bool round = hb_parl( 2 );
   double ret = ImPlot_NiceNum(x,round);
   hb_retnd( ret );
}

/* int ImPlot_OrderOfMagnitude(double val) */
HB_FUNC( IMPLOT_ORDEROFMAGNITUDE )
{
   double val = hb_parnd( 1 );
   int ret = ImPlot_OrderOfMagnitude(val);
   hb_retni( ret );
}

/* int ImPlot_OrderToPrecision(int order) */
HB_FUNC( IMPLOT_ORDERTOPRECISION )
{
   int order = hb_parni( 1 );
   int ret = ImPlot_OrderToPrecision(order);
   hb_retni( ret );
}

/* void ImPlot_PixelsToPlot_Vec2(ImPlotPoint *pOut,const ImVec2 pix,ImPlotYAxis y_axis) */
HB_FUNC( IMPLOT_PIXELSTOPLOT_VEC2 )
{
   ImPlotPoint* pOut;
   PHB_ITEM ppix = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 pix = ImVec2{ _paf( ppix, 1 ), _paf( ppix, 2 ) };
   ImPlotYAxis y_axis = ( ImPlotYAxis ) hb_parni( 3 );
   ImPlot_PixelsToPlot_Vec2(pOut,pix,y_axis);
}

/* void ImPlot_PixelsToPlot_Float(ImPlotPoint *pOut,float x,float y,ImPlotYAxis y_axis) */
HB_FUNC( IMPLOT_PIXELSTOPLOT_FLOAT )
{
   ImPlotPoint* pOut;
   float x = ( float ) hb_parnd( 2 );
   float y = ( float ) hb_parnd( 3 );
   ImPlotYAxis y_axis = ( ImPlotYAxis ) hb_parni( 4 );
   ImPlot_PixelsToPlot_Float(pOut,x,y,y_axis);
}

/* void ImPlot_PlotBars_FloatPtrInt(const char* label_id,const float* values,int count,double width,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_FLOATPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const float* values = ( const float* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double width = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_FloatPtrInt(label_id,values,count,width,shift,offset,stride);
}

/* void ImPlot_PlotBars_doublePtrInt(const char* label_id,const double* values,int count,double width,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_DOUBLEPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const double* values = ( const double* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double width = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_doublePtrInt(label_id,values,count,width,shift,offset,stride);
}

/* void ImPlot_PlotBars_S8PtrInt(const char* label_id,const ImS8* values,int count,double width,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_S8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* values = ( const ImS8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double width = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_S8PtrInt(label_id,values,count,width,shift,offset,stride);
}

/* void ImPlot_PlotBars_U8PtrInt(const char* label_id,const ImU8* values,int count,double width,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_U8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* values = ( const ImU8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double width = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_U8PtrInt(label_id,values,count,width,shift,offset,stride);
}

/* void ImPlot_PlotBars_S16PtrInt(const char* label_id,const ImS16* values,int count,double width,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_S16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* values = ( const ImS16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double width = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_S16PtrInt(label_id,values,count,width,shift,offset,stride);
}

/* void ImPlot_PlotBars_U16PtrInt(const char* label_id,const ImU16* values,int count,double width,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_U16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* values = ( const ImU16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double width = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_U16PtrInt(label_id,values,count,width,shift,offset,stride);
}

/* void ImPlot_PlotBars_S32PtrInt(const char* label_id,const ImS32* values,int count,double width,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_S32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* values = ( const ImS32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double width = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_S32PtrInt(label_id,values,count,width,shift,offset,stride);
}

/* void ImPlot_PlotBars_U32PtrInt(const char* label_id,const ImU32* values,int count,double width,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_U32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* values = ( const ImU32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double width = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_U32PtrInt(label_id,values,count,width,shift,offset,stride);
}

/* void ImPlot_PlotBars_S64PtrInt(const char* label_id,const ImS64* values,int count,double width,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_S64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* values = ( const ImS64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double width = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_S64PtrInt(label_id,values,count,width,shift,offset,stride);
}

/* void ImPlot_PlotBars_U64PtrInt(const char* label_id,const ImU64* values,int count,double width,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_U64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* values = ( const ImU64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double width = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_U64PtrInt(label_id,values,count,width,shift,offset,stride);
}

/* void ImPlot_PlotBars_FloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,double width,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_FLOATPTRFLOATPTR )
{
   const char* label_id = hb_parcx( 1 );
   const float* xs = ( const float* ) hb_parptr( 2 );
   const float* ys = ( const float* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double width = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_FloatPtrFloatPtr(label_id,xs,ys,count,width,offset,stride);
}

/* void ImPlot_PlotBars_doublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,double width,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_DOUBLEPTRDOUBLEPTR )
{
   const char* label_id = hb_parcx( 1 );
   const double* xs = ( const double* ) hb_parptr( 2 );
   const double* ys = ( const double* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double width = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_doublePtrdoublePtr(label_id,xs,ys,count,width,offset,stride);
}

/* void ImPlot_PlotBars_S8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double width,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_S8PTRS8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* xs = ( const ImS8* ) hb_parptr( 2 );
   const ImS8* ys = ( const ImS8* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double width = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_S8PtrS8Ptr(label_id,xs,ys,count,width,offset,stride);
}

/* void ImPlot_PlotBars_U8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double width,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_U8PTRU8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* xs = ( const ImU8* ) hb_parptr( 2 );
   const ImU8* ys = ( const ImU8* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double width = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_U8PtrU8Ptr(label_id,xs,ys,count,width,offset,stride);
}

/* void ImPlot_PlotBars_S16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double width,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_S16PTRS16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* xs = ( const ImS16* ) hb_parptr( 2 );
   const ImS16* ys = ( const ImS16* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double width = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_S16PtrS16Ptr(label_id,xs,ys,count,width,offset,stride);
}

/* void ImPlot_PlotBars_U16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double width,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_U16PTRU16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* xs = ( const ImU16* ) hb_parptr( 2 );
   const ImU16* ys = ( const ImU16* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double width = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_U16PtrU16Ptr(label_id,xs,ys,count,width,offset,stride);
}

/* void ImPlot_PlotBars_S32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double width,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_S32PTRS32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* xs = ( const ImS32* ) hb_parptr( 2 );
   const ImS32* ys = ( const ImS32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double width = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_S32PtrS32Ptr(label_id,xs,ys,count,width,offset,stride);
}

/* void ImPlot_PlotBars_U32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double width,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_U32PTRU32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* xs = ( const ImU32* ) hb_parptr( 2 );
   const ImU32* ys = ( const ImU32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double width = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_U32PtrU32Ptr(label_id,xs,ys,count,width,offset,stride);
}

/* void ImPlot_PlotBars_S64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double width,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_S64PTRS64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* xs = ( const ImS64* ) hb_parptr( 2 );
   const ImS64* ys = ( const ImS64* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double width = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_S64PtrS64Ptr(label_id,xs,ys,count,width,offset,stride);
}

/* void ImPlot_PlotBars_U64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double width,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARS_U64PTRU64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* xs = ( const ImU64* ) hb_parptr( 2 );
   const ImU64* ys = ( const ImU64* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double width = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBars_U64PtrU64Ptr(label_id,xs,ys,count,width,offset,stride);
}

/* void ImPlot_PlotBarsG(const char* label_id,ImPlotPoint(*getter)(void* data,int idx),void* data,int count,double width) */
HB_FUNC( IMPLOT_PLOTBARSG )
{
   const char* label_id = hb_parcx( 1 );
   void* data = ( void* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double width = hb_parnd( 5 );
   ImPlot_PlotBarsG(label_id, NULL /* &hb_ig_getter */,data,count,width);
}

/* void ImPlot_PlotBarsH_FloatPtrInt(const char* label_id,const float* values,int count,double height,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_FLOATPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const float* values = ( const float* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double height = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_FloatPtrInt(label_id,values,count,height,shift,offset,stride);
}

/* void ImPlot_PlotBarsH_doublePtrInt(const char* label_id,const double* values,int count,double height,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_DOUBLEPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const double* values = ( const double* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double height = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_doublePtrInt(label_id,values,count,height,shift,offset,stride);
}

/* void ImPlot_PlotBarsH_S8PtrInt(const char* label_id,const ImS8* values,int count,double height,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_S8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* values = ( const ImS8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double height = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_S8PtrInt(label_id,values,count,height,shift,offset,stride);
}

/* void ImPlot_PlotBarsH_U8PtrInt(const char* label_id,const ImU8* values,int count,double height,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_U8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* values = ( const ImU8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double height = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_U8PtrInt(label_id,values,count,height,shift,offset,stride);
}

/* void ImPlot_PlotBarsH_S16PtrInt(const char* label_id,const ImS16* values,int count,double height,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_S16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* values = ( const ImS16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double height = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_S16PtrInt(label_id,values,count,height,shift,offset,stride);
}

/* void ImPlot_PlotBarsH_U16PtrInt(const char* label_id,const ImU16* values,int count,double height,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_U16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* values = ( const ImU16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double height = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_U16PtrInt(label_id,values,count,height,shift,offset,stride);
}

/* void ImPlot_PlotBarsH_S32PtrInt(const char* label_id,const ImS32* values,int count,double height,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_S32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* values = ( const ImS32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double height = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_S32PtrInt(label_id,values,count,height,shift,offset,stride);
}

/* void ImPlot_PlotBarsH_U32PtrInt(const char* label_id,const ImU32* values,int count,double height,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_U32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* values = ( const ImU32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double height = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_U32PtrInt(label_id,values,count,height,shift,offset,stride);
}

/* void ImPlot_PlotBarsH_S64PtrInt(const char* label_id,const ImS64* values,int count,double height,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_S64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* values = ( const ImS64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double height = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_S64PtrInt(label_id,values,count,height,shift,offset,stride);
}

/* void ImPlot_PlotBarsH_U64PtrInt(const char* label_id,const ImU64* values,int count,double height,double shift,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_U64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* values = ( const ImU64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double height = hb_parnd( 4 );
   double shift = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_U64PtrInt(label_id,values,count,height,shift,offset,stride);
}

/* void ImPlot_PlotBarsH_FloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,double height,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_FLOATPTRFLOATPTR )
{
   const char* label_id = hb_parcx( 1 );
   const float* xs = ( const float* ) hb_parptr( 2 );
   const float* ys = ( const float* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double height = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_FloatPtrFloatPtr(label_id,xs,ys,count,height,offset,stride);
}

/* void ImPlot_PlotBarsH_doublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,double height,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_DOUBLEPTRDOUBLEPTR )
{
   const char* label_id = hb_parcx( 1 );
   const double* xs = ( const double* ) hb_parptr( 2 );
   const double* ys = ( const double* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double height = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_doublePtrdoublePtr(label_id,xs,ys,count,height,offset,stride);
}

/* void ImPlot_PlotBarsH_S8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double height,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_S8PTRS8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* xs = ( const ImS8* ) hb_parptr( 2 );
   const ImS8* ys = ( const ImS8* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double height = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_S8PtrS8Ptr(label_id,xs,ys,count,height,offset,stride);
}

/* void ImPlot_PlotBarsH_U8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double height,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_U8PTRU8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* xs = ( const ImU8* ) hb_parptr( 2 );
   const ImU8* ys = ( const ImU8* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double height = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_U8PtrU8Ptr(label_id,xs,ys,count,height,offset,stride);
}

/* void ImPlot_PlotBarsH_S16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double height,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_S16PTRS16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* xs = ( const ImS16* ) hb_parptr( 2 );
   const ImS16* ys = ( const ImS16* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double height = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_S16PtrS16Ptr(label_id,xs,ys,count,height,offset,stride);
}

/* void ImPlot_PlotBarsH_U16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double height,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_U16PTRU16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* xs = ( const ImU16* ) hb_parptr( 2 );
   const ImU16* ys = ( const ImU16* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double height = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_U16PtrU16Ptr(label_id,xs,ys,count,height,offset,stride);
}

/* void ImPlot_PlotBarsH_S32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double height,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_S32PTRS32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* xs = ( const ImS32* ) hb_parptr( 2 );
   const ImS32* ys = ( const ImS32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double height = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_S32PtrS32Ptr(label_id,xs,ys,count,height,offset,stride);
}

/* void ImPlot_PlotBarsH_U32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double height,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_U32PTRU32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* xs = ( const ImU32* ) hb_parptr( 2 );
   const ImU32* ys = ( const ImU32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double height = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_U32PtrU32Ptr(label_id,xs,ys,count,height,offset,stride);
}

/* void ImPlot_PlotBarsH_S64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double height,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_S64PTRS64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* xs = ( const ImS64* ) hb_parptr( 2 );
   const ImS64* ys = ( const ImS64* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double height = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_S64PtrS64Ptr(label_id,xs,ys,count,height,offset,stride);
}

/* void ImPlot_PlotBarsH_U64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double height,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTBARSH_U64PTRU64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* xs = ( const ImU64* ) hb_parptr( 2 );
   const ImU64* ys = ( const ImU64* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double height = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotBarsH_U64PtrU64Ptr(label_id,xs,ys,count,height,offset,stride);
}

/* void ImPlot_PlotBarsHG(const char* label_id,ImPlotPoint(*getter)(void* data,int idx),void* data,int count,double height) */
HB_FUNC( IMPLOT_PLOTBARSHG )
{
   const char* label_id = hb_parcx( 1 );
   void* data = ( void* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double height = hb_parnd( 5 );
   ImPlot_PlotBarsHG(label_id, NULL /* &hb_ig_getter */,data,count,height);
}

/* void ImPlot_PlotDigital_FloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTDIGITAL_FLOATPTR )
{
   const char* label_id = hb_parcx( 1 );
   const float* xs = ( const float* ) hb_parptr( 2 );
   const float* ys = ( const float* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotDigital_FloatPtr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotDigital_doublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTDIGITAL_DOUBLEPTR )
{
   const char* label_id = hb_parcx( 1 );
   const double* xs = ( const double* ) hb_parptr( 2 );
   const double* ys = ( const double* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotDigital_doublePtr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotDigital_S8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTDIGITAL_S8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* xs = ( const ImS8* ) hb_parptr( 2 );
   const ImS8* ys = ( const ImS8* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotDigital_S8Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotDigital_U8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTDIGITAL_U8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* xs = ( const ImU8* ) hb_parptr( 2 );
   const ImU8* ys = ( const ImU8* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotDigital_U8Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotDigital_S16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTDIGITAL_S16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* xs = ( const ImS16* ) hb_parptr( 2 );
   const ImS16* ys = ( const ImS16* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotDigital_S16Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotDigital_U16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTDIGITAL_U16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* xs = ( const ImU16* ) hb_parptr( 2 );
   const ImU16* ys = ( const ImU16* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotDigital_U16Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotDigital_S32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTDIGITAL_S32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* xs = ( const ImS32* ) hb_parptr( 2 );
   const ImS32* ys = ( const ImS32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotDigital_S32Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotDigital_U32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTDIGITAL_U32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* xs = ( const ImU32* ) hb_parptr( 2 );
   const ImU32* ys = ( const ImU32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotDigital_U32Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotDigital_S64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTDIGITAL_S64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* xs = ( const ImS64* ) hb_parptr( 2 );
   const ImS64* ys = ( const ImS64* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotDigital_S64Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotDigital_U64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTDIGITAL_U64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* xs = ( const ImU64* ) hb_parptr( 2 );
   const ImU64* ys = ( const ImU64* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotDigital_U64Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotDigitalG(const char* label_id,ImPlotPoint(*getter)(void* data,int idx),void* data,int count) */
HB_FUNC( IMPLOT_PLOTDIGITALG )
{
   const char* label_id = hb_parcx( 1 );
   void* data = ( void* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   ImPlot_PlotDigitalG(label_id,NULL /* &hb_ig_getter */,data,count);
}

/* void ImPlot_PlotDummy(const char* label_id) */
HB_FUNC( IMPLOT_PLOTDUMMY )
{
   const char* label_id = hb_parcx( 1 );
   ImPlot_PlotDummy(label_id);
}

/* void ImPlot_PlotErrorBars_FloatPtrFloatPtrFloatPtrInt(const char* label_id,const float* xs,const float* ys,const float* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_FLOATPTRFLOATPTRFLOATPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const float* xs = ( const float* ) hb_parptr( 2 );
   const float* ys = ( const float* ) hb_parptr( 3 );
   const float* err = ( const float* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBars_FloatPtrFloatPtrFloatPtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_doublePtrdoublePtrdoublePtrInt(const char* label_id,const double* xs,const double* ys,const double* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_DOUBLEPTRDOUBLEPTRDOUBLEPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const double* xs = ( const double* ) hb_parptr( 2 );
   const double* ys = ( const double* ) hb_parptr( 3 );
   const double* err = ( const double* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBars_doublePtrdoublePtrdoublePtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_S8PtrS8PtrS8PtrInt(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_S8PTRS8PTRS8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* xs = ( const ImS8* ) hb_parptr( 2 );
   const ImS8* ys = ( const ImS8* ) hb_parptr( 3 );
   const ImS8* err = ( const ImS8* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBars_S8PtrS8PtrS8PtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_U8PtrU8PtrU8PtrInt(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_U8PTRU8PTRU8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* xs = ( const ImU8* ) hb_parptr( 2 );
   const ImU8* ys = ( const ImU8* ) hb_parptr( 3 );
   const ImU8* err = ( const ImU8* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBars_U8PtrU8PtrU8PtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_S16PtrS16PtrS16PtrInt(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_S16PTRS16PTRS16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* xs = ( const ImS16* ) hb_parptr( 2 );
   const ImS16* ys = ( const ImS16* ) hb_parptr( 3 );
   const ImS16* err = ( const ImS16* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBars_S16PtrS16PtrS16PtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_U16PtrU16PtrU16PtrInt(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_U16PTRU16PTRU16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* xs = ( const ImU16* ) hb_parptr( 2 );
   const ImU16* ys = ( const ImU16* ) hb_parptr( 3 );
   const ImU16* err = ( const ImU16* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBars_U16PtrU16PtrU16PtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_S32PtrS32PtrS32PtrInt(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_S32PTRS32PTRS32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* xs = ( const ImS32* ) hb_parptr( 2 );
   const ImS32* ys = ( const ImS32* ) hb_parptr( 3 );
   const ImS32* err = ( const ImS32* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBars_S32PtrS32PtrS32PtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_U32PtrU32PtrU32PtrInt(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_U32PTRU32PTRU32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* xs = ( const ImU32* ) hb_parptr( 2 );
   const ImU32* ys = ( const ImU32* ) hb_parptr( 3 );
   const ImU32* err = ( const ImU32* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBars_U32PtrU32PtrU32PtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_S64PtrS64PtrS64PtrInt(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_S64PTRS64PTRS64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* xs = ( const ImS64* ) hb_parptr( 2 );
   const ImS64* ys = ( const ImS64* ) hb_parptr( 3 );
   const ImS64* err = ( const ImS64* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBars_S64PtrS64PtrS64PtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_U64PtrU64PtrU64PtrInt(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_U64PTRU64PTRU64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* xs = ( const ImU64* ) hb_parptr( 2 );
   const ImU64* ys = ( const ImU64* ) hb_parptr( 3 );
   const ImU64* err = ( const ImU64* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBars_U64PtrU64PtrU64PtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_FloatPtrFloatPtrFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,const float* neg,const float* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_FLOATPTRFLOATPTRFLOATPTRFLOATPTR )
{
   const char* label_id = hb_parcx( 1 );
   const float* xs = ( const float* ) hb_parptr( 2 );
   const float* ys = ( const float* ) hb_parptr( 3 );
   const float* neg = ( const float* ) hb_parptr( 4 );
   const float* pos = ( const float* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBars_FloatPtrFloatPtrFloatPtrFloatPtr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_doublePtrdoublePtrdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,const double* neg,const double* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_DOUBLEPTRDOUBLEPTRDOUBLEPTRDOUBLEPTR )
{
   const char* label_id = hb_parcx( 1 );
   const double* xs = ( const double* ) hb_parptr( 2 );
   const double* ys = ( const double* ) hb_parptr( 3 );
   const double* neg = ( const double* ) hb_parptr( 4 );
   const double* pos = ( const double* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBars_doublePtrdoublePtrdoublePtrdoublePtr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_S8PtrS8PtrS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* neg,const ImS8* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_S8PTRS8PTRS8PTRS8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* xs = ( const ImS8* ) hb_parptr( 2 );
   const ImS8* ys = ( const ImS8* ) hb_parptr( 3 );
   const ImS8* neg = ( const ImS8* ) hb_parptr( 4 );
   const ImS8* pos = ( const ImS8* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBars_S8PtrS8PtrS8PtrS8Ptr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_U8PtrU8PtrU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* neg,const ImU8* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_U8PTRU8PTRU8PTRU8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* xs = ( const ImU8* ) hb_parptr( 2 );
   const ImU8* ys = ( const ImU8* ) hb_parptr( 3 );
   const ImU8* neg = ( const ImU8* ) hb_parptr( 4 );
   const ImU8* pos = ( const ImU8* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBars_U8PtrU8PtrU8PtrU8Ptr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_S16PtrS16PtrS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* neg,const ImS16* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_S16PTRS16PTRS16PTRS16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* xs = ( const ImS16* ) hb_parptr( 2 );
   const ImS16* ys = ( const ImS16* ) hb_parptr( 3 );
   const ImS16* neg = ( const ImS16* ) hb_parptr( 4 );
   const ImS16* pos = ( const ImS16* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBars_S16PtrS16PtrS16PtrS16Ptr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_U16PtrU16PtrU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* neg,const ImU16* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_U16PTRU16PTRU16PTRU16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* xs = ( const ImU16* ) hb_parptr( 2 );
   const ImU16* ys = ( const ImU16* ) hb_parptr( 3 );
   const ImU16* neg = ( const ImU16* ) hb_parptr( 4 );
   const ImU16* pos = ( const ImU16* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBars_U16PtrU16PtrU16PtrU16Ptr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_S32PtrS32PtrS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* neg,const ImS32* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_S32PTRS32PTRS32PTRS32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* xs = ( const ImS32* ) hb_parptr( 2 );
   const ImS32* ys = ( const ImS32* ) hb_parptr( 3 );
   const ImS32* neg = ( const ImS32* ) hb_parptr( 4 );
   const ImS32* pos = ( const ImS32* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBars_S32PtrS32PtrS32PtrS32Ptr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_U32PtrU32PtrU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* neg,const ImU32* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_U32PTRU32PTRU32PTRU32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* xs = ( const ImU32* ) hb_parptr( 2 );
   const ImU32* ys = ( const ImU32* ) hb_parptr( 3 );
   const ImU32* neg = ( const ImU32* ) hb_parptr( 4 );
   const ImU32* pos = ( const ImU32* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBars_U32PtrU32PtrU32PtrU32Ptr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_S64PtrS64PtrS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* neg,const ImS64* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_S64PTRS64PTRS64PTRS64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* xs = ( const ImS64* ) hb_parptr( 2 );
   const ImS64* ys = ( const ImS64* ) hb_parptr( 3 );
   const ImS64* neg = ( const ImS64* ) hb_parptr( 4 );
   const ImS64* pos = ( const ImS64* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBars_S64PtrS64PtrS64PtrS64Ptr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBars_U64PtrU64PtrU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* neg,const ImU64* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARS_U64PTRU64PTRU64PTRU64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* xs = ( const ImU64* ) hb_parptr( 2 );
   const ImU64* ys = ( const ImU64* ) hb_parptr( 3 );
   const ImU64* neg = ( const ImU64* ) hb_parptr( 4 );
   const ImU64* pos = ( const ImU64* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBars_U64PtrU64PtrU64PtrU64Ptr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_FloatPtrFloatPtrFloatPtrInt(const char* label_id,const float* xs,const float* ys,const float* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_FLOATPTRFLOATPTRFLOATPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const float* xs = ( const float* ) hb_parptr( 2 );
   const float* ys = ( const float* ) hb_parptr( 3 );
   const float* err = ( const float* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBarsH_FloatPtrFloatPtrFloatPtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_doublePtrdoublePtrdoublePtrInt(const char* label_id,const double* xs,const double* ys,const double* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_DOUBLEPTRDOUBLEPTRDOUBLEPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const double* xs = ( const double* ) hb_parptr( 2 );
   const double* ys = ( const double* ) hb_parptr( 3 );
   const double* err = ( const double* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBarsH_doublePtrdoublePtrdoublePtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_S8PtrS8PtrS8PtrInt(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_S8PTRS8PTRS8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* xs = ( const ImS8* ) hb_parptr( 2 );
   const ImS8* ys = ( const ImS8* ) hb_parptr( 3 );
   const ImS8* err = ( const ImS8* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBarsH_S8PtrS8PtrS8PtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_U8PtrU8PtrU8PtrInt(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_U8PTRU8PTRU8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* xs = ( const ImU8* ) hb_parptr( 2 );
   const ImU8* ys = ( const ImU8* ) hb_parptr( 3 );
   const ImU8* err = ( const ImU8* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBarsH_U8PtrU8PtrU8PtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_S16PtrS16PtrS16PtrInt(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_S16PTRS16PTRS16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* xs = ( const ImS16* ) hb_parptr( 2 );
   const ImS16* ys = ( const ImS16* ) hb_parptr( 3 );
   const ImS16* err = ( const ImS16* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBarsH_S16PtrS16PtrS16PtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_U16PtrU16PtrU16PtrInt(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_U16PTRU16PTRU16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* xs = ( const ImU16* ) hb_parptr( 2 );
   const ImU16* ys = ( const ImU16* ) hb_parptr( 3 );
   const ImU16* err = ( const ImU16* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBarsH_U16PtrU16PtrU16PtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_S32PtrS32PtrS32PtrInt(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_S32PTRS32PTRS32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* xs = ( const ImS32* ) hb_parptr( 2 );
   const ImS32* ys = ( const ImS32* ) hb_parptr( 3 );
   const ImS32* err = ( const ImS32* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBarsH_S32PtrS32PtrS32PtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_U32PtrU32PtrU32PtrInt(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_U32PTRU32PTRU32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* xs = ( const ImU32* ) hb_parptr( 2 );
   const ImU32* ys = ( const ImU32* ) hb_parptr( 3 );
   const ImU32* err = ( const ImU32* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBarsH_U32PtrU32PtrU32PtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_S64PtrS64PtrS64PtrInt(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_S64PTRS64PTRS64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* xs = ( const ImS64* ) hb_parptr( 2 );
   const ImS64* ys = ( const ImS64* ) hb_parptr( 3 );
   const ImS64* err = ( const ImS64* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBarsH_S64PtrS64PtrS64PtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_U64PtrU64PtrU64PtrInt(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* err,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_U64PTRU64PTRU64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* xs = ( const ImU64* ) hb_parptr( 2 );
   const ImU64* ys = ( const ImU64* ) hb_parptr( 3 );
   const ImU64* err = ( const ImU64* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotErrorBarsH_U64PtrU64PtrU64PtrInt(label_id,xs,ys,err,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_FloatPtrFloatPtrFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,const float* neg,const float* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_FLOATPTRFLOATPTRFLOATPTRFLOATPTR )
{
   const char* label_id = hb_parcx( 1 );
   const float* xs = ( const float* ) hb_parptr( 2 );
   const float* ys = ( const float* ) hb_parptr( 3 );
   const float* neg = ( const float* ) hb_parptr( 4 );
   const float* pos = ( const float* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBarsH_FloatPtrFloatPtrFloatPtrFloatPtr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_doublePtrdoublePtrdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,const double* neg,const double* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_DOUBLEPTRDOUBLEPTRDOUBLEPTRDOUBLEPTR )
{
   const char* label_id = hb_parcx( 1 );
   const double* xs = ( const double* ) hb_parptr( 2 );
   const double* ys = ( const double* ) hb_parptr( 3 );
   const double* neg = ( const double* ) hb_parptr( 4 );
   const double* pos = ( const double* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBarsH_doublePtrdoublePtrdoublePtrdoublePtr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_S8PtrS8PtrS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* neg,const ImS8* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_S8PTRS8PTRS8PTRS8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* xs = ( const ImS8* ) hb_parptr( 2 );
   const ImS8* ys = ( const ImS8* ) hb_parptr( 3 );
   const ImS8* neg = ( const ImS8* ) hb_parptr( 4 );
   const ImS8* pos = ( const ImS8* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBarsH_S8PtrS8PtrS8PtrS8Ptr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_U8PtrU8PtrU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* neg,const ImU8* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_U8PTRU8PTRU8PTRU8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* xs = ( const ImU8* ) hb_parptr( 2 );
   const ImU8* ys = ( const ImU8* ) hb_parptr( 3 );
   const ImU8* neg = ( const ImU8* ) hb_parptr( 4 );
   const ImU8* pos = ( const ImU8* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBarsH_U8PtrU8PtrU8PtrU8Ptr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_S16PtrS16PtrS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* neg,const ImS16* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_S16PTRS16PTRS16PTRS16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* xs = ( const ImS16* ) hb_parptr( 2 );
   const ImS16* ys = ( const ImS16* ) hb_parptr( 3 );
   const ImS16* neg = ( const ImS16* ) hb_parptr( 4 );
   const ImS16* pos = ( const ImS16* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBarsH_S16PtrS16PtrS16PtrS16Ptr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_U16PtrU16PtrU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* neg,const ImU16* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_U16PTRU16PTRU16PTRU16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* xs = ( const ImU16* ) hb_parptr( 2 );
   const ImU16* ys = ( const ImU16* ) hb_parptr( 3 );
   const ImU16* neg = ( const ImU16* ) hb_parptr( 4 );
   const ImU16* pos = ( const ImU16* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBarsH_U16PtrU16PtrU16PtrU16Ptr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_S32PtrS32PtrS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* neg,const ImS32* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_S32PTRS32PTRS32PTRS32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* xs = ( const ImS32* ) hb_parptr( 2 );
   const ImS32* ys = ( const ImS32* ) hb_parptr( 3 );
   const ImS32* neg = ( const ImS32* ) hb_parptr( 4 );
   const ImS32* pos = ( const ImS32* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBarsH_S32PtrS32PtrS32PtrS32Ptr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_U32PtrU32PtrU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* neg,const ImU32* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_U32PTRU32PTRU32PTRU32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* xs = ( const ImU32* ) hb_parptr( 2 );
   const ImU32* ys = ( const ImU32* ) hb_parptr( 3 );
   const ImU32* neg = ( const ImU32* ) hb_parptr( 4 );
   const ImU32* pos = ( const ImU32* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBarsH_U32PtrU32PtrU32PtrU32Ptr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_S64PtrS64PtrS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* neg,const ImS64* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_S64PTRS64PTRS64PTRS64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* xs = ( const ImS64* ) hb_parptr( 2 );
   const ImS64* ys = ( const ImS64* ) hb_parptr( 3 );
   const ImS64* neg = ( const ImS64* ) hb_parptr( 4 );
   const ImS64* pos = ( const ImS64* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBarsH_S64PtrS64PtrS64PtrS64Ptr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotErrorBarsH_U64PtrU64PtrU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* neg,const ImU64* pos,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTERRORBARSH_U64PTRU64PTRU64PTRU64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* xs = ( const ImU64* ) hb_parptr( 2 );
   const ImU64* ys = ( const ImU64* ) hb_parptr( 3 );
   const ImU64* neg = ( const ImU64* ) hb_parptr( 4 );
   const ImU64* pos = ( const ImU64* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotErrorBarsH_U64PtrU64PtrU64PtrU64Ptr(label_id,xs,ys,neg,pos,count,offset,stride);
}

/* void ImPlot_PlotHLines_FloatPtr(const char* label_id,const float* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTHLINES_FLOATPTR )
{
   const char* label_id = hb_parcx( 1 );
   const float* ys = ( const float* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotHLines_FloatPtr(label_id,ys,count,offset,stride);
}

/* void ImPlot_PlotHLines_doublePtr(const char* label_id,const double* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTHLINES_DOUBLEPTR )
{
   const char* label_id = hb_parcx( 1 );
   const double* ys = ( const double* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotHLines_doublePtr(label_id,ys,count,offset,stride);
}

/* void ImPlot_PlotHLines_S8Ptr(const char* label_id,const ImS8* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTHLINES_S8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* ys = ( const ImS8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotHLines_S8Ptr(label_id,ys,count,offset,stride);
}

/* void ImPlot_PlotHLines_U8Ptr(const char* label_id,const ImU8* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTHLINES_U8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* ys = ( const ImU8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotHLines_U8Ptr(label_id,ys,count,offset,stride);
}

/* void ImPlot_PlotHLines_S16Ptr(const char* label_id,const ImS16* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTHLINES_S16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* ys = ( const ImS16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotHLines_S16Ptr(label_id,ys,count,offset,stride);
}

/* void ImPlot_PlotHLines_U16Ptr(const char* label_id,const ImU16* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTHLINES_U16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* ys = ( const ImU16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotHLines_U16Ptr(label_id,ys,count,offset,stride);
}

/* void ImPlot_PlotHLines_S32Ptr(const char* label_id,const ImS32* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTHLINES_S32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* ys = ( const ImS32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotHLines_S32Ptr(label_id,ys,count,offset,stride);
}

/* void ImPlot_PlotHLines_U32Ptr(const char* label_id,const ImU32* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTHLINES_U32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* ys = ( const ImU32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotHLines_U32Ptr(label_id,ys,count,offset,stride);
}

/* void ImPlot_PlotHLines_S64Ptr(const char* label_id,const ImS64* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTHLINES_S64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* ys = ( const ImS64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotHLines_S64Ptr(label_id,ys,count,offset,stride);
}

/* void ImPlot_PlotHLines_U64Ptr(const char* label_id,const ImU64* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTHLINES_U64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* ys = ( const ImU64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotHLines_U64Ptr(label_id,ys,count,offset,stride);
}

/* void ImPlot_PlotHeatmap_FloatPtr(const char* label_id,const float* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max) */
HB_FUNC( IMPLOT_PLOTHEATMAP_FLOATPTR )
{
   const char* label_id = hb_parcx( 1 );
   const float* values = ( const float* ) hb_parptr( 2 );
   int rows = hb_parni( 3 );
   int cols = hb_parni( 4 );
   double scale_min = hb_parnd( 5 );
   double scale_max = hb_parnd( 6 );
   const char* label_fmt = hb_parcx( 7 );
   const ImPlotPoint bounds_min;
   const ImPlotPoint bounds_max;
   ImPlot_PlotHeatmap_FloatPtr(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}

/* void ImPlot_PlotHeatmap_doublePtr(const char* label_id,const double* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max) */
HB_FUNC( IMPLOT_PLOTHEATMAP_DOUBLEPTR )
{
   const char* label_id = hb_parcx( 1 );
   const double* values = ( const double* ) hb_parptr( 2 );
   int rows = hb_parni( 3 );
   int cols = hb_parni( 4 );
   double scale_min = hb_parnd( 5 );
   double scale_max = hb_parnd( 6 );
   const char* label_fmt = hb_parcx( 7 );
   const ImPlotPoint bounds_min;
   const ImPlotPoint bounds_max;
   ImPlot_PlotHeatmap_doublePtr(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}

/* void ImPlot_PlotHeatmap_S8Ptr(const char* label_id,const ImS8* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max) */
HB_FUNC( IMPLOT_PLOTHEATMAP_S8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* values = ( const ImS8* ) hb_parptr( 2 );
   int rows = hb_parni( 3 );
   int cols = hb_parni( 4 );
   double scale_min = hb_parnd( 5 );
   double scale_max = hb_parnd( 6 );
   const char* label_fmt = hb_parcx( 7 );
   const ImPlotPoint bounds_min;
   const ImPlotPoint bounds_max;
   ImPlot_PlotHeatmap_S8Ptr(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}

/* void ImPlot_PlotHeatmap_U8Ptr(const char* label_id,const ImU8* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max) */
HB_FUNC( IMPLOT_PLOTHEATMAP_U8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* values = ( const ImU8* ) hb_parptr( 2 );
   int rows = hb_parni( 3 );
   int cols = hb_parni( 4 );
   double scale_min = hb_parnd( 5 );
   double scale_max = hb_parnd( 6 );
   const char* label_fmt = hb_parcx( 7 );
   const ImPlotPoint bounds_min;
   const ImPlotPoint bounds_max;
   ImPlot_PlotHeatmap_U8Ptr(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}

/* void ImPlot_PlotHeatmap_S16Ptr(const char* label_id,const ImS16* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max) */
HB_FUNC( IMPLOT_PLOTHEATMAP_S16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* values = ( const ImS16* ) hb_parptr( 2 );
   int rows = hb_parni( 3 );
   int cols = hb_parni( 4 );
   double scale_min = hb_parnd( 5 );
   double scale_max = hb_parnd( 6 );
   const char* label_fmt = hb_parcx( 7 );
   const ImPlotPoint bounds_min;
   const ImPlotPoint bounds_max;
   ImPlot_PlotHeatmap_S16Ptr(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}

/* void ImPlot_PlotHeatmap_U16Ptr(const char* label_id,const ImU16* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max) */
HB_FUNC( IMPLOT_PLOTHEATMAP_U16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* values = ( const ImU16* ) hb_parptr( 2 );
   int rows = hb_parni( 3 );
   int cols = hb_parni( 4 );
   double scale_min = hb_parnd( 5 );
   double scale_max = hb_parnd( 6 );
   const char* label_fmt = hb_parcx( 7 );
   const ImPlotPoint bounds_min;
   const ImPlotPoint bounds_max;
   ImPlot_PlotHeatmap_U16Ptr(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}

/* void ImPlot_PlotHeatmap_S32Ptr(const char* label_id,const ImS32* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max) */
HB_FUNC( IMPLOT_PLOTHEATMAP_S32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* values = ( const ImS32* ) hb_parptr( 2 );
   int rows = hb_parni( 3 );
   int cols = hb_parni( 4 );
   double scale_min = hb_parnd( 5 );
   double scale_max = hb_parnd( 6 );
   const char* label_fmt = hb_parcx( 7 );
   const ImPlotPoint bounds_min;
   const ImPlotPoint bounds_max;
   ImPlot_PlotHeatmap_S32Ptr(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}

/* void ImPlot_PlotHeatmap_U32Ptr(const char* label_id,const ImU32* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max) */
HB_FUNC( IMPLOT_PLOTHEATMAP_U32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* values = ( const ImU32* ) hb_parptr( 2 );
   int rows = hb_parni( 3 );
   int cols = hb_parni( 4 );
   double scale_min = hb_parnd( 5 );
   double scale_max = hb_parnd( 6 );
   const char* label_fmt = hb_parcx( 7 );
   const ImPlotPoint bounds_min;
   const ImPlotPoint bounds_max;
   ImPlot_PlotHeatmap_U32Ptr(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}

/* void ImPlot_PlotHeatmap_S64Ptr(const char* label_id,const ImS64* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max) */
HB_FUNC( IMPLOT_PLOTHEATMAP_S64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* values = ( const ImS64* ) hb_parptr( 2 );
   int rows = hb_parni( 3 );
   int cols = hb_parni( 4 );
   double scale_min = hb_parnd( 5 );
   double scale_max = hb_parnd( 6 );
   const char* label_fmt = hb_parcx( 7 );
   const ImPlotPoint bounds_min;
   const ImPlotPoint bounds_max;
   ImPlot_PlotHeatmap_S64Ptr(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}

/* void ImPlot_PlotHeatmap_U64Ptr(const char* label_id,const ImU64* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max) */
HB_FUNC( IMPLOT_PLOTHEATMAP_U64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* values = ( const ImU64* ) hb_parptr( 2 );
   int rows = hb_parni( 3 );
   int cols = hb_parni( 4 );
   double scale_min = hb_parnd( 5 );
   double scale_max = hb_parnd( 6 );
   const char* label_fmt = hb_parcx( 7 );
   const ImPlotPoint bounds_min;
   const ImPlotPoint bounds_max;
   ImPlot_PlotHeatmap_U64Ptr(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}

/* double ImPlot_PlotHistogram_FloatPtr(const char* label_id,const float* values,int count,int bins,bool cumulative,bool density,ImPlotRange range,bool outliers,double bar_scale) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM_FLOATPTR )
{
   const char* label_id = hb_parcx( 1 );
   const float* values = ( const float* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int bins = hb_parni( 4 );
   bool cumulative = hb_parldef( 5, 0 );
   bool density = hb_parldef( 6, 0 );
   ImPlotRange range;
   bool outliers = hb_parldef( 8, 1 );
   double bar_scale = hb_parnd( 9 );
   double ret = ImPlot_PlotHistogram_FloatPtr(label_id,values,count,bins,cumulative,density,range,outliers,bar_scale);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram_doublePtr(const char* label_id,const double* values,int count,int bins,bool cumulative,bool density,ImPlotRange range,bool outliers,double bar_scale) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM_DOUBLEPTR )
{
   const char* label_id = hb_parcx( 1 );
   const double* values = ( const double* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int bins = hb_parni( 4 );
   bool cumulative = hb_parldef( 5, 0 );
   bool density = hb_parldef( 6, 0 );
   ImPlotRange range;
   bool outliers = hb_parldef( 8, 1 );
   double bar_scale = hb_parnd( 9 );
   double ret = ImPlot_PlotHistogram_doublePtr(label_id,values,count,bins,cumulative,density,range,outliers,bar_scale);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram_S8Ptr(const char* label_id,const ImS8* values,int count,int bins,bool cumulative,bool density,ImPlotRange range,bool outliers,double bar_scale) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM_S8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* values = ( const ImS8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int bins = hb_parni( 4 );
   bool cumulative = hb_parldef( 5, 0 );
   bool density = hb_parldef( 6, 0 );
   ImPlotRange range;
   bool outliers = hb_parldef( 8, 1 );
   double bar_scale = hb_parnd( 9 );
   double ret = ImPlot_PlotHistogram_S8Ptr(label_id,values,count,bins,cumulative,density,range,outliers,bar_scale);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram_U8Ptr(const char* label_id,const ImU8* values,int count,int bins,bool cumulative,bool density,ImPlotRange range,bool outliers,double bar_scale) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM_U8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* values = ( const ImU8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int bins = hb_parni( 4 );
   bool cumulative = hb_parldef( 5, 0 );
   bool density = hb_parldef( 6, 0 );
   ImPlotRange range;
   bool outliers = hb_parldef( 8, 1 );
   double bar_scale = hb_parnd( 9 );
   double ret = ImPlot_PlotHistogram_U8Ptr(label_id,values,count,bins,cumulative,density,range,outliers,bar_scale);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram_S16Ptr(const char* label_id,const ImS16* values,int count,int bins,bool cumulative,bool density,ImPlotRange range,bool outliers,double bar_scale) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM_S16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* values = ( const ImS16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int bins = hb_parni( 4 );
   bool cumulative = hb_parldef( 5, 0 );
   bool density = hb_parldef( 6, 0 );
   ImPlotRange range;
   bool outliers = hb_parldef( 8, 1 );
   double bar_scale = hb_parnd( 9 );
   double ret = ImPlot_PlotHistogram_S16Ptr(label_id,values,count,bins,cumulative,density,range,outliers,bar_scale);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram_U16Ptr(const char* label_id,const ImU16* values,int count,int bins,bool cumulative,bool density,ImPlotRange range,bool outliers,double bar_scale) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM_U16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* values = ( const ImU16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int bins = hb_parni( 4 );
   bool cumulative = hb_parldef( 5, 0 );
   bool density = hb_parldef( 6, 0 );
   ImPlotRange range;
   bool outliers = hb_parldef( 8, 1 );
   double bar_scale = hb_parnd( 9 );
   double ret = ImPlot_PlotHistogram_U16Ptr(label_id,values,count,bins,cumulative,density,range,outliers,bar_scale);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram_S32Ptr(const char* label_id,const ImS32* values,int count,int bins,bool cumulative,bool density,ImPlotRange range,bool outliers,double bar_scale) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM_S32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* values = ( const ImS32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int bins = hb_parni( 4 );
   bool cumulative = hb_parldef( 5, 0 );
   bool density = hb_parldef( 6, 0 );
   ImPlotRange range;
   bool outliers = hb_parldef( 8, 1 );
   double bar_scale = hb_parnd( 9 );
   double ret = ImPlot_PlotHistogram_S32Ptr(label_id,values,count,bins,cumulative,density,range,outliers,bar_scale);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram_U32Ptr(const char* label_id,const ImU32* values,int count,int bins,bool cumulative,bool density,ImPlotRange range,bool outliers,double bar_scale) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM_U32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* values = ( const ImU32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int bins = hb_parni( 4 );
   bool cumulative = hb_parldef( 5, 0 );
   bool density = hb_parldef( 6, 0 );
   ImPlotRange range;
   bool outliers = hb_parldef( 8, 1 );
   double bar_scale = hb_parnd( 9 );
   double ret = ImPlot_PlotHistogram_U32Ptr(label_id,values,count,bins,cumulative,density,range,outliers,bar_scale);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram_S64Ptr(const char* label_id,const ImS64* values,int count,int bins,bool cumulative,bool density,ImPlotRange range,bool outliers,double bar_scale) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM_S64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* values = ( const ImS64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int bins = hb_parni( 4 );
   bool cumulative = hb_parldef( 5, 0 );
   bool density = hb_parldef( 6, 0 );
   ImPlotRange range;
   bool outliers = hb_parldef( 8, 1 );
   double bar_scale = hb_parnd( 9 );
   double ret = ImPlot_PlotHistogram_S64Ptr(label_id,values,count,bins,cumulative,density,range,outliers,bar_scale);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram_U64Ptr(const char* label_id,const ImU64* values,int count,int bins,bool cumulative,bool density,ImPlotRange range,bool outliers,double bar_scale) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM_U64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* values = ( const ImU64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int bins = hb_parni( 4 );
   bool cumulative = hb_parldef( 5, 0 );
   bool density = hb_parldef( 6, 0 );
   ImPlotRange range;
   bool outliers = hb_parldef( 8, 1 );
   double bar_scale = hb_parnd( 9 );
   double ret = ImPlot_PlotHistogram_U64Ptr(label_id,values,count,bins,cumulative,density,range,outliers,bar_scale);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram2D_FloatPtr(const char* label_id,const float* xs,const float* ys,int count,int x_bins,int y_bins,bool density,ImPlotLimits range,bool outliers) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM2D_FLOATPTR )
{
   const char* label_id = hb_parcx( 1 );
   const float* xs = ( const float* ) hb_parptr( 2 );
   const float* ys = ( const float* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int x_bins = hb_parni( 5 );
   int y_bins = hb_parni( 6 );
   bool density = hb_parldef( 7, 0 );
   ImPlotLimits range;
   bool outliers = hb_parldef( 9, 1 );
   double ret = ImPlot_PlotHistogram2D_FloatPtr(label_id,xs,ys,count,x_bins,y_bins,density,range,outliers);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram2D_doublePtr(const char* label_id,const double* xs,const double* ys,int count,int x_bins,int y_bins,bool density,ImPlotLimits range,bool outliers) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM2D_DOUBLEPTR )
{
   const char* label_id = hb_parcx( 1 );
   const double* xs = ( const double* ) hb_parptr( 2 );
   const double* ys = ( const double* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int x_bins = hb_parni( 5 );
   int y_bins = hb_parni( 6 );
   bool density = hb_parldef( 7, 0 );
   ImPlotLimits range;
   bool outliers = hb_parldef( 9, 1 );
   double ret = ImPlot_PlotHistogram2D_doublePtr(label_id,xs,ys,count,x_bins,y_bins,density,range,outliers);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram2D_S8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int x_bins,int y_bins,bool density,ImPlotLimits range,bool outliers) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM2D_S8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* xs = ( const ImS8* ) hb_parptr( 2 );
   const ImS8* ys = ( const ImS8* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int x_bins = hb_parni( 5 );
   int y_bins = hb_parni( 6 );
   bool density = hb_parldef( 7, 0 );
   ImPlotLimits range;
   bool outliers = hb_parldef( 9, 1 );
   double ret = ImPlot_PlotHistogram2D_S8Ptr(label_id,xs,ys,count,x_bins,y_bins,density,range,outliers);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram2D_U8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int x_bins,int y_bins,bool density,ImPlotLimits range,bool outliers) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM2D_U8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* xs = ( const ImU8* ) hb_parptr( 2 );
   const ImU8* ys = ( const ImU8* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int x_bins = hb_parni( 5 );
   int y_bins = hb_parni( 6 );
   bool density = hb_parldef( 7, 0 );
   ImPlotLimits range;
   bool outliers = hb_parldef( 9, 1 );
   double ret = ImPlot_PlotHistogram2D_U8Ptr(label_id,xs,ys,count,x_bins,y_bins,density,range,outliers);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram2D_S16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int x_bins,int y_bins,bool density,ImPlotLimits range,bool outliers) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM2D_S16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* xs = ( const ImS16* ) hb_parptr( 2 );
   const ImS16* ys = ( const ImS16* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int x_bins = hb_parni( 5 );
   int y_bins = hb_parni( 6 );
   bool density = hb_parldef( 7, 0 );
   ImPlotLimits range;
   bool outliers = hb_parldef( 9, 1 );
   double ret = ImPlot_PlotHistogram2D_S16Ptr(label_id,xs,ys,count,x_bins,y_bins,density,range,outliers);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram2D_U16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int x_bins,int y_bins,bool density,ImPlotLimits range,bool outliers) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM2D_U16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* xs = ( const ImU16* ) hb_parptr( 2 );
   const ImU16* ys = ( const ImU16* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int x_bins = hb_parni( 5 );
   int y_bins = hb_parni( 6 );
   bool density = hb_parldef( 7, 0 );
   ImPlotLimits range;
   bool outliers = hb_parldef( 9, 1 );
   double ret = ImPlot_PlotHistogram2D_U16Ptr(label_id,xs,ys,count,x_bins,y_bins,density,range,outliers);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram2D_S32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int x_bins,int y_bins,bool density,ImPlotLimits range,bool outliers) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM2D_S32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* xs = ( const ImS32* ) hb_parptr( 2 );
   const ImS32* ys = ( const ImS32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int x_bins = hb_parni( 5 );
   int y_bins = hb_parni( 6 );
   bool density = hb_parldef( 7, 0 );
   ImPlotLimits range;
   bool outliers = hb_parldef( 9, 1 );
   double ret = ImPlot_PlotHistogram2D_S32Ptr(label_id,xs,ys,count,x_bins,y_bins,density,range,outliers);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram2D_U32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int x_bins,int y_bins,bool density,ImPlotLimits range,bool outliers) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM2D_U32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* xs = ( const ImU32* ) hb_parptr( 2 );
   const ImU32* ys = ( const ImU32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int x_bins = hb_parni( 5 );
   int y_bins = hb_parni( 6 );
   bool density = hb_parldef( 7, 0 );
   ImPlotLimits range;
   bool outliers = hb_parldef( 9, 1 );
   double ret = ImPlot_PlotHistogram2D_U32Ptr(label_id,xs,ys,count,x_bins,y_bins,density,range,outliers);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram2D_S64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int x_bins,int y_bins,bool density,ImPlotLimits range,bool outliers) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM2D_S64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* xs = ( const ImS64* ) hb_parptr( 2 );
   const ImS64* ys = ( const ImS64* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int x_bins = hb_parni( 5 );
   int y_bins = hb_parni( 6 );
   bool density = hb_parldef( 7, 0 );
   ImPlotLimits range;
   bool outliers = hb_parldef( 9, 1 );
   double ret = ImPlot_PlotHistogram2D_S64Ptr(label_id,xs,ys,count,x_bins,y_bins,density,range,outliers);
   hb_retnd( ret );
}

/* double ImPlot_PlotHistogram2D_U64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int x_bins,int y_bins,bool density,ImPlotLimits range,bool outliers) */
HB_FUNC( IMPLOT_PLOTHISTOGRAM2D_U64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* xs = ( const ImU64* ) hb_parptr( 2 );
   const ImU64* ys = ( const ImU64* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int x_bins = hb_parni( 5 );
   int y_bins = hb_parni( 6 );
   bool density = hb_parldef( 7, 0 );
   ImPlotLimits range;
   bool outliers = hb_parldef( 9, 1 );
   double ret = ImPlot_PlotHistogram2D_U64Ptr(label_id,xs,ys,count,x_bins,y_bins,density,range,outliers);
   hb_retnd( ret );
}

/* void ImPlot_PlotImage(const char* label_id,ImTextureID user_texture_id,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 tint_col) */
HB_FUNC( IMPLOT_PLOTIMAGE )
{
   const char* label_id = hb_parcx( 1 );
   ImTextureID user_texture_id;
   const ImPlotPoint bounds_min;
   const ImPlotPoint bounds_max;
   PHB_ITEM puv0 = hb_param( 5, HB_IT_ARRAY );
   const ImVec2 uv0 = ImVec2{ _paf( puv0, 1 ), _paf( puv0, 2 ) };
   PHB_ITEM puv1 = hb_param( 6, HB_IT_ARRAY );
   const ImVec2 uv1 = ImVec2{ _paf( puv1, 1 ), _paf( puv1, 2 ) };
   PHB_ITEM ptint_col = hb_param( 7, HB_IT_ARRAY );
   const ImVec4 tint_col = ImVec4{ _paf( ptint_col, 1 ), _paf( ptint_col, 2 ), _paf( ptint_col, 3 ), _paf( ptint_col, 4 ) };
   ImPlot_PlotImage(label_id,user_texture_id,bounds_min,bounds_max,uv0,uv1,tint_col);
}

/* void ImPlot_PlotLine_FloatPtrInt(const char* label_id,const float* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_FLOATPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const float* values = ( const float* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotLine_FloatPtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotLine_doublePtrInt(const char* label_id,const double* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_DOUBLEPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const double* values = ( const double* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotLine_doublePtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotLine_S8PtrInt(const char* label_id,const ImS8* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_S8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* values = ( const ImS8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotLine_S8PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotLine_U8PtrInt(const char* label_id,const ImU8* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_U8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* values = ( const ImU8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotLine_U8PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotLine_S16PtrInt(const char* label_id,const ImS16* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_S16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* values = ( const ImS16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotLine_S16PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotLine_U16PtrInt(const char* label_id,const ImU16* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_U16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* values = ( const ImU16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotLine_U16PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotLine_S32PtrInt(const char* label_id,const ImS32* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_S32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* values = ( const ImS32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotLine_S32PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotLine_U32PtrInt(const char* label_id,const ImU32* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_U32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* values = ( const ImU32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotLine_U32PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotLine_S64PtrInt(const char* label_id,const ImS64* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_S64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* values = ( const ImS64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotLine_S64PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotLine_U64PtrInt(const char* label_id,const ImU64* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_U64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* values = ( const ImU64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotLine_U64PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotLine_FloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_FLOATPTRFLOATPTR )
{
   const char* label_id = hb_parcx( 1 );
   const float* xs = ( const float* ) hb_parptr( 2 );
   const float* ys = ( const float* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotLine_FloatPtrFloatPtr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotLine_doublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_DOUBLEPTRDOUBLEPTR )
{
   const char* label_id = hb_parcx( 1 );
   const double* xs = ( const double* ) hb_parptr( 2 );
   const double* ys = ( const double* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotLine_doublePtrdoublePtr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotLine_S8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_S8PTRS8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* xs = ( const ImS8* ) hb_parptr( 2 );
   const ImS8* ys = ( const ImS8* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotLine_S8PtrS8Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotLine_U8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_U8PTRU8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* xs = ( const ImU8* ) hb_parptr( 2 );
   const ImU8* ys = ( const ImU8* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotLine_U8PtrU8Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotLine_S16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_S16PTRS16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* xs = ( const ImS16* ) hb_parptr( 2 );
   const ImS16* ys = ( const ImS16* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotLine_S16PtrS16Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotLine_U16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_U16PTRU16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* xs = ( const ImU16* ) hb_parptr( 2 );
   const ImU16* ys = ( const ImU16* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotLine_U16PtrU16Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotLine_S32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_S32PTRS32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* xs = ( const ImS32* ) hb_parptr( 2 );
   const ImS32* ys = ( const ImS32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotLine_S32PtrS32Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotLine_U32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_U32PTRU32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* xs = ( const ImU32* ) hb_parptr( 2 );
   const ImU32* ys = ( const ImU32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotLine_U32PtrU32Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotLine_S64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_S64PTRS64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* xs = ( const ImS64* ) hb_parptr( 2 );
   const ImS64* ys = ( const ImS64* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotLine_S64PtrS64Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotLine_U64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTLINE_U64PTRU64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* xs = ( const ImU64* ) hb_parptr( 2 );
   const ImU64* ys = ( const ImU64* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotLine_U64PtrU64Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotLineG(const char* label_id,ImPlotPoint(*getter)(void* data,int idx),void* data,int count) */
HB_FUNC( IMPLOT_PLOTLINEG )
{
   const char* label_id = hb_parcx( 1 );
   void* data = ( void* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   ImPlot_PlotLineG(label_id,NULL /* &hb_ig_getter */,data,count);
}

/* void ImPlot_PlotPieChart_FloatPtr(const char* const label_ids[],const float* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0) */
HB_FUNC( IMPLOT_PLOTPIECHART_FLOATPTR )
{
   const char* const label_ids[] = { 0 };
   const float* values = ( const float* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double x = hb_parnd( 4 );
   double y = hb_parnd( 5 );
   double radius = hb_parnd( 6 );
   bool normalize = hb_parldef( 7, 0 );
   const char* label_fmt = hb_parcx( 8 );
   double angle0 = hb_parnd( 9 );
   ImPlot_PlotPieChart_FloatPtr(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}

/* void ImPlot_PlotPieChart_doublePtr(const char* const label_ids[],const double* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0) */
HB_FUNC( IMPLOT_PLOTPIECHART_DOUBLEPTR )
{
   const char* const label_ids[] = { 0 };
   const double* values = ( const double* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double x = hb_parnd( 4 );
   double y = hb_parnd( 5 );
   double radius = hb_parnd( 6 );
   bool normalize = hb_parldef( 7, 0 );
   const char* label_fmt = hb_parcx( 8 );
   double angle0 = hb_parnd( 9 );
   ImPlot_PlotPieChart_doublePtr(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}

/* void ImPlot_PlotPieChart_S8Ptr(const char* const label_ids[],const ImS8* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0) */
HB_FUNC( IMPLOT_PLOTPIECHART_S8PTR )
{
   const char* const label_ids[] = { 0 };
   const ImS8* values = ( const ImS8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double x = hb_parnd( 4 );
   double y = hb_parnd( 5 );
   double radius = hb_parnd( 6 );
   bool normalize = hb_parldef( 7, 0 );
   const char* label_fmt = hb_parcx( 8 );
   double angle0 = hb_parnd( 9 );
   ImPlot_PlotPieChart_S8Ptr(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}

/* void ImPlot_PlotPieChart_U8Ptr(const char* const label_ids[],const ImU8* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0) */
HB_FUNC( IMPLOT_PLOTPIECHART_U8PTR )
{
   const char* const label_ids[] = { 0 };
   const ImU8* values = ( const ImU8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double x = hb_parnd( 4 );
   double y = hb_parnd( 5 );
   double radius = hb_parnd( 6 );
   bool normalize = hb_parldef( 7, 0 );
   const char* label_fmt = hb_parcx( 8 );
   double angle0 = hb_parnd( 9 );
   ImPlot_PlotPieChart_U8Ptr(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}

/* void ImPlot_PlotPieChart_S16Ptr(const char* const label_ids[],const ImS16* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0) */
HB_FUNC( IMPLOT_PLOTPIECHART_S16PTR )
{
   const char* const label_ids[] = { 0 };
   const ImS16* values = ( const ImS16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double x = hb_parnd( 4 );
   double y = hb_parnd( 5 );
   double radius = hb_parnd( 6 );
   bool normalize = hb_parldef( 7, 0 );
   const char* label_fmt = hb_parcx( 8 );
   double angle0 = hb_parnd( 9 );
   ImPlot_PlotPieChart_S16Ptr(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}

/* void ImPlot_PlotPieChart_U16Ptr(const char* const label_ids[],const ImU16* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0) */
HB_FUNC( IMPLOT_PLOTPIECHART_U16PTR )
{
   const char* const label_ids[] = { 0 };
   const ImU16* values = ( const ImU16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double x = hb_parnd( 4 );
   double y = hb_parnd( 5 );
   double radius = hb_parnd( 6 );
   bool normalize = hb_parldef( 7, 0 );
   const char* label_fmt = hb_parcx( 8 );
   double angle0 = hb_parnd( 9 );
   ImPlot_PlotPieChart_U16Ptr(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}

/* void ImPlot_PlotPieChart_S32Ptr(const char* const label_ids[],const ImS32* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0) */
HB_FUNC( IMPLOT_PLOTPIECHART_S32PTR )
{
   const char* const label_ids[] = { 0 };
   const ImS32* values = ( const ImS32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double x = hb_parnd( 4 );
   double y = hb_parnd( 5 );
   double radius = hb_parnd( 6 );
   bool normalize = hb_parldef( 7, 0 );
   const char* label_fmt = hb_parcx( 8 );
   double angle0 = hb_parnd( 9 );
   ImPlot_PlotPieChart_S32Ptr(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}

/* void ImPlot_PlotPieChart_U32Ptr(const char* const label_ids[],const ImU32* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0) */
HB_FUNC( IMPLOT_PLOTPIECHART_U32PTR )
{
   const char* const label_ids[] = { 0 };
   const ImU32* values = ( const ImU32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double x = hb_parnd( 4 );
   double y = hb_parnd( 5 );
   double radius = hb_parnd( 6 );
   bool normalize = hb_parldef( 7, 0 );
   const char* label_fmt = hb_parcx( 8 );
   double angle0 = hb_parnd( 9 );
   ImPlot_PlotPieChart_U32Ptr(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}

/* void ImPlot_PlotPieChart_S64Ptr(const char* const label_ids[],const ImS64* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0) */
HB_FUNC( IMPLOT_PLOTPIECHART_S64PTR )
{
   const char* const label_ids[] = { 0 };
   const ImS64* values = ( const ImS64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double x = hb_parnd( 4 );
   double y = hb_parnd( 5 );
   double radius = hb_parnd( 6 );
   bool normalize = hb_parldef( 7, 0 );
   const char* label_fmt = hb_parcx( 8 );
   double angle0 = hb_parnd( 9 );
   ImPlot_PlotPieChart_S64Ptr(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}

/* void ImPlot_PlotPieChart_U64Ptr(const char* const label_ids[],const ImU64* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0) */
HB_FUNC( IMPLOT_PLOTPIECHART_U64PTR )
{
   const char* const label_ids[] = { 0 };
   const ImU64* values = ( const ImU64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double x = hb_parnd( 4 );
   double y = hb_parnd( 5 );
   double radius = hb_parnd( 6 );
   bool normalize = hb_parldef( 7, 0 );
   const char* label_fmt = hb_parcx( 8 );
   double angle0 = hb_parnd( 9 );
   ImPlot_PlotPieChart_U64Ptr(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}

/* void ImPlot_PlotScatter_FloatPtrInt(const char* label_id,const float* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_FLOATPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const float* values = ( const float* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotScatter_FloatPtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotScatter_doublePtrInt(const char* label_id,const double* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_DOUBLEPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const double* values = ( const double* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotScatter_doublePtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotScatter_S8PtrInt(const char* label_id,const ImS8* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_S8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* values = ( const ImS8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotScatter_S8PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotScatter_U8PtrInt(const char* label_id,const ImU8* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_U8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* values = ( const ImU8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotScatter_U8PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotScatter_S16PtrInt(const char* label_id,const ImS16* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_S16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* values = ( const ImS16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotScatter_S16PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotScatter_U16PtrInt(const char* label_id,const ImU16* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_U16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* values = ( const ImU16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotScatter_U16PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotScatter_S32PtrInt(const char* label_id,const ImS32* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_S32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* values = ( const ImS32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotScatter_S32PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotScatter_U32PtrInt(const char* label_id,const ImU32* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_U32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* values = ( const ImU32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotScatter_U32PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotScatter_S64PtrInt(const char* label_id,const ImS64* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_S64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* values = ( const ImS64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotScatter_S64PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotScatter_U64PtrInt(const char* label_id,const ImU64* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_U64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* values = ( const ImU64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotScatter_U64PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotScatter_FloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_FLOATPTRFLOATPTR )
{
   const char* label_id = hb_parcx( 1 );
   const float* xs = ( const float* ) hb_parptr( 2 );
   const float* ys = ( const float* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotScatter_FloatPtrFloatPtr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotScatter_doublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_DOUBLEPTRDOUBLEPTR )
{
   const char* label_id = hb_parcx( 1 );
   const double* xs = ( const double* ) hb_parptr( 2 );
   const double* ys = ( const double* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotScatter_doublePtrdoublePtr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotScatter_S8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_S8PTRS8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* xs = ( const ImS8* ) hb_parptr( 2 );
   const ImS8* ys = ( const ImS8* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotScatter_S8PtrS8Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotScatter_U8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_U8PTRU8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* xs = ( const ImU8* ) hb_parptr( 2 );
   const ImU8* ys = ( const ImU8* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotScatter_U8PtrU8Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotScatter_S16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_S16PTRS16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* xs = ( const ImS16* ) hb_parptr( 2 );
   const ImS16* ys = ( const ImS16* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotScatter_S16PtrS16Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotScatter_U16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_U16PTRU16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* xs = ( const ImU16* ) hb_parptr( 2 );
   const ImU16* ys = ( const ImU16* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotScatter_U16PtrU16Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotScatter_S32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_S32PTRS32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* xs = ( const ImS32* ) hb_parptr( 2 );
   const ImS32* ys = ( const ImS32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotScatter_S32PtrS32Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotScatter_U32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_U32PTRU32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* xs = ( const ImU32* ) hb_parptr( 2 );
   const ImU32* ys = ( const ImU32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotScatter_U32PtrU32Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotScatter_S64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_S64PTRS64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* xs = ( const ImS64* ) hb_parptr( 2 );
   const ImS64* ys = ( const ImS64* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotScatter_S64PtrS64Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotScatter_U64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSCATTER_U64PTRU64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* xs = ( const ImU64* ) hb_parptr( 2 );
   const ImU64* ys = ( const ImU64* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotScatter_U64PtrU64Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotScatterG(const char* label_id,ImPlotPoint(*getter)(void* data,int idx),void* data,int count) */
HB_FUNC( IMPLOT_PLOTSCATTERG )
{
   const char* label_id = hb_parcx( 1 );
   void* data = ( void* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   ImPlot_PlotScatterG(label_id,NULL /* &hb_ig_getter */,data,count);
}

/* void ImPlot_PlotShaded_FloatPtrInt(const char* label_id,const float* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_FLOATPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const float* values = ( const float* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotShaded_FloatPtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotShaded_doublePtrInt(const char* label_id,const double* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_DOUBLEPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const double* values = ( const double* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotShaded_doublePtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotShaded_S8PtrInt(const char* label_id,const ImS8* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_S8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* values = ( const ImS8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotShaded_S8PtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotShaded_U8PtrInt(const char* label_id,const ImU8* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_U8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* values = ( const ImU8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotShaded_U8PtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotShaded_S16PtrInt(const char* label_id,const ImS16* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_S16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* values = ( const ImS16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotShaded_S16PtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotShaded_U16PtrInt(const char* label_id,const ImU16* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_U16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* values = ( const ImU16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotShaded_U16PtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotShaded_S32PtrInt(const char* label_id,const ImS32* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_S32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* values = ( const ImS32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotShaded_S32PtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotShaded_U32PtrInt(const char* label_id,const ImU32* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_U32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* values = ( const ImU32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotShaded_U32PtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotShaded_S64PtrInt(const char* label_id,const ImS64* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_S64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* values = ( const ImS64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotShaded_S64PtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotShaded_U64PtrInt(const char* label_id,const ImU64* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_U64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* values = ( const ImU64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotShaded_U64PtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotShaded_FloatPtrFloatPtrInt(const char* label_id,const float* xs,const float* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_FLOATPTRFLOATPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const float* xs = ( const float* ) hb_parptr( 2 );
   const float* ys = ( const float* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_FloatPtrFloatPtrInt(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotShaded_doublePtrdoublePtrInt(const char* label_id,const double* xs,const double* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_DOUBLEPTRDOUBLEPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const double* xs = ( const double* ) hb_parptr( 2 );
   const double* ys = ( const double* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_doublePtrdoublePtrInt(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotShaded_S8PtrS8PtrInt(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_S8PTRS8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* xs = ( const ImS8* ) hb_parptr( 2 );
   const ImS8* ys = ( const ImS8* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_S8PtrS8PtrInt(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotShaded_U8PtrU8PtrInt(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_U8PTRU8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* xs = ( const ImU8* ) hb_parptr( 2 );
   const ImU8* ys = ( const ImU8* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_U8PtrU8PtrInt(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotShaded_S16PtrS16PtrInt(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_S16PTRS16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* xs = ( const ImS16* ) hb_parptr( 2 );
   const ImS16* ys = ( const ImS16* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_S16PtrS16PtrInt(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotShaded_U16PtrU16PtrInt(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_U16PTRU16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* xs = ( const ImU16* ) hb_parptr( 2 );
   const ImU16* ys = ( const ImU16* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_U16PtrU16PtrInt(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotShaded_S32PtrS32PtrInt(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_S32PTRS32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* xs = ( const ImS32* ) hb_parptr( 2 );
   const ImS32* ys = ( const ImS32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_S32PtrS32PtrInt(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotShaded_U32PtrU32PtrInt(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_U32PTRU32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* xs = ( const ImU32* ) hb_parptr( 2 );
   const ImU32* ys = ( const ImU32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_U32PtrU32PtrInt(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotShaded_S64PtrS64PtrInt(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_S64PTRS64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* xs = ( const ImS64* ) hb_parptr( 2 );
   const ImS64* ys = ( const ImS64* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_S64PtrS64PtrInt(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotShaded_U64PtrU64PtrInt(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_U64PTRU64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* xs = ( const ImU64* ) hb_parptr( 2 );
   const ImU64* ys = ( const ImU64* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_U64PtrU64PtrInt(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotShaded_FloatPtrFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys1,const float* ys2,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_FLOATPTRFLOATPTRFLOATPTR )
{
   const char* label_id = hb_parcx( 1 );
   const float* xs = ( const float* ) hb_parptr( 2 );
   const float* ys1 = ( const float* ) hb_parptr( 3 );
   const float* ys2 = ( const float* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_FloatPtrFloatPtrFloatPtr(label_id,xs,ys1,ys2,count,offset,stride);
}

/* void ImPlot_PlotShaded_doublePtrdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys1,const double* ys2,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_DOUBLEPTRDOUBLEPTRDOUBLEPTR )
{
   const char* label_id = hb_parcx( 1 );
   const double* xs = ( const double* ) hb_parptr( 2 );
   const double* ys1 = ( const double* ) hb_parptr( 3 );
   const double* ys2 = ( const double* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_doublePtrdoublePtrdoublePtr(label_id,xs,ys1,ys2,count,offset,stride);
}

/* void ImPlot_PlotShaded_S8PtrS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys1,const ImS8* ys2,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_S8PTRS8PTRS8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* xs = ( const ImS8* ) hb_parptr( 2 );
   const ImS8* ys1 = ( const ImS8* ) hb_parptr( 3 );
   const ImS8* ys2 = ( const ImS8* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_S8PtrS8PtrS8Ptr(label_id,xs,ys1,ys2,count,offset,stride);
}

/* void ImPlot_PlotShaded_U8PtrU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys1,const ImU8* ys2,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_U8PTRU8PTRU8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* xs = ( const ImU8* ) hb_parptr( 2 );
   const ImU8* ys1 = ( const ImU8* ) hb_parptr( 3 );
   const ImU8* ys2 = ( const ImU8* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_U8PtrU8PtrU8Ptr(label_id,xs,ys1,ys2,count,offset,stride);
}

/* void ImPlot_PlotShaded_S16PtrS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys1,const ImS16* ys2,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_S16PTRS16PTRS16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* xs = ( const ImS16* ) hb_parptr( 2 );
   const ImS16* ys1 = ( const ImS16* ) hb_parptr( 3 );
   const ImS16* ys2 = ( const ImS16* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_S16PtrS16PtrS16Ptr(label_id,xs,ys1,ys2,count,offset,stride);
}

/* void ImPlot_PlotShaded_U16PtrU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys1,const ImU16* ys2,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_U16PTRU16PTRU16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* xs = ( const ImU16* ) hb_parptr( 2 );
   const ImU16* ys1 = ( const ImU16* ) hb_parptr( 3 );
   const ImU16* ys2 = ( const ImU16* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_U16PtrU16PtrU16Ptr(label_id,xs,ys1,ys2,count,offset,stride);
}

/* void ImPlot_PlotShaded_S32PtrS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys1,const ImS32* ys2,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_S32PTRS32PTRS32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* xs = ( const ImS32* ) hb_parptr( 2 );
   const ImS32* ys1 = ( const ImS32* ) hb_parptr( 3 );
   const ImS32* ys2 = ( const ImS32* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_S32PtrS32PtrS32Ptr(label_id,xs,ys1,ys2,count,offset,stride);
}

/* void ImPlot_PlotShaded_U32PtrU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys1,const ImU32* ys2,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_U32PTRU32PTRU32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* xs = ( const ImU32* ) hb_parptr( 2 );
   const ImU32* ys1 = ( const ImU32* ) hb_parptr( 3 );
   const ImU32* ys2 = ( const ImU32* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_U32PtrU32PtrU32Ptr(label_id,xs,ys1,ys2,count,offset,stride);
}

/* void ImPlot_PlotShaded_S64PtrS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys1,const ImS64* ys2,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_S64PTRS64PTRS64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* xs = ( const ImS64* ) hb_parptr( 2 );
   const ImS64* ys1 = ( const ImS64* ) hb_parptr( 3 );
   const ImS64* ys2 = ( const ImS64* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_S64PtrS64PtrS64Ptr(label_id,xs,ys1,ys2,count,offset,stride);
}

/* void ImPlot_PlotShaded_U64PtrU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys1,const ImU64* ys2,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSHADED_U64PTRU64PTRU64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* xs = ( const ImU64* ) hb_parptr( 2 );
   const ImU64* ys1 = ( const ImU64* ) hb_parptr( 3 );
   const ImU64* ys2 = ( const ImU64* ) hb_parptr( 4 );
   int count = hb_parni( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotShaded_U64PtrU64PtrU64Ptr(label_id,xs,ys1,ys2,count,offset,stride);
}

/* void ImPlot_PlotShadedG(const char* label_id,ImPlotPoint(*getter1)(void* data,int idx),void* data1,ImPlotPoint(*getter2)(void* data,int idx),void* data2,int count) */
HB_FUNC( IMPLOT_PLOTSHADEDG )
{
   const char* label_id = hb_parcx( 1 );
   void* data1 = ( void* ) hb_parptr( 3 );
   void* data2 = ( void* ) hb_parptr( 5 );
   int count = hb_parni( 6 );
   ImPlot_PlotShadedG(label_id,NULL /* &hb_ig_getter1 */,data1, NULL /* &hb_ig_getter2 */,data2,count);
}

/* void ImPlot_PlotStairs_FloatPtrInt(const char* label_id,const float* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_FLOATPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const float* values = ( const float* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStairs_FloatPtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStairs_doublePtrInt(const char* label_id,const double* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_DOUBLEPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const double* values = ( const double* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStairs_doublePtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStairs_S8PtrInt(const char* label_id,const ImS8* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_S8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* values = ( const ImS8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStairs_S8PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStairs_U8PtrInt(const char* label_id,const ImU8* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_U8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* values = ( const ImU8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStairs_U8PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStairs_S16PtrInt(const char* label_id,const ImS16* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_S16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* values = ( const ImS16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStairs_S16PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStairs_U16PtrInt(const char* label_id,const ImU16* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_U16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* values = ( const ImU16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStairs_U16PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStairs_S32PtrInt(const char* label_id,const ImS32* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_S32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* values = ( const ImS32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStairs_S32PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStairs_U32PtrInt(const char* label_id,const ImU32* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_U32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* values = ( const ImU32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStairs_U32PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStairs_S64PtrInt(const char* label_id,const ImS64* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_S64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* values = ( const ImS64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStairs_S64PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStairs_U64PtrInt(const char* label_id,const ImU64* values,int count,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_U64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* values = ( const ImU64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double xscale = hb_parnd( 4 );
   double x0 = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStairs_U64PtrInt(label_id,values,count,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStairs_FloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_FLOATPTRFLOATPTR )
{
   const char* label_id = hb_parcx( 1 );
   const float* xs = ( const float* ) hb_parptr( 2 );
   const float* ys = ( const float* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotStairs_FloatPtrFloatPtr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotStairs_doublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_DOUBLEPTRDOUBLEPTR )
{
   const char* label_id = hb_parcx( 1 );
   const double* xs = ( const double* ) hb_parptr( 2 );
   const double* ys = ( const double* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotStairs_doublePtrdoublePtr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotStairs_S8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_S8PTRS8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* xs = ( const ImS8* ) hb_parptr( 2 );
   const ImS8* ys = ( const ImS8* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotStairs_S8PtrS8Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotStairs_U8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_U8PTRU8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* xs = ( const ImU8* ) hb_parptr( 2 );
   const ImU8* ys = ( const ImU8* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotStairs_U8PtrU8Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotStairs_S16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_S16PTRS16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* xs = ( const ImS16* ) hb_parptr( 2 );
   const ImS16* ys = ( const ImS16* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotStairs_S16PtrS16Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotStairs_U16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_U16PTRU16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* xs = ( const ImU16* ) hb_parptr( 2 );
   const ImU16* ys = ( const ImU16* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotStairs_U16PtrU16Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotStairs_S32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_S32PTRS32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* xs = ( const ImS32* ) hb_parptr( 2 );
   const ImS32* ys = ( const ImS32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotStairs_S32PtrS32Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotStairs_U32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_U32PTRU32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* xs = ( const ImU32* ) hb_parptr( 2 );
   const ImU32* ys = ( const ImU32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotStairs_U32PtrU32Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotStairs_S64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_S64PTRS64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* xs = ( const ImS64* ) hb_parptr( 2 );
   const ImS64* ys = ( const ImS64* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotStairs_S64PtrS64Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotStairs_U64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTAIRS_U64PTRU64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* xs = ( const ImU64* ) hb_parptr( 2 );
   const ImU64* ys = ( const ImU64* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   int offset = hb_parni( 5 );
   int stride = hb_parni( 6 );
   ImPlot_PlotStairs_U64PtrU64Ptr(label_id,xs,ys,count,offset,stride);
}

/* void ImPlot_PlotStairsG(const char* label_id,ImPlotPoint(*getter)(void* data,int idx),void* data,int count) */
HB_FUNC( IMPLOT_PLOTSTAIRSG )
{
   const char* label_id = hb_parcx( 1 );
   void* data = ( void* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   ImPlot_PlotStairsG(label_id,NULL /* &hb_ig_getter */,data,count);
}

/* void ImPlot_PlotStems_FloatPtrInt(const char* label_id,const float* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_FLOATPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const float* values = ( const float* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotStems_FloatPtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStems_doublePtrInt(const char* label_id,const double* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_DOUBLEPTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const double* values = ( const double* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotStems_doublePtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStems_S8PtrInt(const char* label_id,const ImS8* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_S8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* values = ( const ImS8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotStems_S8PtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStems_U8PtrInt(const char* label_id,const ImU8* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_U8PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* values = ( const ImU8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotStems_U8PtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStems_S16PtrInt(const char* label_id,const ImS16* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_S16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* values = ( const ImS16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotStems_S16PtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStems_U16PtrInt(const char* label_id,const ImU16* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_U16PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* values = ( const ImU16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotStems_U16PtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStems_S32PtrInt(const char* label_id,const ImS32* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_S32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* values = ( const ImS32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotStems_S32PtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStems_U32PtrInt(const char* label_id,const ImU32* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_U32PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* values = ( const ImU32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotStems_U32PtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStems_S64PtrInt(const char* label_id,const ImS64* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_S64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* values = ( const ImS64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotStems_S64PtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStems_U64PtrInt(const char* label_id,const ImU64* values,int count,double y_ref,double xscale,double x0,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_U64PTRINT )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* values = ( const ImU64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   double y_ref = hb_parnd( 4 );
   double xscale = hb_parnd( 5 );
   double x0 = hb_parnd( 6 );
   int offset = hb_parni( 7 );
   int stride = hb_parni( 8 );
   ImPlot_PlotStems_U64PtrInt(label_id,values,count,y_ref,xscale,x0,offset,stride);
}

/* void ImPlot_PlotStems_FloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_FLOATPTRFLOATPTR )
{
   const char* label_id = hb_parcx( 1 );
   const float* xs = ( const float* ) hb_parptr( 2 );
   const float* ys = ( const float* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStems_FloatPtrFloatPtr(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotStems_doublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_DOUBLEPTRDOUBLEPTR )
{
   const char* label_id = hb_parcx( 1 );
   const double* xs = ( const double* ) hb_parptr( 2 );
   const double* ys = ( const double* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStems_doublePtrdoublePtr(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotStems_S8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_S8PTRS8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* xs = ( const ImS8* ) hb_parptr( 2 );
   const ImS8* ys = ( const ImS8* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStems_S8PtrS8Ptr(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotStems_U8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_U8PTRU8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* xs = ( const ImU8* ) hb_parptr( 2 );
   const ImU8* ys = ( const ImU8* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStems_U8PtrU8Ptr(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotStems_S16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_S16PTRS16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* xs = ( const ImS16* ) hb_parptr( 2 );
   const ImS16* ys = ( const ImS16* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStems_S16PtrS16Ptr(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotStems_U16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_U16PTRU16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* xs = ( const ImU16* ) hb_parptr( 2 );
   const ImU16* ys = ( const ImU16* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStems_U16PtrU16Ptr(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotStems_S32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_S32PTRS32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* xs = ( const ImS32* ) hb_parptr( 2 );
   const ImS32* ys = ( const ImS32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStems_S32PtrS32Ptr(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotStems_U32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_U32PTRU32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* xs = ( const ImU32* ) hb_parptr( 2 );
   const ImU32* ys = ( const ImU32* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStems_U32PtrU32Ptr(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotStems_S64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_S64PTRS64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* xs = ( const ImS64* ) hb_parptr( 2 );
   const ImS64* ys = ( const ImS64* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStems_S64PtrS64Ptr(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotStems_U64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double y_ref,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTSTEMS_U64PTRU64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* xs = ( const ImU64* ) hb_parptr( 2 );
   const ImU64* ys = ( const ImU64* ) hb_parptr( 3 );
   int count = hb_parni( 4 );
   double y_ref = hb_parnd( 5 );
   int offset = hb_parni( 6 );
   int stride = hb_parni( 7 );
   ImPlot_PlotStems_U64PtrU64Ptr(label_id,xs,ys,count,y_ref,offset,stride);
}

/* void ImPlot_PlotText(const char* text,double x,double y,bool vertical,const ImVec2 pix_offset) */
HB_FUNC( IMPLOT_PLOTTEXT )
{
   const char* text = hb_parcx( 1 );
   double x = hb_parnd( 2 );
   double y = hb_parnd( 3 );
   bool vertical = hb_parldef( 4, 0 );
   PHB_ITEM ppix_offset = hb_param( 5, HB_IT_ARRAY );
   const ImVec2 pix_offset = ImVec2{ _paf( ppix_offset, 1 ), _paf( ppix_offset, 2 ) };
   ImPlot_PlotText(text,x,y,vertical,pix_offset);
}

/* void ImPlot_PlotToPixels_PlotPoInt(ImVec2 *pOut,const ImPlotPoint plt,ImPlotYAxis y_axis) */
HB_FUNC( IMPLOT_PLOTTOPIXELS_PLOTPOINT )
{
   ImVec2* pOut;
   const ImPlotPoint plt;
   ImPlotYAxis y_axis = ( ImPlotYAxis ) hb_parni( 3 );
   ImPlot_PlotToPixels_PlotPoInt(pOut,plt,y_axis);
}

/* void ImPlot_PlotToPixels_double(ImVec2 *pOut,double x,double y,ImPlotYAxis y_axis) */
HB_FUNC( IMPLOT_PLOTTOPIXELS_DOUBLE )
{
   ImVec2* pOut;
   double x = hb_parnd( 2 );
   double y = hb_parnd( 3 );
   ImPlotYAxis y_axis = ( ImPlotYAxis ) hb_parni( 4 );
   ImPlot_PlotToPixels_double(pOut,x,y,y_axis);
}

/* void ImPlot_PlotVLines_FloatPtr(const char* label_id,const float* xs,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTVLINES_FLOATPTR )
{
   const char* label_id = hb_parcx( 1 );
   const float* xs = ( const float* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotVLines_FloatPtr(label_id,xs,count,offset,stride);
}

/* void ImPlot_PlotVLines_doublePtr(const char* label_id,const double* xs,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTVLINES_DOUBLEPTR )
{
   const char* label_id = hb_parcx( 1 );
   const double* xs = ( const double* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotVLines_doublePtr(label_id,xs,count,offset,stride);
}

/* void ImPlot_PlotVLines_S8Ptr(const char* label_id,const ImS8* xs,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTVLINES_S8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS8* xs = ( const ImS8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotVLines_S8Ptr(label_id,xs,count,offset,stride);
}

/* void ImPlot_PlotVLines_U8Ptr(const char* label_id,const ImU8* xs,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTVLINES_U8PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU8* xs = ( const ImU8* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotVLines_U8Ptr(label_id,xs,count,offset,stride);
}

/* void ImPlot_PlotVLines_S16Ptr(const char* label_id,const ImS16* xs,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTVLINES_S16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS16* xs = ( const ImS16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotVLines_S16Ptr(label_id,xs,count,offset,stride);
}

/* void ImPlot_PlotVLines_U16Ptr(const char* label_id,const ImU16* xs,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTVLINES_U16PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU16* xs = ( const ImU16* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotVLines_U16Ptr(label_id,xs,count,offset,stride);
}

/* void ImPlot_PlotVLines_S32Ptr(const char* label_id,const ImS32* xs,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTVLINES_S32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS32* xs = ( const ImS32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotVLines_S32Ptr(label_id,xs,count,offset,stride);
}

/* void ImPlot_PlotVLines_U32Ptr(const char* label_id,const ImU32* xs,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTVLINES_U32PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU32* xs = ( const ImU32* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotVLines_U32Ptr(label_id,xs,count,offset,stride);
}

/* void ImPlot_PlotVLines_S64Ptr(const char* label_id,const ImS64* xs,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTVLINES_S64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImS64* xs = ( const ImS64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotVLines_S64Ptr(label_id,xs,count,offset,stride);
}

/* void ImPlot_PlotVLines_U64Ptr(const char* label_id,const ImU64* xs,int count,int offset,int stride) */
HB_FUNC( IMPLOT_PLOTVLINES_U64PTR )
{
   const char* label_id = hb_parcx( 1 );
   const ImU64* xs = ( const ImU64* ) hb_parptr( 2 );
   int count = hb_parni( 3 );
   int offset = hb_parni( 4 );
   int stride = hb_parni( 5 );
   ImPlot_PlotVLines_U64Ptr(label_id,xs,count,offset,stride);
}

/* void ImPlot_PopColormap(int count) */
HB_FUNC( IMPLOT_POPCOLORMAP )
{
   int count = hb_parni( 1 );
   ImPlot_PopColormap(count);
}

/* void ImPlot_PopPlotClipRect() */
HB_FUNC( IMPLOT_POPPLOTCLIPRECT )
{
   ImPlot_PopPlotClipRect();
}

/* void ImPlot_PopStyleColor(int count) */
HB_FUNC( IMPLOT_POPSTYLECOLOR )
{
   int count = hb_parni( 1 );
   ImPlot_PopStyleColor(count);
}

/* void ImPlot_PopStyleVar(int count) */
HB_FUNC( IMPLOT_POPSTYLEVAR )
{
   int count = hb_parni( 1 );
   ImPlot_PopStyleVar(count);
}

/* int ImPlot_Precision(double val) */
HB_FUNC( IMPLOT_PRECISION )
{
   double val = hb_parnd( 1 );
   int ret = ImPlot_Precision(val);
   hb_retni( ret );
}

/* void ImPlot_PullLinkedAxis(ImPlotAxis* axis) */
HB_FUNC( IMPLOT_PULLLINKEDAXIS )
{
   ImPlotAxis* axis = ( ImPlotAxis* ) hb_parptr( 1 );
   ImPlot_PullLinkedAxis(axis);
}

/* void ImPlot_PushColormap_PlotColormap(ImPlotColormap cmap) */
HB_FUNC( IMPLOT_PUSHCOLORMAP_PLOTCOLORMAP )
{
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 1 );
   ImPlot_PushColormap_PlotColormap(cmap);
}

/* void ImPlot_PushColormap_Str(const char* name) */
HB_FUNC( IMPLOT_PUSHCOLORMAP_STR )
{
   const char* name = hb_parcx( 1 );
   ImPlot_PushColormap_Str(name);
}

/* void ImPlot_PushLinkedAxis(ImPlotAxis* axis) */
HB_FUNC( IMPLOT_PUSHLINKEDAXIS )
{
   ImPlotAxis* axis = ( ImPlotAxis* ) hb_parptr( 1 );
   ImPlot_PushLinkedAxis(axis);
}

/* void ImPlot_PushPlotClipRect(float expand) */
HB_FUNC( IMPLOT_PUSHPLOTCLIPRECT )
{
   float expand = ( float ) hb_parnd( 1 );
   ImPlot_PushPlotClipRect(expand);
}

/* void ImPlot_PushStyleColor_U32(ImPlotCol idx,ImU32 col) */
HB_FUNC( IMPLOT_PUSHSTYLECOLOR_U32 )
{
   ImPlotCol idx = ( ImPlotCol ) hb_parni( 1 );
   ImU32 col = ( HB_U32 ) hb_parnl( 2 );
   ImPlot_PushStyleColor_U32(idx,col);
}

/* void ImPlot_PushStyleColor_Vec4(ImPlotCol idx,const ImVec4 col) */
HB_FUNC( IMPLOT_PUSHSTYLECOLOR_VEC4 )
{
   ImPlotCol idx = ( ImPlotCol ) hb_parni( 1 );
   PHB_ITEM pcol = hb_param( 2, HB_IT_ARRAY );
   const ImVec4 col = ImVec4{ _paf( pcol, 1 ), _paf( pcol, 2 ), _paf( pcol, 3 ), _paf( pcol, 4 ) };
   ImPlot_PushStyleColor_Vec4(idx,col);
}

/* void ImPlot_PushStyleVar_Float(ImPlotStyleVar idx,float val) */
HB_FUNC( IMPLOT_PUSHSTYLEVAR_FLOAT )
{
   ImPlotStyleVar idx = ( ImPlotStyleVar ) hb_parni( 1 );
   float val = ( float ) hb_parnd( 2 );
   ImPlot_PushStyleVar_Float(idx,val);
}

/* void ImPlot_PushStyleVar_Int(ImPlotStyleVar idx,int val) */
HB_FUNC( IMPLOT_PUSHSTYLEVAR_INT )
{
   ImPlotStyleVar idx = ( ImPlotStyleVar ) hb_parni( 1 );
   int val = hb_parni( 2 );
   ImPlot_PushStyleVar_Int(idx,val);
}

/* void ImPlot_PushStyleVar_Vec2(ImPlotStyleVar idx,const ImVec2 val) */
HB_FUNC( IMPLOT_PUSHSTYLEVAR_VEC2 )
{
   ImPlotStyleVar idx = ( ImPlotStyleVar ) hb_parni( 1 );
   PHB_ITEM pval = hb_param( 2, HB_IT_ARRAY );
   const ImVec2 val = ImVec2{ _paf( pval, 1 ), _paf( pval, 2 ) };
   ImPlot_PushStyleVar_Vec2(idx,val);
}

/* bool ImPlot_RangesOverlap(const ImPlotRange r1,const ImPlotRange r2) */
HB_FUNC( IMPLOT_RANGESOVERLAP )
{
   const ImPlotRange r1;
   const ImPlotRange r2;
   bool ret = ImPlot_RangesOverlap(r1,r2);
   hb_retl( ret );
}

/* ImPlotItem* ImPlot_RegisterOrGetItem(const char* label_id,bool* just_created) */
HB_FUNC( IMPLOT_REGISTERORGETITEM )
{
   const char* label_id = hb_parcx( 1 );
   bool /* @ */ _just_created = hb_parldef( 2, 0 );
   bool * just_created = &_just_created;
   ImPlotItem* ret = ImPlot_RegisterOrGetItem(label_id,just_created);
   hb_itemPutL( hb_paramError( 2 ), _just_created );
   hb_retptr( ( void * ) ret );
}

/* void ImPlot_RenderColorBar(const ImU32* colors,int size,ImDrawList* DrawList,const ImRect bounds,bool vert,bool reversed,bool continuous) */
HB_FUNC( IMPLOT_RENDERCOLORBAR )
{
   const ImU32* colors = ( const ImU32* ) hb_parptr( 1 );
   int size = hb_parni( 2 );
   ImDrawList* DrawList = ( ImDrawList* ) hb_parptr( 3 );
   PHB_ITEM pbounds = hb_param( 4, HB_IT_ARRAY );
   const ImRect bounds = ImRect{ ImVec2{ _paf( pbounds, 1 ), _paf( pbounds, 2 ) }, ImVec2{ _paf( pbounds, 3 ), _paf( pbounds, 4 ) } };
   bool vert = hb_parl( 5 );
   bool reversed = hb_parl( 6 );
   bool continuous = hb_parl( 7 );
   ImPlot_RenderColorBar(colors,size,DrawList,bounds,vert,reversed,continuous);
}

/* void ImPlot_ResetCtxForNextAlignedPlots(ImPlotContext* ctx) */
HB_FUNC( IMPLOT_RESETCTXFORNEXTALIGNEDPLOTS )
{
   ImPlotContext* ctx = ( ImPlotContext* ) hb_parptr( 1 );
   ImPlot_ResetCtxForNextAlignedPlots(ctx);
}

/* void ImPlot_ResetCtxForNextPlot(ImPlotContext* ctx) */
HB_FUNC( IMPLOT_RESETCTXFORNEXTPLOT )
{
   ImPlotContext* ctx = ( ImPlotContext* ) hb_parptr( 1 );
   ImPlot_ResetCtxForNextPlot(ctx);
}

/* void ImPlot_ResetCtxForNextSubplot(ImPlotContext* ctx) */
HB_FUNC( IMPLOT_RESETCTXFORNEXTSUBPLOT )
{
   ImPlotContext* ctx = ( ImPlotContext* ) hb_parptr( 1 );
   ImPlot_ResetCtxForNextSubplot(ctx);
}

/* void ImPlot_RoundTime(ImPlotTime *pOut,const ImPlotTime t,ImPlotTimeUnit unit) */
HB_FUNC( IMPLOT_ROUNDTIME )
{
   ImPlotTime* pOut;
   const ImPlotTime t;
   ImPlotTimeUnit unit = ( ImPlotTimeUnit ) hb_parni( 3 );
   ImPlot_RoundTime(pOut,t,unit);
}

/* double ImPlot_RoundTo(double val,int prec) */
HB_FUNC( IMPLOT_ROUNDTO )
{
   double val = hb_parnd( 1 );
   int prec = hb_parni( 2 );
   double ret = ImPlot_RoundTo(val,prec);
   hb_retnd( ret );
}

/* void ImPlot_SampleColormap(ImVec4 *pOut,float t,ImPlotColormap cmap) */
HB_FUNC( IMPLOT_SAMPLECOLORMAP )
{
   ImVec4* pOut;
   float t = ( float ) hb_parnd( 2 );
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 3 );
   ImPlot_SampleColormap(pOut,t,cmap);
}

/* ImU32 ImPlot_SampleColormapU32(float t,ImPlotColormap cmap) */
HB_FUNC( IMPLOT_SAMPLECOLORMAPU32 )
{
   float t = ( float ) hb_parnd( 1 );
   ImPlotColormap cmap = ( ImPlotColormap ) hb_parni( 2 );
   ImU32 ret = ImPlot_SampleColormapU32(t,cmap);
   hb_retnl( ( HB_LONG ) ret );
}

/* void ImPlot_SetCurrentContext(ImPlotContext* ctx) */
HB_FUNC( IMPLOT_SETCURRENTCONTEXT )
{
   ImPlotContext* ctx = ( ImPlotContext* ) hb_parptr( 1 );
   ImPlot_SetCurrentContext(ctx);
}

/* void ImPlot_SetImGuiContext(ImGuiContext* ctx) */
HB_FUNC( IMPLOT_SETIMGUICONTEXT )
{
   ImGuiContext* ctx = ( ImGuiContext* ) hb_parptr( 1 );
   ImPlot_SetImGuiContext(ctx);
}

/* void ImPlot_SetLegendLocation(ImPlotLocation location,ImPlotOrientation orientation,bool outside) */
HB_FUNC( IMPLOT_SETLEGENDLOCATION )
{
   ImPlotLocation location = ( ImPlotLocation ) hb_parni( 1 );
   ImPlotOrientation orientation = ( ImPlotOrientation ) hb_parni( 2 );
   bool outside = hb_parldef( 3, 0 );
   ImPlot_SetLegendLocation(location,orientation,outside);
}

/* void ImPlot_SetMousePosLocation(ImPlotLocation location) */
HB_FUNC( IMPLOT_SETMOUSEPOSLOCATION )
{
   ImPlotLocation location = ( ImPlotLocation ) hb_parni( 1 );
   ImPlot_SetMousePosLocation(location);
}

/* void ImPlot_SetNextErrorBarStyle(const ImVec4 col,float size,float weight) */
HB_FUNC( IMPLOT_SETNEXTERRORBARSTYLE )
{
   PHB_ITEM pcol = hb_param( 1, HB_IT_ARRAY );
   const ImVec4 col = ImVec4{ _paf( pcol, 1 ), _paf( pcol, 2 ), _paf( pcol, 3 ), _paf( pcol, 4 ) };
   float size = ( float ) hb_parnd( 2 );
   float weight = ( float ) hb_parnd( 3 );
   ImPlot_SetNextErrorBarStyle(col,size,weight);
}

/* void ImPlot_SetNextFillStyle(const ImVec4 col,float alpha_mod) */
HB_FUNC( IMPLOT_SETNEXTFILLSTYLE )
{
   PHB_ITEM pcol = hb_param( 1, HB_IT_ARRAY );
   const ImVec4 col = ImVec4{ _paf( pcol, 1 ), _paf( pcol, 2 ), _paf( pcol, 3 ), _paf( pcol, 4 ) };
   float alpha_mod = ( float ) hb_parnd( 2 );
   ImPlot_SetNextFillStyle(col,alpha_mod);
}

/* void ImPlot_SetNextLineStyle(const ImVec4 col,float weight) */
HB_FUNC( IMPLOT_SETNEXTLINESTYLE )
{
   PHB_ITEM pcol = hb_param( 1, HB_IT_ARRAY );
   const ImVec4 col = ImVec4{ _paf( pcol, 1 ), _paf( pcol, 2 ), _paf( pcol, 3 ), _paf( pcol, 4 ) };
   float weight = ( float ) hb_parnd( 2 );
   ImPlot_SetNextLineStyle(col,weight);
}

/* void ImPlot_SetNextMarkerStyle(ImPlotMarker marker,float size,const ImVec4 fill,float weight,const ImVec4 outline) */
HB_FUNC( IMPLOT_SETNEXTMARKERSTYLE )
{
   ImPlotMarker marker = ( ImPlotMarker ) hb_parni( 1 );
   float size = ( float ) hb_parnd( 2 );
   PHB_ITEM pfill = hb_param( 3, HB_IT_ARRAY );
   const ImVec4 fill = ImVec4{ _paf( pfill, 1 ), _paf( pfill, 2 ), _paf( pfill, 3 ), _paf( pfill, 4 ) };
   float weight = ( float ) hb_parnd( 4 );
   PHB_ITEM poutline = hb_param( 5, HB_IT_ARRAY );
   const ImVec4 outline = ImVec4{ _paf( poutline, 1 ), _paf( poutline, 2 ), _paf( poutline, 3 ), _paf( poutline, 4 ) };
   ImPlot_SetNextMarkerStyle(marker,size,fill,weight,outline);
}

/* void ImPlot_SetNextPlotFormatX(const char* fmt) */
HB_FUNC( IMPLOT_SETNEXTPLOTFORMATX )
{
   const char* fmt = hb_parcx( 1 );
   ImPlot_SetNextPlotFormatX(fmt);
}

/* void ImPlot_SetNextPlotFormatY(const char* fmt,ImPlotYAxis y_axis) */
HB_FUNC( IMPLOT_SETNEXTPLOTFORMATY )
{
   const char* fmt = hb_parcx( 1 );
   ImPlotYAxis y_axis = ( ImPlotYAxis ) hb_parni( 2 );
   ImPlot_SetNextPlotFormatY(fmt,y_axis);
}

/* void ImPlot_SetNextPlotLimits(double xmin,double xmax,double ymin,double ymax,ImGuiCond cond) */
HB_FUNC( IMPLOT_SETNEXTPLOTLIMITS )
{
   double xmin = hb_parnd( 1 );
   double xmax = hb_parnd( 2 );
   double ymin = hb_parnd( 3 );
   double ymax = hb_parnd( 4 );
   ImGuiCond cond;
   ImPlot_SetNextPlotLimits(xmin,xmax,ymin,ymax,cond);
}

/* void ImPlot_SetNextPlotLimitsX(double xmin,double xmax,ImGuiCond cond) */
HB_FUNC( IMPLOT_SETNEXTPLOTLIMITSX )
{
   double xmin = hb_parnd( 1 );
   double xmax = hb_parnd( 2 );
   ImGuiCond cond;
   ImPlot_SetNextPlotLimitsX(xmin,xmax,cond);
}

/* void ImPlot_SetNextPlotLimitsY(double ymin,double ymax,ImGuiCond cond,ImPlotYAxis y_axis) */
HB_FUNC( IMPLOT_SETNEXTPLOTLIMITSY )
{
   double ymin = hb_parnd( 1 );
   double ymax = hb_parnd( 2 );
   ImGuiCond cond;
   ImPlotYAxis y_axis = ( ImPlotYAxis ) hb_parni( 4 );
   ImPlot_SetNextPlotLimitsY(ymin,ymax,cond,y_axis);
}

/* void ImPlot_SetNextPlotTicksX_doublePtr(const double* values,int n_ticks,const char* const labels[],bool keep_default) */
HB_FUNC( IMPLOT_SETNEXTPLOTTICKSX_DOUBLEPTR )
{
   const double* values = ( const double* ) hb_parptr( 1 );
   int n_ticks = hb_parni( 2 );
   const char* const labels[] = { 0 };
   bool keep_default = hb_parldef( 4, 0 );
   ImPlot_SetNextPlotTicksX_doublePtr(values,n_ticks,labels,keep_default);
}

/* void ImPlot_SetNextPlotTicksX_double(double x_min,double x_max,int n_ticks,const char* const labels[],bool keep_default) */
HB_FUNC( IMPLOT_SETNEXTPLOTTICKSX_DOUBLE )
{
   double x_min = hb_parnd( 1 );
   double x_max = hb_parnd( 2 );
   int n_ticks = hb_parni( 3 );
   const char* const labels[] = { 0 };
   bool keep_default = hb_parldef( 5, 0 );
   ImPlot_SetNextPlotTicksX_double(x_min,x_max,n_ticks,labels,keep_default);
}

/* void ImPlot_SetNextPlotTicksY_doublePtr(const double* values,int n_ticks,const char* const labels[],bool keep_default,ImPlotYAxis y_axis) */
HB_FUNC( IMPLOT_SETNEXTPLOTTICKSY_DOUBLEPTR )
{
   const double* values = ( const double* ) hb_parptr( 1 );
   int n_ticks = hb_parni( 2 );
   const char* const labels[] = { 0 };
   bool keep_default = hb_parldef( 4, 0 );
   ImPlotYAxis y_axis = ( ImPlotYAxis ) hb_parni( 5 );
   ImPlot_SetNextPlotTicksY_doublePtr(values,n_ticks,labels,keep_default,y_axis);
}

/* void ImPlot_SetNextPlotTicksY_double(double y_min,double y_max,int n_ticks,const char* const labels[],bool keep_default,ImPlotYAxis y_axis) */
HB_FUNC( IMPLOT_SETNEXTPLOTTICKSY_DOUBLE )
{
   double y_min = hb_parnd( 1 );
   double y_max = hb_parnd( 2 );
   int n_ticks = hb_parni( 3 );
   const char* const labels[] = { 0 };
   bool keep_default = hb_parldef( 5, 0 );
   ImPlotYAxis y_axis = ( ImPlotYAxis ) hb_parni( 6 );
   ImPlot_SetNextPlotTicksY_double(y_min,y_max,n_ticks,labels,keep_default,y_axis);
}

/* void ImPlot_SetPlotQuery(const ImPlotLimits query,ImPlotYAxis y_axis) */
HB_FUNC( IMPLOT_SETPLOTQUERY )
{
   const ImPlotLimits query;
   ImPlotYAxis y_axis = ( ImPlotYAxis ) hb_parni( 2 );
   ImPlot_SetPlotQuery(query,y_axis);
}

/* void ImPlot_SetPlotYAxis(ImPlotYAxis y_axis) */
HB_FUNC( IMPLOT_SETPLOTYAXIS )
{
   ImPlotYAxis y_axis = ( ImPlotYAxis ) hb_parni( 1 );
   ImPlot_SetPlotYAxis(y_axis);
}

/* void ImPlot_ShowAltLegend(const char* title_id,ImPlotOrientation orientation,const ImVec2 size,bool interactable) */
HB_FUNC( IMPLOT_SHOWALTLEGEND )
{
   const char* title_id = hb_parcx( 1 );
   ImPlotOrientation orientation = ( ImPlotOrientation ) hb_parni( 2 );
   PHB_ITEM psize = hb_param( 3, HB_IT_ARRAY );
   const ImVec2 size = ImVec2{ _paf( psize, 1 ), _paf( psize, 2 ) };
   bool interactable = hb_parldef( 4, 1 );
   ImPlot_ShowAltLegend(title_id,orientation,size,interactable);
}

/* void ImPlot_ShowAxisContextMenu(ImPlotAxis* axis,ImPlotAxis* equal_axis,bool time_allowed) */
HB_FUNC( IMPLOT_SHOWAXISCONTEXTMENU )
{
   ImPlotAxis* axis = ( ImPlotAxis* ) hb_parptr( 1 );
   ImPlotAxis* equal_axis = ( ImPlotAxis* ) hb_parptr( 2 );
   bool time_allowed = hb_parldef( 3, 0 );
   ImPlot_ShowAxisContextMenu(axis,equal_axis,time_allowed);
}

/* bool ImPlot_ShowColormapSelector(const char* label) */
HB_FUNC( IMPLOT_SHOWCOLORMAPSELECTOR )
{
   const char* label = hb_parcx( 1 );
   bool ret = ImPlot_ShowColormapSelector(label);
   hb_retl( ret );
}

/* bool ImPlot_ShowDatePicker(const char* id,int* level,ImPlotTime* t,const ImPlotTime* t1,const ImPlotTime* t2) */
HB_FUNC( IMPLOT_SHOWDATEPICKER )
{
   const char* id = hb_parcx( 1 );
   int /* @ */ _level = hb_parni( 2 );
   int * level = &_level;
   ImPlotTime* t = ( ImPlotTime* ) hb_parptr( 3 );
   const ImPlotTime* t1 = ( const ImPlotTime* ) hb_parptr( 4 );
   const ImPlotTime* t2 = ( const ImPlotTime* ) hb_parptr( 5 );
   bool ret = ImPlot_ShowDatePicker(id,level,t,t1,t2);
   hb_itemPutNI( hb_paramError( 2 ), _level );
   hb_retl( ret );
}

/* void ImPlot_ShowDemoWindow(bool* p_open) */
HB_FUNC( IMPLOT_SHOWDEMOWINDOW )
{
   bool /* @ */ _p_open = hb_parldef( 1, 0 );
   bool * p_open = &_p_open;
   ImPlot_ShowDemoWindow(p_open);
   hb_itemPutL( hb_paramError( 1 ), _p_open );
}

/* bool ImPlot_ShowLegendContextMenu(ImPlotLegendData* legend,bool visible) */
HB_FUNC( IMPLOT_SHOWLEGENDCONTEXTMENU )
{
   ImPlotLegendData* legend = ( ImPlotLegendData* ) hb_parptr( 1 );
   bool visible = hb_parl( 2 );
   bool ret = ImPlot_ShowLegendContextMenu(legend,visible);
   hb_retl( ret );
}

/* bool ImPlot_ShowLegendEntries(ImPlotItemGroup* items,const ImRect legend_bb,bool interactable,const ImVec2 pad,const ImVec2 spacing,ImPlotOrientation orientation,ImDrawList* DrawList) */
HB_FUNC( IMPLOT_SHOWLEGENDENTRIES )
{
   ImPlotItemGroup* items = ( ImPlotItemGroup* ) hb_parptr( 1 );
   PHB_ITEM plegend_bb = hb_param( 2, HB_IT_ARRAY );
   const ImRect legend_bb = ImRect{ ImVec2{ _paf( plegend_bb, 1 ), _paf( plegend_bb, 2 ) }, ImVec2{ _paf( plegend_bb, 3 ), _paf( plegend_bb, 4 ) } };
   bool interactable = hb_parl( 3 );
   PHB_ITEM ppad = hb_param( 4, HB_IT_ARRAY );
   const ImVec2 pad = ImVec2{ _paf( ppad, 1 ), _paf( ppad, 2 ) };
   PHB_ITEM pspacing = hb_param( 5, HB_IT_ARRAY );
   const ImVec2 spacing = ImVec2{ _paf( pspacing, 1 ), _paf( pspacing, 2 ) };
   ImPlotOrientation orientation = ( ImPlotOrientation ) hb_parni( 6 );
   ImDrawList* DrawList = ( ImDrawList* ) hb_parptr( 7 );
   bool ret = ImPlot_ShowLegendEntries(items,legend_bb,interactable,pad,spacing,orientation,DrawList);
   hb_retl( ret );
}

/* void ImPlot_ShowMetricsWindow(bool* p_popen) */
HB_FUNC( IMPLOT_SHOWMETRICSWINDOW )
{
   bool /* @ */ _p_popen = hb_parldef( 1, 0 );
   bool * p_popen = &_p_popen;
   ImPlot_ShowMetricsWindow(p_popen);
   hb_itemPutL( hb_paramError( 1 ), _p_popen );
}

/* void ImPlot_ShowPlotContextMenu(ImPlotPlot* plot) */
HB_FUNC( IMPLOT_SHOWPLOTCONTEXTMENU )
{
   ImPlotPlot* plot = ( ImPlotPlot* ) hb_parptr( 1 );
   ImPlot_ShowPlotContextMenu(plot);
}

/* void ImPlot_ShowStyleEditor(ImPlotStyle* ref) */
HB_FUNC( IMPLOT_SHOWSTYLEEDITOR )
{
   ImPlotStyle* ref = ( ImPlotStyle* ) hb_parptr( 1 );
   ImPlot_ShowStyleEditor(ref);
}

/* bool ImPlot_ShowStyleSelector(const char* label) */
HB_FUNC( IMPLOT_SHOWSTYLESELECTOR )
{
   const char* label = hb_parcx( 1 );
   bool ret = ImPlot_ShowStyleSelector(label);
   hb_retl( ret );
}

/* void ImPlot_ShowSubplotsContextMenu(ImPlotSubplot* subplot) */
HB_FUNC( IMPLOT_SHOWSUBPLOTSCONTEXTMENU )
{
   ImPlotSubplot* subplot = ( ImPlotSubplot* ) hb_parptr( 1 );
   ImPlot_ShowSubplotsContextMenu(subplot);
}

/* bool ImPlot_ShowTimePicker(const char* id,ImPlotTime* t) */
HB_FUNC( IMPLOT_SHOWTIMEPICKER )
{
   const char* id = hb_parcx( 1 );
   ImPlotTime* t = ( ImPlotTime* ) hb_parptr( 2 );
   bool ret = ImPlot_ShowTimePicker(id,t);
   hb_retl( ret );
}

/* void ImPlot_ShowUserGuide() */
HB_FUNC( IMPLOT_SHOWUSERGUIDE )
{
   ImPlot_ShowUserGuide();
}

/* void ImPlot_StyleColorsAuto(ImPlotStyle* dst) */
HB_FUNC( IMPLOT_STYLECOLORSAUTO )
{
   ImPlotStyle* dst = ( ImPlotStyle* ) hb_parptr( 1 );
   ImPlot_StyleColorsAuto(dst);
}

/* void ImPlot_StyleColorsClassic(ImPlotStyle* dst) */
HB_FUNC( IMPLOT_STYLECOLORSCLASSIC )
{
   ImPlotStyle* dst = ( ImPlotStyle* ) hb_parptr( 1 );
   ImPlot_StyleColorsClassic(dst);
}

/* void ImPlot_StyleColorsDark(ImPlotStyle* dst) */
HB_FUNC( IMPLOT_STYLECOLORSDARK )
{
   ImPlotStyle* dst = ( ImPlotStyle* ) hb_parptr( 1 );
   ImPlot_StyleColorsDark(dst);
}

/* void ImPlot_StyleColorsLight(ImPlotStyle* dst) */
HB_FUNC( IMPLOT_STYLECOLORSLIGHT )
{
   ImPlotStyle* dst = ( ImPlotStyle* ) hb_parptr( 1 );
   ImPlot_StyleColorsLight(dst);
}

/* void ImPlot_SubplotNextCell() */
HB_FUNC( IMPLOT_SUBPLOTNEXTCELL )
{
   ImPlot_SubplotNextCell();
}

/* void ImPlot_UpdateAxisColors(int axis_flag,ImPlotAxis* axis) */
HB_FUNC( IMPLOT_UPDATEAXISCOLORS )
{
   int axis_flag = hb_parni( 1 );
   ImPlotAxis* axis = ( ImPlotAxis* ) hb_parptr( 2 );
   ImPlot_UpdateAxisColors(axis_flag,axis);
}

/* void ImPlot_UpdateTransformCache() */
HB_FUNC( IMPLOT_UPDATETRANSFORMCACHE )
{
   ImPlot_UpdateTransformCache();
}

